{"AC_INIT": [" -- Macro: AC_INIT (UNIQUE-FILE-IN-SOURCE-DIR)\n     Formerly \u2018AC_INIT\u2019 used to have a single argument, and was\n     equivalent to:\n\n          AC_INIT\n          AC_CONFIG_SRCDIR(UNIQUE-FILE-IN-SOURCE-DIR)\n     See *note AC_INIT:: and *note AC_CONFIG_SRCDIR::.\n", "config"], "AC_PREREQ": [" -- Macro: AC_PREREQ (VERSION)\n     Ensure that a recent enough version of Autoconf is being used.  If\n     the version of Autoconf being used to create \u2018configure\u2019 is earlier\n     than VERSION, print an error message to the standard error output\n     and exit with failure (exit status is 63).  For example:\n\n          AC_PREREQ([2.71])\n\n     This macro may be used before \u2018AC_INIT\u2019.\n", "config"], "AC_AUTOCONF_VERSION": [" -- Macro: AC_AUTOCONF_VERSION\n     This macro was introduced in Autoconf 2.62.  It identifies the\n     version of Autoconf that is currently parsing the input file, in a\n     format suitable for \u2018m4_version_compare\u2019 (*note\n     m4_version_compare::); in other words, for this release of\n     Autoconf, its value is \u20182.71\u2019.  One potential use of this macro is\n     for writing conditional fallbacks based on when a feature was added\n     to Autoconf, rather than using \u2018AC_PREREQ\u2019 to require the newer\n     version of Autoconf.  However, remember that the Autoconf\n     philosophy favors feature checks over version checks.\n\n     You should not expand this macro directly; use\n     \u2018m4_defn([AC_AUTOCONF_VERSION])\u2019 instead.  This is because some\n     users might have a beta version of Autoconf installed, with\n     arbitrary letters included in its version string.  This means it is\n     possible for the version string to contain the name of a defined\n     macro, such that expanding \u2018AC_AUTOCONF_VERSION\u2019 would trigger the\n     expansion of that macro during rescanning, and change the version\n     string to be different than what you intended to check.\n\n\u001f", "config"], "AC_COPYRIGHT": [" -- Macro: AC_COPYRIGHT (COPYRIGHT-NOTICE)\n     State that, in addition to the Free Software Foundation\u2019s copyright\n     on the Autoconf macros, parts of your \u2018configure\u2019 are covered by\n     the COPYRIGHT-NOTICE.\n\n     The COPYRIGHT-NOTICE shows up in both the head of \u2018configure\u2019 and\n     in \u2018configure --version\u2019.\n", "config"], "AC_REVISION": [" -- Macro: AC_REVISION (REVISION-INFO)\n     Copy revision stamp REVISION-INFO into the \u2018configure\u2019 script, with\n     any dollar signs or double-quotes removed.  This macro lets you put\n     a revision stamp from \u2018configure.ac\u2019 into \u2018configure\u2019 without RCS\n     or CVS changing it when you check in \u2018configure\u2019.  That way, you\n     can determine easily which revision of \u2018configure.ac\u2019 a particular\n     \u2018configure\u2019 corresponds to.\n\n     For example, this line in \u2018configure.ac\u2019:\n\n          AC_REVISION([$Revision: 1.30 $])\n\n     produces this in \u2018configure\u2019:\n\n          #!/bin/sh\n          # From configure.ac Revision: 1.30\n\n\u001f", "config"], "AC_CONFIG_SRCDIR": [" -- Macro: AC_CONFIG_SRCDIR (UNIQUE-FILE-IN-SOURCE-DIR)\n     Distinguish this package\u2019s source directory from other source\n     directories that might happen to exist in the file system.\n     UNIQUE-FILE-IN-SOURCE-DIR should name a file that is unique to this\n     package.  \u2018configure\u2019 will verify that this file exists in\n     \u2018SRCDIR\u2019, before it runs any other checks.\n\n     Use of this macro is strongly recommended.  It protects against\n     people accidentally specifying the wrong directory with \u2018--srcdir\u2019.\n     *Note configure Invocation::, for more information.\n", "config"], "AC_CONFIG_MACRO_DIRS": [" -- Macro: AC_CONFIG_MACRO_DIRS (DIR1 [DIR2 ... DIRN])\n -- Macro: AC_CONFIG_MACRO_DIR (DIR)\n     Specify the given directories as the location of additional local\n     Autoconf macros.  These macros are intended for use by commands\n     like \u2018autoreconf\u2019 or \u2018aclocal\u2019 that trace macro calls; they should\n     be called directly from \u2018configure.ac\u2019 so that tools that install\n     macros for \u2018aclocal\u2019 can find the macros\u2019 declarations.  Tools that\n     want to learn which directories have been selected should trace\n     \u2018AC_CONFIG_MACRO_DIR_TRACE\u2019, which will be called once per\n     directory.\n\n     AC_CONFIG_MACRO_DIRS is the preferred form, and can be called\n     multiple times and with multiple arguments; in such cases,\n     directories in earlier calls are expected to be searched before\n     directories in later calls, and directories appearing in the same\n     call are expected to be searched in the order in which they appear\n     in the call.  For historical reasons, the macro AC_CONFIG_MACRO_DIR\n     can also be used once, if it appears first, for tools such as older\n     \u2018libtool\u2019 that weren\u2019t prepared to handle multiple directories.\n     For example, a usage like\n\n          AC_CONFIG_MACRO_DIR([dir1])\n          AC_CONFIG_MACRO_DIRS([dir2])\n          AC_CONFIG_MACRO_DIRS([dir3 dir4])\n\n     will cause the trace of AC_CONFIG_MACRO_DIR_TRACE to appear four\n     times, and should cause the directories to be searched in this\n     order: \u2018dir1 dir2 dir3 dir4\u2019.\n\n     Note that if you use \u2018aclocal\u2019 from an Automake release prior to\n     1.13 to generate \u2018aclocal.m4\u2019, you must also set \u2018ACLOCAL_AMFLAGS =\n     -I DIR1 [-I DIR2 ... -I DIRN]\u2019 in your top-level \u2018Makefile.am\u2019.\n     Due to a limitation in the Autoconf implementation of \u2018autoreconf\u2019,\n     these include directives currently must be set on a single line in\n     \u2018Makefile.am\u2019, without any backslash-newlines.\n", "config"], "AC_CONFIG_MACRO_DIR": [" -- Macro: AC_CONFIG_MACRO_DIRS (DIR1 [DIR2 ... DIRN])\n -- Macro: AC_CONFIG_MACRO_DIR (DIR)\n     Specify the given directories as the location of additional local\n     Autoconf macros.  These macros are intended for use by commands\n     like \u2018autoreconf\u2019 or \u2018aclocal\u2019 that trace macro calls; they should\n     be called directly from \u2018configure.ac\u2019 so that tools that install\n     macros for \u2018aclocal\u2019 can find the macros\u2019 declarations.  Tools that\n     want to learn which directories have been selected should trace\n     \u2018AC_CONFIG_MACRO_DIR_TRACE\u2019, which will be called once per\n     directory.\n\n     AC_CONFIG_MACRO_DIRS is the preferred form, and can be called\n     multiple times and with multiple arguments; in such cases,\n     directories in earlier calls are expected to be searched before\n     directories in later calls, and directories appearing in the same\n     call are expected to be searched in the order in which they appear\n     in the call.  For historical reasons, the macro AC_CONFIG_MACRO_DIR\n     can also be used once, if it appears first, for tools such as older\n     \u2018libtool\u2019 that weren\u2019t prepared to handle multiple directories.\n     For example, a usage like\n\n          AC_CONFIG_MACRO_DIR([dir1])\n          AC_CONFIG_MACRO_DIRS([dir2])\n          AC_CONFIG_MACRO_DIRS([dir3 dir4])\n\n     will cause the trace of AC_CONFIG_MACRO_DIR_TRACE to appear four\n     times, and should cause the directories to be searched in this\n     order: \u2018dir1 dir2 dir3 dir4\u2019.\n\n     Note that if you use \u2018aclocal\u2019 from an Automake release prior to\n     1.13 to generate \u2018aclocal.m4\u2019, you must also set \u2018ACLOCAL_AMFLAGS =\n     -I DIR1 [-I DIR2 ... -I DIRN]\u2019 in your top-level \u2018Makefile.am\u2019.\n     Due to a limitation in the Autoconf implementation of \u2018autoreconf\u2019,\n     these include directives currently must be set on a single line in\n     \u2018Makefile.am\u2019, without any backslash-newlines.\n", "config"], "AC_CONFIG_AUX_DIR": ["\u2018AC_CONFIG_AUX_DIR\u2019\n     Automake will look for various helper scripts, such as\n     \u2018install-sh\u2019, in the directory named in this macro invocation.\n     (The full list of scripts is: \u2018ar-lib\u2019, \u2018config.guess\u2019,\n     \u2018config.sub\u2019, \u2018depcomp\u2019, \u2018compile\u2019, \u2018install-sh\u2019, \u2018ltmain.sh\u2019,\n     \u2018mdate-sh\u2019, \u2018missing\u2019, \u2018mkinstalldirs\u2019, \u2018py-compile\u2019,\n     \u2018test-driver\u2019, \u2018texinfo.tex\u2019, \u2018ylwrap\u2019.)  Not all scripts are\n     always searched for; some scripts will only be sought if the\n     generated \u2018Makefile.in\u2019 requires them.\n\n     If \u2018AC_CONFIG_AUX_DIR\u2019 is used, it must be given before the call to\n     \u2018AM_INIT_AUTOMAKE\u2019; Automake will warn about this if it is not so.\n     All other \u2018AC_CONFIG_...\u2019 macros are conventionally called after\n     \u2018AM_INIT_AUTOMAKE\u2019, though they may or may not work in other\n     locations, with or without warnings.\n\n     If \u2018AC_CONFIG_AUX_DIR\u2019 is not given, the scripts are looked for in\n     their standard locations.  For \u2018mdate-sh\u2019, \u2018texinfo.tex\u2019, and\n     \u2018ylwrap\u2019, the standard location is the source directory\n     corresponding to the current \u2018Makefile.am\u2019.  For the rest, the\n     standard location is the first one of \u2018.\u2019, \u2018..\u2019, or \u2018../..\u2019\n     (relative to the top source directory) that provides any one of the\n     helper scripts.  *Note Finding \u2018configure\u2019 Input: (autoconf)Input.\n\n     Required files from \u2018AC_CONFIG_AUX_DIR\u2019 are automatically\n     distributed, even if there is no \u2018Makefile.am\u2019 in this directory.\n", "config"], "AC_REQUIRE_AUX_FILE": ["\u2018AC_REQUIRE_AUX_FILE\u2019\n     For each \u2018AC_REQUIRE_AUX_FILE([FILE])\u2019, \u2018automake\u2019 will ensure that\n     \u2018FILE\u2019 exists in the aux directory, and will complain otherwise.\n     It will also automatically distribute the file.  This macro should\n     be used by third-party Autoconf macros that require some supporting\n     files in the aux directory specified with \u2018AC_CONFIG_AUX_DIR\u2019\n     above.  *Note Finding \u2018configure\u2019 Input: (autoconf)Input.\n", "config"], "AC_OUTPUT": ["\u2018AC_CONFIG_FILES\u2019\n\u2018AC_OUTPUT\u2019\n     These two macros are usually invoked as follows near the end of\n     \u2018configure.ac\u2019.\n\n          ...\n          AC_CONFIG_FILES([\n            Makefile\n            doc/Makefile\n            src/Makefile\n            src/lib/Makefile\n            ...\n          ])\n          AC_OUTPUT\n\n     Automake uses these to determine which files to create (*note\n     Creating Output Files: (autoconf)Output.).  A listed file is\n     considered to be an Automake generated \u2018Makefile\u2019 if there exists a\n     file with the same name and the \u2018.am\u2019 extension appended.\n     Typically, \u2018AC_CONFIG_FILES([foo/Makefile])\u2019 will cause Automake to\n     generate \u2018foo/Makefile.in\u2019 if \u2018foo/Makefile.am\u2019 exists.\n\n     When using \u2018AC_CONFIG_FILES\u2019 with multiple input files, as in\n\n          AC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])\n\n     \u2018automake\u2019 will generate the first \u2018.in\u2019 input file for which a\n     \u2018.am\u2019 file exists.  If no such file exists the output file is not\n     considered to be generated by Automake.\n\n     Files created by \u2018AC_CONFIG_FILES\u2019, be they Automake \u2018Makefile\u2019s or\n     not, are all removed by \u2018make distclean\u2019.  Their inputs are\n     automatically distributed, unless they are the output of prior\n     \u2018AC_CONFIG_FILES\u2019 commands.  Finally, rebuild rules are generated\n     in the Automake \u2018Makefile\u2019 existing in the subdirectory of the\n     output file, if there is one, or in the top-level \u2018Makefile\u2019\n     otherwise.\n\n     The above machinery (cleaning, distributing, and rebuilding) works\n     fine if the \u2018AC_CONFIG_FILES\u2019 specifications contain only literals.\n     If part of the specification uses shell variables, \u2018automake\u2019 will\n     not be able to fulfill this setup, and you will have to complete\n     the missing bits by hand.  For instance, on\n\n          file=input\n          ...\n          AC_CONFIG_FILES([output:$file],, [file=$file])\n\n     \u2018automake\u2019 will output rules to clean \u2018output\u2019, and rebuild it.\n     However the rebuild rule will not depend on \u2018input\u2019, and this file\n     will not be distributed either.  (You must add \u2018EXTRA_DIST = input\u2019\n     to your \u2018Makefile.am\u2019 if \u2018input\u2019 is a source file.)\n\n     Similarly\n\n          file=output\n          file2=out:in\n          ...\n          AC_CONFIG_FILES([$file:input],, [file=$file])\n          AC_CONFIG_FILES([$file2],, [file2=$file2])\n\n     will only cause \u2018input\u2019 to be distributed.  No file will be cleaned\n     automatically (add \u2018DISTCLEANFILES = output out\u2019 yourself), and no\n     rebuild rule will be output.\n\n     Obviously \u2018automake\u2019 cannot guess what value \u2018$file\u2019 is going to\n     hold later when \u2018configure\u2019 is run, and it cannot use the shell\n     variable \u2018$file\u2019 in a \u2018Makefile\u2019.  However, if you make reference\n     to \u2018$file\u2019 as \u2018${file}\u2019 (i.e., in a way that is compatible with\n     \u2018make\u2019\u2019s syntax) and furthermore use \u2018AC_SUBST\u2019 to ensure that\n     \u2018${file}\u2019 is meaningful in a \u2018Makefile\u2019, then \u2018automake\u2019 will be\n     able to use \u2018${file}\u2019 to generate all of these rules.  For\n     instance, here is how the Automake package itself generates\n     versioned scripts for its test suite:\n\n          AC_SUBST([APIVERSION], ...)\n          ...\n          AC_CONFIG_FILES(\n            [tests/aclocal-${APIVERSION}:tests/aclocal.in],\n            [chmod +x tests/aclocal-${APIVERSION}],\n            [APIVERSION=$APIVERSION])\n          AC_CONFIG_FILES(\n            [tests/automake-${APIVERSION}:tests/automake.in],\n            [chmod +x tests/automake-${APIVERSION}])\n\n     Here cleaning, distributing, and rebuilding are done automatically,\n     because \u2018${APIVERSION}\u2019 is known at \u2018make\u2019-time.\n\n     Note that you should not use shell variables to declare \u2018Makefile\u2019\n     files for which \u2018automake\u2019 must create \u2018Makefile.in\u2019.  Even\n     \u2018AC_SUBST\u2019 does not help here, because \u2018automake\u2019 needs to know the\n     file name when it runs in order to check whether \u2018Makefile.am\u2019\n     exists.  (In the very hairy case that your setup requires such use\n     of variables, you will have to tell Automake which \u2018Makefile.in\u2019s\n     to generate on the command-line.)\n\n     It is possible to let \u2018automake\u2019 emit conditional rules for\n     \u2018AC_CONFIG_FILES\u2019 with the help of \u2018AM_COND_IF\u2019 (*note Optional::).\n\n     To summarize:\n        \u2022 Use literals for \u2018Makefile\u2019s, and for other files whenever\n          possible.\n        \u2022 Use \u2018$file\u2019 (or \u2018${file}\u2019 without \u2018AC_SUBST([file])\u2019) for\n          files that \u2018automake\u2019 should ignore.\n        \u2022 Use \u2018${file}\u2019 and \u2018AC_SUBST([file])\u2019 for files that \u2018automake\u2019\n          should not ignore.\n", "config"], "AC_PROG_MAKE_SET": [" -- Macro: AC_PROG_MAKE_SET\n     If the Make command, \u2018$MAKE\u2019 if set or else \u2018make\u2019, predefines\n     \u2018$(MAKE)\u2019, define output variable \u2018SET_MAKE\u2019 to be empty.\n     Otherwise, define \u2018SET_MAKE\u2019 to a macro definition that sets\n     \u2018$(MAKE)\u2019, such as \u2018MAKE=make\u2019.  Calls \u2018AC_SUBST\u2019 for \u2018SET_MAKE\u2019.\n", "config"], "AC_CONFIG_FILES": ["\u2018AC_CONFIG_FILES\u2019\n\u2018AC_OUTPUT\u2019\n     These two macros are usually invoked as follows near the end of\n     \u2018configure.ac\u2019.\n\n          ...\n          AC_CONFIG_FILES([\n            Makefile\n            doc/Makefile\n            src/Makefile\n            src/lib/Makefile\n            ...\n          ])\n          AC_OUTPUT\n\n     Automake uses these to determine which files to create (*note\n     Creating Output Files: (autoconf)Output.).  A listed file is\n     considered to be an Automake generated \u2018Makefile\u2019 if there exists a\n     file with the same name and the \u2018.am\u2019 extension appended.\n     Typically, \u2018AC_CONFIG_FILES([foo/Makefile])\u2019 will cause Automake to\n     generate \u2018foo/Makefile.in\u2019 if \u2018foo/Makefile.am\u2019 exists.\n\n     When using \u2018AC_CONFIG_FILES\u2019 with multiple input files, as in\n\n          AC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])\n\n     \u2018automake\u2019 will generate the first \u2018.in\u2019 input file for which a\n     \u2018.am\u2019 file exists.  If no such file exists the output file is not\n     considered to be generated by Automake.\n\n     Files created by \u2018AC_CONFIG_FILES\u2019, be they Automake \u2018Makefile\u2019s or\n     not, are all removed by \u2018make distclean\u2019.  Their inputs are\n     automatically distributed, unless they are the output of prior\n     \u2018AC_CONFIG_FILES\u2019 commands.  Finally, rebuild rules are generated\n     in the Automake \u2018Makefile\u2019 existing in the subdirectory of the\n     output file, if there is one, or in the top-level \u2018Makefile\u2019\n     otherwise.\n\n     The above machinery (cleaning, distributing, and rebuilding) works\n     fine if the \u2018AC_CONFIG_FILES\u2019 specifications contain only literals.\n     If part of the specification uses shell variables, \u2018automake\u2019 will\n     not be able to fulfill this setup, and you will have to complete\n     the missing bits by hand.  For instance, on\n\n          file=input\n          ...\n          AC_CONFIG_FILES([output:$file],, [file=$file])\n\n     \u2018automake\u2019 will output rules to clean \u2018output\u2019, and rebuild it.\n     However the rebuild rule will not depend on \u2018input\u2019, and this file\n     will not be distributed either.  (You must add \u2018EXTRA_DIST = input\u2019\n     to your \u2018Makefile.am\u2019 if \u2018input\u2019 is a source file.)\n\n     Similarly\n\n          file=output\n          file2=out:in\n          ...\n          AC_CONFIG_FILES([$file:input],, [file=$file])\n          AC_CONFIG_FILES([$file2],, [file2=$file2])\n\n     will only cause \u2018input\u2019 to be distributed.  No file will be cleaned\n     automatically (add \u2018DISTCLEANFILES = output out\u2019 yourself), and no\n     rebuild rule will be output.\n\n     Obviously \u2018automake\u2019 cannot guess what value \u2018$file\u2019 is going to\n     hold later when \u2018configure\u2019 is run, and it cannot use the shell\n     variable \u2018$file\u2019 in a \u2018Makefile\u2019.  However, if you make reference\n     to \u2018$file\u2019 as \u2018${file}\u2019 (i.e., in a way that is compatible with\n     \u2018make\u2019\u2019s syntax) and furthermore use \u2018AC_SUBST\u2019 to ensure that\n     \u2018${file}\u2019 is meaningful in a \u2018Makefile\u2019, then \u2018automake\u2019 will be\n     able to use \u2018${file}\u2019 to generate all of these rules.  For\n     instance, here is how the Automake package itself generates\n     versioned scripts for its test suite:\n\n          AC_SUBST([APIVERSION], ...)\n          ...\n          AC_CONFIG_FILES(\n            [tests/aclocal-${APIVERSION}:tests/aclocal.in],\n            [chmod +x tests/aclocal-${APIVERSION}],\n            [APIVERSION=$APIVERSION])\n          AC_CONFIG_FILES(\n            [tests/automake-${APIVERSION}:tests/automake.in],\n            [chmod +x tests/automake-${APIVERSION}])\n\n     Here cleaning, distributing, and rebuilding are done automatically,\n     because \u2018${APIVERSION}\u2019 is known at \u2018make\u2019-time.\n\n     Note that you should not use shell variables to declare \u2018Makefile\u2019\n     files for which \u2018automake\u2019 must create \u2018Makefile.in\u2019.  Even\n     \u2018AC_SUBST\u2019 does not help here, because \u2018automake\u2019 needs to know the\n     file name when it runs in order to check whether \u2018Makefile.am\u2019\n     exists.  (In the very hairy case that your setup requires such use\n     of variables, you will have to tell Automake which \u2018Makefile.in\u2019s\n     to generate on the command-line.)\n\n     It is possible to let \u2018automake\u2019 emit conditional rules for\n     \u2018AC_CONFIG_FILES\u2019 with the help of \u2018AM_COND_IF\u2019 (*note Optional::).\n\n     To summarize:\n        \u2022 Use literals for \u2018Makefile\u2019s, and for other files whenever\n          possible.\n        \u2022 Use \u2018$file\u2019 (or \u2018${file}\u2019 without \u2018AC_SUBST([file])\u2019) for\n          files that \u2018automake\u2019 should ignore.\n        \u2022 Use \u2018${file}\u2019 and \u2018AC_SUBST([file])\u2019 for files that \u2018automake\u2019\n          should not ignore.\n", "config"], "AC_CONFIG_HEADERS": ["\u2018AC_CONFIG_HEADERS\u2019\n     Automake will generate rules to rebuild these headers from the\n     corresponding templates (usually, the template for a \u2018foo.h\u2019 header\n     being \u2018foo.h.in\u2019).\n\n     As with \u2018AC_CONFIG_FILES\u2019 (*note Requirements::), parts of the\n     specification using shell variables will be ignored as far as\n     cleaning, distributing, and rebuilding is concerned.\n\n     Older versions of Automake required the use of \u2018AM_CONFIG_HEADER\u2019;\n     this is no longer the case, and that macro has indeed been removed.\n", "config"], "AH_HEADER": [" -- Macro: AH_HEADER\n     This macro is defined as the name of the first declared config\n     header and undefined if no config headers have been declared up to\n     this point.  A third-party macro may, for example, require use of a\n     config header without invoking AC_CONFIG_HEADERS twice, like this:\n\n          AC_CONFIG_COMMANDS_PRE(\n                  [m4_ifndef([AH_HEADER], [AC_CONFIG_HEADERS([config.h])])])\n", "config"], "AH_TEMPLATE": [" -- Macro: AH_TEMPLATE (KEY, DESCRIPTION)\n     Tell \u2018autoheader\u2019 to generate a template for KEY.  This macro\n     generates standard templates just like \u2018AC_DEFINE\u2019 when a\n     DESCRIPTION is given.\n\n     For example:\n\n          AH_TEMPLATE([NULL_DEVICE],\n            [Name of the file to open to get\n             a null file, or a data sink.])\n\n     generates the following template, with the description properly\n     justified.\n\n          /* Name of the file to open to get a null file, or a data sink. */\n          #undef NULL_DEVICE\n", "config"], "AH_VERBATIM": [" -- Macro: AH_VERBATIM (KEY, TEMPLATE)\n     Tell \u2018autoheader\u2019 to include the TEMPLATE as-is in the header\n     template file.  This TEMPLATE is associated with the KEY, which is\n     used to sort all the different templates and guarantee their\n     uniqueness.  It should be a symbol that can be defined via\n     \u2018AC_DEFINE\u2019.\n", "config"], "AH_TOP": [" -- Macro: AH_TOP (TEXT)\n     Include TEXT at the top of the header template file.\n", "config"], "AH_BOTTOM": [" -- Macro: AH_BOTTOM (TEXT)\n     Include TEXT at the bottom of the header template file.\n", "config"], "AC_CONFIG_COMMANDS": [" -- Macro: AC_CONFIG_COMMANDS (TAG..., [CMDS], [INIT-CMDS])\n     Specify additional shell commands to run at the end of\n     \u2018config.status\u2019, and shell commands to initialize any variables\n     from \u2018configure\u2019.  Associate the commands with TAG.  Since\n     typically the CMDS create a file, TAG should naturally be the name\n     of that file.  If needed, the directory hosting TAG is created.\n     The TAG should not contain shell metacharacters.  *Note Special\n     Chars in Variables::.  This macro is one of the instantiating\n     macros; see *note Configuration Actions::.\n\n     Here is an unrealistic example:\n          fubar=42\n          AC_CONFIG_COMMANDS([fubar],\n                             [echo this is extra $fubar, and so on.],\n                             [fubar=$fubar])\n\n     Here is a better one:\n          AC_CONFIG_COMMANDS([timestamp], [date >timestamp])\n", "config"], "AC_CONFIG_COMMANDS_PRE": [" -- Macro: AC_CONFIG_COMMANDS_PRE (CMDS)\n     Execute the CMDS right before creating \u2018config.status\u2019.\n\n     This macro presents the last opportunity to call \u2018AC_SUBST\u2019,\n     \u2018AC_DEFINE\u2019, or \u2018AC_CONFIG_ITEMS\u2019 macros.\n", "config"], "AC_CONFIG_COMMANDS_POST": [" -- Macro: AC_CONFIG_COMMANDS_POST (CMDS)\n     Execute the CMDS right after creating \u2018config.status\u2019.\n\n\u001f", "config"], "AC_CONFIG_LINKS": ["\u2018AC_CONFIG_LINKS\u2019\n     Automake will generate rules to remove \u2018configure\u2019 generated links\n     on \u2018make distclean\u2019 and to distribute named source files as part of\n     \u2018make dist\u2019.\n\n     As with \u2018AC_CONFIG_FILES\u2019 (*note Requirements::), parts of the\n     specification using shell variables will be ignored as far as\n     cleaning and distributing is concerned.  (There are no rebuild\n     rules for links.)\n", "config"], "AC_CONFIG_SUBDIRS": [" -- Macro: AC_CONFIG_SUBDIRS (DIR ...)\n     Make \u2018AC_OUTPUT\u2019 run \u2018configure\u2019 in each subdirectory DIR in the\n     given blank-or-newline-separated list.  Each DIR should be a\n     literal, i.e., please do not use:\n\n          if test \"x$package_foo_enabled\" = xyes; then\n            my_subdirs=\"$my_subdirs foo\"\n          fi\n          AC_CONFIG_SUBDIRS([$my_subdirs])\n\n     because this prevents \u2018./configure --help=recursive\u2019 from\n     displaying the options of the package \u2018foo\u2019.  Instead, you should\n     write:\n\n          if test \"x$package_foo_enabled\" = xyes; then\n            AC_CONFIG_SUBDIRS([foo])\n          fi\n\n     If a given DIR is not found at \u2018configure\u2019 run time, a warning is\n     reported; if the subdirectory is optional, write:\n\n          if test -d \"$srcdir/foo\"; then\n            AC_CONFIG_SUBDIRS([foo])\n          fi\n\n     If a given DIR contains \u2018configure.gnu\u2019, it is run instead of\n     \u2018configure\u2019.  This is for packages that might use a non-Autoconf\n     script \u2018Configure\u2019, which can\u2019t be called through a wrapper\n     \u2018configure\u2019 since it would be the same file on case-insensitive\n     file systems.\n\n     The subdirectory \u2018configure\u2019 scripts are given the same command\n     line options that were given to this \u2018configure\u2019 script, with minor\n     changes if needed, which include:\n\n        \u2212 adjusting a relative name for the cache file;\n\n        \u2212 adjusting a relative name for the source directory;\n\n        \u2212 propagating the current value of \u2018$prefix\u2019, including if it\n          was defaulted, and if the default values of the top level and\n          of the subdirectory \u2018configure\u2019 differ.\n\n     This macro also sets the output variable \u2018subdirs\u2019 to the list of\n     directories \u2018DIR ...\u2019.  Make rules can use this variable to\n     determine which subdirectories to recurse into.\n\n     This macro may be called multiple times.\n\n\u001f", "config"], "AC_PREFIX_DEFAULT": [" -- Macro: AC_PREFIX_DEFAULT (PREFIX)\n     Set the default installation prefix to PREFIX instead of\n     \u2018/usr/local\u2019.\n", "config"], "AC_PREFIX_PROGRAM": [" -- Macro: AC_PREFIX_PROGRAM (PROGRAM)\n     If the user did not specify an installation prefix (using the\n     \u2018--prefix\u2019 option), guess a value for it by looking for PROGRAM in\n     \u2018PATH\u2019, the way the shell does.  If PROGRAM is found, set the\n     prefix to the parent of the directory containing PROGRAM, else\n     default the prefix as described above (\u2018/usr/local\u2019 or\n     \u2018AC_PREFIX_DEFAULT\u2019).  For example, if PROGRAM is \u2018gcc\u2019 and the\n     \u2018PATH\u2019 contains \u2018/usr/local/gnu/bin/gcc\u2019, set the prefix to\n     \u2018/usr/local/gnu\u2019.\n\n\u001f", "config"], "AC_INCLUDES_DEFAULT": [" -- Macro: AC_INCLUDES_DEFAULT ([INCLUDE-DIRECTIVES])\n     Expand to INCLUDE-DIRECTIVES if present and nonempty, otherwise to:\n\n          #include <stddef.h>\n          #ifdef HAVE_STDIO_H\n          # include <stdio.h>\n          #endif\n          #ifdef HAVE_STDLIB_H\n          # include <stdlib.h>\n          #endif\n          #ifdef HAVE_STRING_H\n          # include <string.h>\n          #endif\n          #ifdef HAVE_INTTYPES_H\n          # include <inttypes.h>\n          #endif\n          #ifdef HAVE_STDINT_H\n          # include <stdint.h>\n          #endif\n          #ifdef HAVE_STRINGS_H\n          # include <strings.h>\n          #endif\n          #ifdef HAVE_SYS_TYPES_H\n          # include <sys/types.h>\n          #endif\n          #ifdef HAVE_SYS_STAT_H\n          # include <sys/stat.h>\n          #endif\n          #ifdef HAVE_UNISTD_H\n          # include <unistd.h>\n          #endif\n\n     Using this macro without INCLUDE-DIRECTIVES has the side effect of\n     checking for \u2018stdio.h\u2019, \u2018stdlib.h\u2019, \u2018string.h\u2019, \u2018inttypes.h\u2019,\n     \u2018stdint.h\u2019, \u2018strings.h\u2019, \u2018sys/types.h\u2019, \u2018sys/stat.h\u2019, and\n     \u2018unistd.h\u2019, as if by \u2018AC_CHECK_HEADERS_ONCE\u2019.  For backward\n     compatibility, the macro \u2018STDC_HEADERS\u2019 will be defined when both\n     \u2018stdlib.h\u2019 and \u2018string.h\u2019 are available.\n\n     *Portability Note:* It is safe for most programs to assume the\n     presence of all of the headers required by the original 1990 C\n     standard.  \u2018AC_INCLUDES_DEFAULT\u2019 checks for \u2018stdio.h\u2019, \u2018stdlib.h\u2019,\n     and \u2018string.h\u2019, even though they are in that list, because they\n     might not be available when compiling for a \u201cfreestanding\n     environment\u201d (in which most of the features of the C library are\n     optional).  You probably do not need to write \u2018#ifdef HAVE_STDIO_H\u2019\n     in your own code.\n\n     \u2018inttypes.h\u2019 and \u2018stdint.h\u2019 were added to C in the 1999 revision of\n     the standard, and \u2018strings.h\u2019, \u2018sys/types.h\u2019, \u2018sys/stat.h\u2019, and\n     \u2018unistd.h\u2019 are POSIX extensions.  You _should_ guard uses of these\n     headers with appropriate conditionals.\n", "config"], "AC_CHECK_INCLUDES_DEFAULT": [" -- Macro: AC_CHECK_INCLUDES_DEFAULT\n     Check for all the headers that \u2018AC_INCLUDES_DEFAULT\u2019 would check\n     for as a side-effect, if this has not already happened.\n\n     This macro mainly exists so that \u2018autoupdate\u2019 can replace certain\n     obsolete constructs with it.  You should not need to use it\n     yourself; in fact, it is likely to be safe to delete it from any\n     script in which it appears.  (\u2018autoupdate\u2019 does not know whether\n     preprocessor macros such as \u2018HAVE_STDINT_H\u2019 are used in the\n     program, nor whether they would get defined as a side-effect of\n     other checks.)\n\n\u001f", "config"], "AC_PROG_AWK": [" -- Macro: AC_PROG_AWK\n     Check for \u2018gawk\u2019, \u2018mawk\u2019, \u2018nawk\u2019, and \u2018awk\u2019, in that order, and set\n     output variable \u2018AWK\u2019 to the first one that is found.  It tries\n     \u2018gawk\u2019 first because that is reported to be the best\n     implementation.  The result can be overridden by setting the\n     variable \u2018AWK\u2019 or the cache variable \u2018ac_cv_prog_AWK\u2019.\n\n     Using this macro is sufficient to avoid the pitfalls of traditional\n     \u2018awk\u2019 (*note Limitations of Usual Tools: awk.).\n", "config"], "AC_PROG_GREP": [" -- Macro: AC_PROG_GREP\n     Look for the best available \u2018grep\u2019 or \u2018ggrep\u2019 that accepts the\n     longest input lines possible, and that supports multiple \u2018-e\u2019\n     options.  Set the output variable \u2018GREP\u2019 to whatever is chosen.\n     *Note Limitations of Usual Tools: grep, for more information about\n     portability problems with the \u2018grep\u2019 command family.  The result\n     can be overridden by setting the \u2018GREP\u2019 variable and is cached in\n     the \u2018ac_cv_path_GREP\u2019 variable.\n", "config"], "AC_PROG_EGREP": [" -- Macro: AC_PROG_EGREP\n     Check whether \u2018$GREP -E\u2019 works, or else look for the best available\n     \u2018egrep\u2019 or \u2018gegrep\u2019 that accepts the longest input lines possible.\n     Set the output variable \u2018EGREP\u2019 to whatever is chosen.  The result\n     can be overridden by setting the \u2018EGREP\u2019 variable and is cached in\n     the \u2018ac_cv_path_EGREP\u2019 variable.\n", "config"], "AC_PROG_FGREP": [" -- Macro: AC_PROG_FGREP\n     Check whether \u2018$GREP -F\u2019 works, or else look for the best available\n     \u2018fgrep\u2019 or \u2018gfgrep\u2019 that accepts the longest input lines possible.\n     Set the output variable \u2018FGREP\u2019 to whatever is chosen.  The result\n     can be overridden by setting the \u2018FGREP\u2019 variable and is cached in\n     the \u2018ac_cv_path_FGREP\u2019 variable.\n", "config"], "AC_PROG_INSTALL": [" -- Macro: AC_PROG_INSTALL\n     Set output variable \u2018INSTALL\u2019 to the name of a BSD-compatible\n     \u2018install\u2019 program, if one is found in the current \u2018PATH\u2019.\n     Otherwise, set \u2018INSTALL\u2019 to \u2018DIR/install-sh -c\u2019, checking the\n     directories specified to \u2018AC_CONFIG_AUX_DIR\u2019 (or its default\n     directories) to determine DIR (*note Output::).  Also set the\n     variables \u2018INSTALL_PROGRAM\u2019 and \u2018INSTALL_SCRIPT\u2019 to \u2018${INSTALL}\u2019\n     and \u2018INSTALL_DATA\u2019 to \u2018${INSTALL} -m 644\u2019.\n\n     \u2018@INSTALL@\u2019 is special, as its value may vary for different\n     configuration files.\n\n     This macro screens out various instances of \u2018install\u2019 known not to\n     work.  It prefers to find a C program rather than a shell script,\n     for speed.  Instead of \u2018install-sh\u2019, it can also use \u2018install.sh\u2019,\n     but that name is obsolete because some \u2018make\u2019 programs have a rule\n     that creates \u2018install\u2019 from it if there is no makefile.  Further,\n     this macro requires \u2018install\u2019 to be able to install multiple files\n     into a target directory in a single invocation.\n\n     Autoconf comes with a copy of \u2018install-sh\u2019 that you can use.  If\n     you use \u2018AC_PROG_INSTALL\u2019, you must include \u2018install-sh\u2019 in your\n     distribution; otherwise \u2018autoreconf\u2019 and \u2018configure\u2019 will produce\n     an error message saying they can\u2019t find it\u2014even if the system\n     you\u2019re on has a good \u2018install\u2019 program.  This check is a safety\n     measure to prevent you from accidentally leaving that file out,\n     which would prevent your package from installing on systems that\n     don\u2019t have a BSD-compatible \u2018install\u2019 program.\n\n     If you need to use your own installation program because it has\n     features not found in standard \u2018install\u2019 programs, there is no\n     reason to use \u2018AC_PROG_INSTALL\u2019; just put the file name of your\n     program into your \u2018Makefile.in\u2019 files.\n\n     The result of the test can be overridden by setting the variable\n     \u2018INSTALL\u2019 or the cache variable \u2018ac_cv_path_install\u2019.\n", "config"], "AC_PROG_MKDIR_P": [" -- Macro: AC_PROG_MKDIR_P\n     Set output variable \u2018MKDIR_P\u2019 to a program that ensures that for\n     each argument, a directory named by this argument exists, creating\n     it and its parent directories if needed, and without race\n     conditions when two instances of the program attempt to make the\n     same directory at nearly the same time.\n\n     This macro uses the \u2018mkdir -p\u2019 command if possible.  Otherwise, it\n     falls back on invoking \u2018install-sh\u2019 with the \u2018-d\u2019 option, so your\n     package should contain \u2018install-sh\u2019 as described under\n     \u2018AC_PROG_INSTALL\u2019.  An \u2018install-sh\u2019 file that predates Autoconf\n     2.60 or Automake 1.10 is vulnerable to race conditions, so if you\n     want to support parallel installs from different packages into the\n     same directory you need to make sure you have an up-to-date\n     \u2018install-sh\u2019.  In particular, be careful about using \u2018autoreconf\n     -if\u2019 if your Automake predates Automake 1.10.\n\n     This macro is related to the \u2018AS_MKDIR_P\u2019 macro (*note Programming\n     in M4sh::), but it sets an output variable intended for use in\n     other files, whereas \u2018AS_MKDIR_P\u2019 is intended for use in scripts\n     like \u2018configure\u2019.  Also, \u2018AS_MKDIR_P\u2019 does not accept options, but\n     \u2018MKDIR_P\u2019 supports the \u2018-m\u2019 option, e.g., a makefile might invoke\n     \u2018$(MKDIR_P) -m 0 dir\u2019 to create an inaccessible directory, and\n     conversely a makefile should use \u2018$(MKDIR_P) -- $(FOO)\u2019 if FOO\n     might yield a value that begins with \u2018-\u2019.  Finally, \u2018AS_MKDIR_P\u2019\n     does not check for race condition vulnerability, whereas\n     \u2018AC_PROG_MKDIR_P\u2019 does.\n\n     \u2018@MKDIR_P@\u2019 is special, as its value may vary for different\n     configuration files.\n\n     The result of the test can be overridden by setting the variable\n     \u2018MKDIR_P\u2019 or the cache variable \u2018ac_cv_path_mkdir\u2019.\n", "config"], "AC_PROG_LEX": ["\u2018AC_PROG_LEX\u2019\n     If a Lex source file is seen, then this macro must be used.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n", "config"], "AC_PROG_LN_S": [" -- Macro: AC_PROG_LN_S\n     If \u2018ln -s\u2019 works on the current file system (the operating system\n     and file system support symbolic links), set the output variable\n     \u2018LN_S\u2019 to \u2018ln -s\u2019; otherwise, if \u2018ln\u2019 works, set \u2018LN_S\u2019 to \u2018ln\u2019,\n     and otherwise set it to \u2018cp -pR\u2019.\n\n     If you make a link in a directory other than the current directory,\n     its meaning depends on whether \u2018ln\u2019 or \u2018ln -s\u2019 is used.  To safely\n     create links using \u2018$(LN_S)\u2019, either find out which form is used\n     and adjust the arguments, or always invoke \u2018ln\u2019 in the directory\n     where the link is to be created.\n\n     In other words, it does not work to do:\n          $(LN_S) foo /x/bar\n\n     Instead, do:\n\n          (cd /x && $(LN_S) foo bar)\n", "config"], "AC_PROG_RANLIB": ["\u2018AC_PROG_RANLIB\u2019\n     This is required if any libraries are built in the package.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n", "config"], "AC_PROG_SED": [" -- Macro: AC_PROG_SED\n     Set output variable \u2018SED\u2019 to a Sed implementation that conforms to\n     Posix and does not have arbitrary length limits.  Report an error\n     if no acceptable Sed is found.  *Note Limitations of Usual Tools:\n     sed, for more information about portability problems with Sed.\n\n     The result of this test can be overridden by setting the \u2018SED\u2019\n     variable and is cached in the \u2018ac_cv_path_SED\u2019 variable.\n", "config"], "AC_PROG_YACC": ["\u2018AC_PROG_YACC\u2019\n     If a Yacc source file is seen, then you must either use this macro\n     or define the variable \u2018YACC\u2019 in \u2018configure.ac\u2019.  The former is\n     preferred (*note Particular Program Checks: (autoconf)Particular\n     Programs.).\n", "config"], "AC_CHECK_PROG": [" -- Macro: AC_CHECK_PROG (VARIABLE, PROG-TO-CHECK-FOR, VALUE-IF-FOUND,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019], [REJECT])\n     Check whether program PROG-TO-CHECK-FOR exists in PATH.  If it is\n     found, set VARIABLE to VALUE-IF-FOUND, otherwise to\n     VALUE-IF-NOT-FOUND, if given.  Always pass over REJECT (an absolute\n     file name) even if it is the first found in the search path; in\n     that case, set VARIABLE using the absolute file name of the\n     PROG-TO-CHECK-FOR found that is not REJECT.  If VARIABLE was\n     already set, do nothing.  Calls \u2018AC_SUBST\u2019 for VARIABLE.  The\n     result of this test can be overridden by setting the VARIABLE\n     variable or the cache variable \u2018ac_cv_prog_VARIABLE\u2019.\n", "config"], "AC_CHECK_PROGS": [" -- Macro: AC_CHECK_PROGS (VARIABLE, PROGS-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Check for each program in the blank-separated list\n     PROGS-TO-CHECK-FOR existing in the PATH.  If one is found, set\n     VARIABLE to the name of that program.  Otherwise, continue checking\n     the next program in the list.  If none of the programs in the list\n     are found, set VARIABLE to VALUE-IF-NOT-FOUND; if\n     VALUE-IF-NOT-FOUND is not specified, the value of VARIABLE is not\n     changed.  Calls \u2018AC_SUBST\u2019 for VARIABLE.  The result of this test\n     can be overridden by setting the VARIABLE variable or the cache\n     variable \u2018ac_cv_prog_VARIABLE\u2019.\n", "config"], "AC_CHECK_TARGET_TOOL": [" -- Macro: AC_CHECK_TARGET_TOOL (VARIABLE, PROG-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_PROG\u2019, but first looks for PROG-TO-CHECK-FOR with a\n     prefix of the target type as determined by \u2018AC_CANONICAL_TARGET\u2019,\n     followed by a dash (*note Canonicalizing::).  If the tool cannot be\n     found with a prefix, and if the build and target types are equal,\n     then it is also searched for without a prefix.\n\n     As noted in *note Specifying Target Triplets::, the target is\n     rarely specified, because most of the time it is the same as the\n     host: it is the type of system for which any compiler tool in the\n     package produces code.  What this macro looks for is, for example,\n     _a tool (assembler, linker, etc.) that the compiler driver (\u2018gcc\u2019\n     for the GNU C Compiler) uses to produce objects, archives or\n     executables_.\n", "config"], "AC_CHECK_TOOL": [" -- Macro: AC_CHECK_TOOL (VARIABLE, PROG-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_PROG\u2019, but first looks for PROG-TO-CHECK-FOR with a\n     prefix of the host type as specified by \u2018--host\u2019, followed by a\n     dash.  For example, if the user runs \u2018configure --build=x86_64-gnu\n     --host=aarch64-linux-gnu\u2019, then this call:\n          AC_CHECK_TOOL([RANLIB], [ranlib], [:])\n     sets \u2018RANLIB\u2019 to \u2018aarch64-linux-gnu-ranlib\u2019 if that program exists\n     in PATH, or otherwise to \u2018ranlib\u2019 if that program exists in PATH,\n     or to \u2018:\u2019 if neither program exists.\n\n     When cross-compiling, this macro will issue a warning if no program\n     prefixed with the host type could be found.  For more information,\n     see *note Specifying Target Triplets::.\n", "config"], "AC_CHECK_TARGET_TOOLS": [" -- Macro: AC_CHECK_TARGET_TOOLS (VARIABLE, PROGS-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_TARGET_TOOL\u2019, each of the tools in the list\n     PROGS-TO-CHECK-FOR are checked with a prefix of the target type as\n     determined by \u2018AC_CANONICAL_TARGET\u2019, followed by a dash (*note\n     Canonicalizing::).  If none of the tools can be found with a\n     prefix, and if the build and target types are equal, then the first\n     one without a prefix is used.  If a tool is found, set VARIABLE to\n     the name of that program.  If none of the tools in the list are\n     found, set VARIABLE to VALUE-IF-NOT-FOUND; if VALUE-IF-NOT-FOUND is\n     not specified, the value of VARIABLE is not changed.  Calls\n     \u2018AC_SUBST\u2019 for VARIABLE.\n", "config"], "AC_CHECK_TOOLS": [" -- Macro: AC_CHECK_TOOLS (VARIABLE, PROGS-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_TOOL\u2019, each of the tools in the list\n     PROGS-TO-CHECK-FOR are checked with a prefix of the host type as\n     determined by \u2018AC_CANONICAL_HOST\u2019, followed by a dash (*note\n     Canonicalizing::).  If none of the tools can be found with a\n     prefix, then the first one without a prefix is used.  If a tool is\n     found, set VARIABLE to the name of that program.  If none of the\n     tools in the list are found, set VARIABLE to VALUE-IF-NOT-FOUND; if\n     VALUE-IF-NOT-FOUND is not specified, the value of VARIABLE is not\n     changed.  Calls \u2018AC_SUBST\u2019 for VARIABLE.\n\n     When cross-compiling, this macro will issue a warning if no program\n     prefixed with the host type could be found.  For more information,\n     see *note Specifying Target Triplets::.\n", "config"], "AC_PATH_PROG": [" -- Macro: AC_PATH_PROG (VARIABLE, PROG-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_PROG\u2019, but set VARIABLE to the absolute name of\n     PROG-TO-CHECK-FOR if found.  The result of this test can be\n     overridden by setting the VARIABLE variable.  A positive result of\n     this test is cached in the \u2018ac_cv_path_VARIABLE\u2019 variable.\n", "config"], "AC_PATH_PROGS": [" -- Macro: AC_PATH_PROGS (VARIABLE, PROGS-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_PROGS\u2019, but if any of PROGS-TO-CHECK-FOR are found,\n     set VARIABLE to the absolute name of the program found.  The result\n     of this test can be overridden by setting the VARIABLE variable.  A\n     positive result of this test is cached in the \u2018ac_cv_path_VARIABLE\u2019\n     variable.\n", "config"], "AC_PATH_PROGS_FEATURE_CHECK": [" -- Macro: AC_PATH_PROGS_FEATURE_CHECK (VARIABLE, PROGS-TO-CHECK-FOR,\n          FEATURE-TEST, [ACTION-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     This macro was introduced in Autoconf 2.62.  If VARIABLE is not\n     empty, then set the cache variable \u2018ac_cv_path_VARIABLE\u2019 to its\n     value.  Otherwise, check for each program in the blank-separated\n     list PROGS-TO-CHECK-FOR existing in PATH.  For each program found,\n     execute FEATURE-TEST with \u2018ac_path_VARIABLE\u2019 set to the absolute\n     name of the candidate program.  If no invocation of FEATURE-TEST\n     sets the shell variable \u2018ac_cv_path_VARIABLE\u2019, then\n     ACTION-IF-NOT-FOUND is executed.  FEATURE-TEST will be run even\n     when \u2018ac_cv_path_VARIABLE\u2019 is set, to provide the ability to choose\n     a better candidate found later in PATH; to accept the current\n     setting and bypass all further checks, FEATURE-TEST can execute\n     \u2018ac_path_VARIABLE_found=:\u2019.\n\n     Note that this macro has some subtle differences from\n     \u2018AC_CHECK_PROGS\u2019.  It is designed to be run inside \u2018AC_CACHE_VAL\u2019,\n     therefore, it should have no side effects.  In particular, VARIABLE\n     is not set to the final value of \u2018ac_cv_path_VARIABLE\u2019, nor is\n     \u2018AC_SUBST\u2019 automatically run.  Also, on failure, any action can be\n     performed, whereas \u2018AC_CHECK_PROGS\u2019 only performs\n     \u2018VARIABLE=VALUE-IF-NOT-FOUND\u2019.\n\n     Here is an example, similar to what Autoconf uses in its own\n     configure script.  It will search for an implementation of \u2018m4\u2019\n     that supports the \u2018indir\u2019 builtin, even if it goes by the name\n     \u2018gm4\u2019 or is not the first implementation on \u2018PATH\u2019.\n\n          AC_CACHE_CHECK([for m4 that supports indir], [ac_cv_path_M4],\n            [AC_PATH_PROGS_FEATURE_CHECK([M4], [m4 gm4],\n              [[m4out=`echo 'changequote([,])indir([divnum])' | $ac_path_M4`\n                test \"x$m4out\" = x0 \\\n                && ac_cv_path_M4=$ac_path_M4 ac_path_M4_found=:]],\n              [AC_MSG_ERROR([could not find m4 that supports indir])])])\n          AC_SUBST([M4], [$ac_cv_path_M4])\n", "config"], "AC_PATH_TARGET_TOOL": [" -- Macro: AC_PATH_TARGET_TOOL (VARIABLE, PROG-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_TARGET_TOOL\u2019, but set VARIABLE to the absolute name\n     of the program if it is found.\n", "config"], "AC_PATH_TOOL": [" -- Macro: AC_PATH_TOOL (VARIABLE, PROG-TO-CHECK-FOR,\n          [VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Like \u2018AC_CHECK_TOOL\u2019, but set VARIABLE to the absolute name of the\n     program if it is found.\n\n     When cross-compiling, this macro will issue a warning if no program\n     prefixed with the host type could be found.  For more information,\n     see *note Specifying Target Triplets::.\n\n\u001f", "config"], "AC_CHECK_FILE": [" -- Macro: AC_CHECK_FILE (FILE, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND])\n     Check whether file FILE exists on the native system.  If it is\n     found, execute ACTION-IF-FOUND, otherwise do ACTION-IF-NOT-FOUND,\n     if given.  Cache the result of this test in the \u2018ac_cv_file_FILE\u2019\n     variable, with characters not suitable for a variable name mapped\n     to underscores.\n", "config"], "AC_CHECK_FILES": [" -- Macro: AC_CHECK_FILES (FILES, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND])\n     For each file listed in FILES, execute \u2018AC_CHECK_FILE\u2019 and perform\n     either ACTION-IF-FOUND or ACTION-IF-NOT-FOUND.  Like\n     \u2018AC_CHECK_FILE\u2019, this defines \u2018HAVE_FILE\u2019 (*note Standard\n     Symbols::) for each file found and caches the results of each test\n     in the \u2018ac_cv_file_FILE\u2019 variable, with characters not suitable for\n     a variable name mapped to underscores.\n\n\u001f", "config"], "AC_CHECK_LIB": [" -- Macro: AC_CHECK_LIB (LIBRARY, FUNCTION, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [OTHER-LIBRARIES])\n     Test whether the library LIBRARY is available by trying to link a\n     test program that calls function FUNCTION with the library.\n     FUNCTION should be a function provided by the library.  Use the\n     base name of the library; e.g., to check for \u2018-lmp\u2019, use \u2018mp\u2019 as\n     the LIBRARY argument.\n\n     ACTION-IF-FOUND is a list of shell commands to run if the link with\n     the library succeeds; ACTION-IF-NOT-FOUND is a list of shell\n     commands to run if the link fails.  If ACTION-IF-FOUND is not\n     specified, the default action prepends \u2018-lLIBRARY\u2019 to \u2018LIBS\u2019 and\n     defines \u2018HAVE_LIBLIBRARY\u2019 (in all capitals).  This macro is\n     intended to support building \u2018LIBS\u2019 in a right-to-left\n     (least-dependent to most-dependent) fashion such that library\n     dependencies are satisfied as a natural side effect of consecutive\n     tests.  Linkers are sensitive to library ordering so the order in\n     which \u2018LIBS\u2019 is generated is important to reliable detection of\n     libraries.\n\n     If linking with LIBRARY results in unresolved symbols that would be\n     resolved by linking with additional libraries, give those libraries\n     as the OTHER-LIBRARIES argument, separated by spaces: e.g., \u2018-lXt\n     -lX11\u2019.  Otherwise, this macro may fail to detect that LIBRARY is\n     present, because linking the test program can fail with unresolved\n     symbols.  The OTHER-LIBRARIES argument should be limited to cases\n     where it is desirable to test for one library in the presence of\n     another that is not already in \u2018LIBS\u2019.\n\n     \u2018AC_CHECK_LIB\u2019 requires some care in usage, and should be avoided\n     in some common cases.  Many standard functions like \u2018gethostbyname\u2019\n     appear in the standard C library on some hosts, and in special\n     libraries like \u2018nsl\u2019 on other hosts.  On some hosts the special\n     libraries contain variant implementations that you may not want to\n     use.  These days it is normally better to use\n     \u2018AC_SEARCH_LIBS([gethostbyname], [nsl])\u2019 instead of\n     \u2018AC_CHECK_LIB([nsl], [gethostbyname])\u2019.\n\n     The result of this test is cached in the\n     \u2018ac_cv_lib_LIBRARY_FUNCTION\u2019 variable.\n", "config"], "AC_SEARCH_LIBS": [" -- Macro: AC_SEARCH_LIBS (FUNCTION, SEARCH-LIBS, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [OTHER-LIBRARIES])\n     Search for a library defining FUNCTION if it\u2019s not already\n     available.  This equates to calling\n     \u2018AC_LINK_IFELSE([AC_LANG_CALL([], [FUNCTION])])\u2019 first with no\n     libraries, then for each library listed in SEARCH-LIBS.\n\n     Prepend \u2018-lLIBRARY\u2019 to \u2018LIBS\u2019 for the first library found to\n     contain FUNCTION, and run ACTION-IF-FOUND.  If the function is not\n     found, run ACTION-IF-NOT-FOUND.\n\n     If linking with LIBRARY results in unresolved symbols that would be\n     resolved by linking with additional libraries, give those libraries\n     as the OTHER-LIBRARIES argument, separated by spaces: e.g., \u2018-lXt\n     -lX11\u2019.  Otherwise, this macro fails to detect that FUNCTION is\n     present, because linking the test program always fails with\n     unresolved symbols.\n\n     The result of this test is cached in the \u2018ac_cv_search_FUNCTION\u2019\n     variable as \u2018none required\u2019 if FUNCTION is already available, as\n     \u2018no\u2019 if no library containing FUNCTION was found, otherwise as the\n     \u2018-lLIBRARY\u2019 option that needs to be prepended to \u2018LIBS\u2019.\n\n\u001f", "config"], "AC_FUNC_ALLOCA": [" -- Macro: AC_FUNC_ALLOCA\n     Check for the \u2018alloca\u2019 function.  Define \u2018HAVE_ALLOCA_H\u2019 if\n     \u2018alloca.h\u2019 defines a working \u2018alloca\u2019.  If not, look for a builtin\n     alternative.  If either method succeeds, define \u2018HAVE_ALLOCA\u2019.\n     Otherwise, set the output variable \u2018ALLOCA\u2019 to\n     \u2018${LIBOBJDIR}alloca.o\u2019 and define \u2018C_ALLOCA\u2019 (so programs can\n     periodically call \u2018alloca (0)\u2019 to garbage collect).  This variable\n     is separate from \u2018LIBOBJS\u2019 so multiple programs can share the value\n     of \u2018ALLOCA\u2019 without needing to create an actual library, in case\n     only some of them use the code in \u2018LIBOBJS\u2019.  The \u2018${LIBOBJDIR}\u2019\n     prefix serves the same purpose as in \u2018LIBOBJS\u2019 (*note AC_LIBOBJ vs\n     LIBOBJS::).\n\n     Source files that use \u2018alloca\u2019 should start with a piece of code\n     like the following, to declare it properly.\n\n          #include <stdlib.h>\n          #include <stddef.h>\n          #ifdef HAVE_ALLOCA_H\n          # include <alloca.h>\n          #elif !defined alloca\n          # ifdef __GNUC__\n          #  define alloca __builtin_alloca\n          # elif defined _MSC_VER\n          #  include <malloc.h>\n          #  define alloca _alloca\n          # elif !defined HAVE_ALLOCA\n          #  ifdef  __cplusplus\n          extern \"C\"\n          #  endif\n          void *alloca (size_t);\n          # endif\n          #endif\n\n     If you don\u2019t want to maintain this piece of code in your package\n     manually, you can instead use the Gnulib module \u2018alloca-opt\u2019 or\n     \u2018alloca\u2019.  *Note Gnulib::.\n", "config"], "AC_FUNC_CHOWN": [" -- Macro: AC_FUNC_CHOWN\n     If the \u2018chown\u2019 function is available and works (in particular, it\n     should accept \u2018-1\u2019 for \u2018uid\u2019 and \u2018gid\u2019), define \u2018HAVE_CHOWN\u2019.  The\n     result of this macro is cached in the \u2018ac_cv_func_chown_works\u2019\n     variable.\n\n     If you want a workaround, that is, a \u2018chown\u2019 function that is\n     available and works, you can use the Gnulib module \u2018chown\u2019.  *Note\n     Gnulib::.\n", "config"], "AC_FUNC_CLOSEDIR_VOID": [" -- Macro: AC_FUNC_CLOSEDIR_VOID\n     If the \u2018closedir\u2019 function does not return a meaningful value,\n     define \u2018CLOSEDIR_VOID\u2019.  Otherwise, callers ought to check its\n     return value for an error indicator.\n\n     Currently this test is implemented by running a test program.  When\n     cross compiling the pessimistic assumption that \u2018closedir\u2019 does not\n     return a meaningful value is made.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_closedir_void\u2019 variable.\n\n     This macro is obsolescent, as \u2018closedir\u2019 returns a meaningful value\n     on current systems.  New programs need not use this macro.\n", "config"], "AC_FUNC_ERROR_AT_LINE": [" -- Macro: AC_FUNC_ERROR_AT_LINE\n     If the \u2018error_at_line\u2019 function is not found, require an\n     \u2018AC_LIBOBJ\u2019 replacement of \u2018error\u2019.\n\n     The result of this macro is cached in the \u2018ac_cv_lib_error_at_line\u2019\n     variable.\n\n     The \u2018AC_FUNC_ERROR_AT_LINE\u2019 macro is obsolescent.  New programs\n     should use Gnulib\u2019s \u2018error\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_FNMATCH": [" -- Macro: AC_FUNC_FNMATCH\n     If the \u2018fnmatch\u2019 function conforms to Posix, define \u2018HAVE_FNMATCH\u2019.\n     Detect common implementation bugs, for example, the bugs in Solaris\n     2.4.\n\n     Unlike the other specific \u2018AC_FUNC\u2019 macros, \u2018AC_FUNC_FNMATCH\u2019 does\n     not replace a broken/missing \u2018fnmatch\u2019.  This is for historical\n     reasons.  See \u2018AC_REPLACE_FNMATCH\u2019 below.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_fnmatch_works\u2019 variable.\n\n     This macro is obsolescent.  New programs should use Gnulib\u2019s\n     \u2018fnmatch-posix\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_FNMATCH_GNU": [" -- Macro: AC_FUNC_FNMATCH_GNU\n     Behave like \u2018AC_REPLACE_FNMATCH\u2019 (_replace_) but also test whether\n     \u2018fnmatch\u2019 supports GNU extensions.  Detect common implementation\n     bugs, for example, the bugs in the GNU C Library 2.1.\n\n     The result of this macro is cached in the \u2018ac_cv_func_fnmatch_gnu\u2019\n     variable.\n\n     This macro is obsolescent.  New programs should use Gnulib\u2019s\n     \u2018fnmatch-gnu\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_FORK": [" -- Macro: AC_FUNC_FORK\n     This macro checks for the \u2018fork\u2019 and \u2018vfork\u2019 functions.  If a\n     working \u2018fork\u2019 is found, define \u2018HAVE_WORKING_FORK\u2019.  This macro\n     checks whether \u2018fork\u2019 is just a stub by trying to run it.\n\n     If \u2018vfork.h\u2019 is found, define \u2018HAVE_VFORK_H\u2019.  If a working \u2018vfork\u2019\n     is found, define \u2018HAVE_WORKING_VFORK\u2019.  Otherwise, define \u2018vfork\u2019\n     to be \u2018fork\u2019 for backward compatibility with previous versions of\n     \u2018autoconf\u2019.  This macro checks for several known errors in\n     implementations of \u2018vfork\u2019 and considers the system to not have a\n     working \u2018vfork\u2019 if it detects any of them.\n\n     Since this macro defines \u2018vfork\u2019 only for backward compatibility\n     with previous versions of \u2018autoconf\u2019 you\u2019re encouraged to define it\n     yourself in new code:\n          #ifndef HAVE_WORKING_VFORK\n          # define vfork fork\n          #endif\n\n     The results of this macro are cached in the \u2018ac_cv_func_fork_works\u2019\n     and \u2018ac_cv_func_vfork_works\u2019 variables.  In order to override the\n     test, you also need to set the \u2018ac_cv_func_fork\u2019 and\n     \u2018ac_cv_func_vfork\u2019 variables.\n", "config"], "AC_FUNC_FSEEKO": [" -- Macro: AC_FUNC_FSEEKO\n     If the \u2018fseeko\u2019 function is available, define \u2018HAVE_FSEEKO\u2019.\n     Define \u2018_LARGEFILE_SOURCE\u2019 if necessary to make the prototype\n     visible on some systems (e.g., glibc 2.2).  Otherwise linkage\n     problems may occur when compiling with \u2018AC_SYS_LARGEFILE\u2019 on\n     largefile-sensitive systems where \u2018off_t\u2019 does not default to a\n     64bit entity.  All systems with \u2018fseeko\u2019 also supply \u2018ftello\u2019.\n\n     The Gnulib module \u2018fseeko\u2019 invokes \u2018AC_FUNC_FSEEKO\u2019 and also\n     contains workarounds for other portability problems of \u2018fseeko\u2019.\n     *Note Gnulib::.\n", "config"], "AC_FUNC_GETGROUPS": [" -- Macro: AC_FUNC_GETGROUPS\n     If the \u2018getgroups\u2019 function is available and works (unlike on\n     Ultrix 4.3 and NeXTstep 3.2, where \u2018getgroups (0, 0)\u2019 always\n     fails), define \u2018HAVE_GETGROUPS\u2019.  Set \u2018GETGROUPS_LIBS\u2019 to any\n     libraries needed to get that function.  This macro runs\n     \u2018AC_TYPE_GETGROUPS\u2019.\n\n     This macro is obsolescent.  New programs need not use this macro.\n     But they may want to use the Gnulib module \u2018getgroups\u2019, which\n     provides workarounds to other portability problems of this\n     function.\n", "config"], "AC_FUNC_GETLOADAVG": [" -- Macro: AC_FUNC_GETLOADAVG\n     Check how to get the system load averages.  To perform its tests\n     properly, this macro needs the file \u2018getloadavg.c\u2019; therefore, be\n     sure to set the \u2018AC_LIBOBJ\u2019 replacement directory properly (see\n     *note Generic Functions::, \u2018AC_CONFIG_LIBOBJ_DIR\u2019).\n\n     If the system has the \u2018getloadavg\u2019 function, define\n     \u2018HAVE_GETLOADAVG\u2019, and set \u2018GETLOADAVG_LIBS\u2019 to any libraries\n     necessary to get that function.  Also add \u2018GETLOADAVG_LIBS\u2019 to\n     \u2018LIBS\u2019.  Otherwise, require an \u2018AC_LIBOBJ\u2019 replacement for\n     \u2018getloadavg\u2019 and possibly define several other C preprocessor\n     macros and output variables:\n\n       1. Define \u2018C_GETLOADAVG\u2019.\n\n       2. Define \u2018SVR4\u2019, \u2018DGUX\u2019, \u2018UMAX\u2019, or \u2018UMAX4_3\u2019 if on those\n          systems.\n\n       3. If \u2018nlist.h\u2019 is found, define \u2018HAVE_NLIST_H\u2019.\n\n       4. If \u2018struct nlist\u2019 has an \u2018n_un.n_name\u2019 member, define\n          \u2018HAVE_STRUCT_NLIST_N_UN_N_NAME\u2019.  The obsolete symbol\n          \u2018NLIST_NAME_UNION\u2019 is still defined, but do not depend upon\n          it.\n\n       5. Programs may need to be installed set-group-ID (or\n          set-user-ID) for \u2018getloadavg\u2019 to work.  In this case, define\n          \u2018GETLOADAVG_PRIVILEGED\u2019, set the output variable \u2018NEED_SETGID\u2019\n          to \u2018true\u2019 (and otherwise to \u2018false\u2019), and set \u2018KMEM_GROUP\u2019 to\n          the name of the group that should own the installed program.\n\n     The \u2018AC_FUNC_GETLOADAVG\u2019 macro is obsolescent.  New programs should\n     use Gnulib\u2019s \u2018getloadavg\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_GETMNTENT": [" -- Macro: AC_FUNC_GETMNTENT\n     Check for \u2018getmntent\u2019 in the standard C library, and then in the\n     \u2018sun\u2019, \u2018seq\u2019, and \u2018gen\u2019 libraries, for UNICOS, IRIX 4, PTX, and\n     UnixWare, respectively.  Then, if \u2018getmntent\u2019 is available, define\n     \u2018HAVE_GETMNTENT\u2019 and set \u2018ac_cv_func_getmntent\u2019 to \u2018yes\u2019.\n     Otherwise set \u2018ac_cv_func_getmntent\u2019 to \u2018no\u2019.\n\n     The result of this macro can be overridden by setting the cache\n     variable \u2018ac_cv_search_getmntent\u2019.\n\n     The \u2018AC_FUNC_GETMNTENT\u2019 macro is obsolescent.  New programs should\n     use Gnulib\u2019s \u2018mountlist\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_GETPGRP": [" -- Macro: AC_FUNC_GETPGRP\n     Define \u2018GETPGRP_VOID\u2019 if it is an error to pass 0 to \u2018getpgrp\u2019;\n     this is the Posix behavior.  On older BSD systems, you must pass 0\n     to \u2018getpgrp\u2019, as it takes an argument and behaves like Posix\u2019s\n     \u2018getpgid\u2019.\n\n          #ifdef GETPGRP_VOID\n            pid = getpgrp ();\n          #else\n            pid = getpgrp (0);\n          #endif\n\n     This macro does not check whether \u2018getpgrp\u2019 exists at all; if you\n     need to work in that situation, first call \u2018AC_CHECK_FUNC\u2019 for\n     \u2018getpgrp\u2019.\n\n     The result of this macro is cached in the \u2018ac_cv_func_getpgrp_void\u2019\n     variable.\n\n     This macro is obsolescent, as current systems have a \u2018getpgrp\u2019\n     whose signature conforms to Posix.  New programs need not use this\n     macro.\n", "config"], "AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK": [" -- Macro: AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK\n     If \u2018link\u2019 is a symbolic link, then \u2018lstat\u2019 should treat \u2018link/\u2019 the\n     same as \u2018link/.\u2019.  However, many older \u2018lstat\u2019 implementations\n     incorrectly ignore trailing slashes.\n\n     It is safe to assume that if \u2018lstat\u2019 incorrectly ignores trailing\n     slashes, then other symbolic-link-aware functions like \u2018unlink\u2019\n     also incorrectly ignore trailing slashes.\n\n     If \u2018lstat\u2019 behaves properly, define\n     \u2018LSTAT_FOLLOWS_SLASHED_SYMLINK\u2019, otherwise require an \u2018AC_LIBOBJ\u2019\n     replacement of \u2018lstat\u2019.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_lstat_dereferences_slashed_symlink\u2019 variable.\n\n     The \u2018AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK\u2019 macro is obsolescent.\n     New programs should use Gnulib\u2019s \u2018lstat\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_MALLOC": [" -- Macro: AC_FUNC_MALLOC\n     If the \u2018malloc\u2019 function is compatible with the GNU C library\n     \u2018malloc\u2019 (i.e., \u2018malloc (0)\u2019 returns a valid pointer), define\n     \u2018HAVE_MALLOC\u2019 to 1.  Otherwise define \u2018HAVE_MALLOC\u2019 to 0, ask for\n     an \u2018AC_LIBOBJ\u2019 replacement for \u2018malloc\u2019, and define \u2018malloc\u2019 to\n     \u2018rpl_malloc\u2019 so that the native \u2018malloc\u2019 is not used in the main\n     project.\n\n     Typically, the replacement file \u2018malloc.c\u2019 should look like (note\n     the \u2018#undef malloc\u2019):\n\n     #include <config.h>\n     #undef malloc\n     \n     #include <sys/types.h>\n     \n     void *malloc ();\n     \n     /* Allocate an N-byte block of memory from the heap.\n        If N is zero, allocate a 1-byte block.  */\n     \n     void *\n     rpl_malloc (size_t n)\n     {\n       if (n == 0)\n         n = 1;\n       return malloc (n);\n     }\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_malloc_0_nonnull\u2019 variable.\n\n     If you don\u2019t want to maintain a \u2018malloc.c\u2019 file in your package\n     manually, you can instead use the Gnulib module \u2018malloc-gnu\u2019.\n", "config"], "AC_FUNC_MBRTOWC": [" -- Macro: AC_FUNC_MBRTOWC\n     Define \u2018HAVE_MBRTOWC\u2019 to 1 if the function \u2018mbrtowc\u2019 and the type\n     \u2018mbstate_t\u2019 are properly declared.\n\n     The result of this macro is cached in the \u2018ac_cv_func_mbrtowc\u2019\n     variable.\n\n     The Gnulib module \u2018mbrtowc\u2019 not only ensures that the function is\n     declared, but also works around other portability problems of this\n     function.\n", "config"], "AC_FUNC_MEMCMP": [" -- Macro: AC_FUNC_MEMCMP\n     If the \u2018memcmp\u2019 function is not available, or does not work on\n     8-bit data (like the one on SunOS 4.1.3), or fails when comparing\n     16 bytes or more and with at least one buffer not starting on a\n     4-byte boundary (such as the one on NeXT x86 OpenStep), require an\n     \u2018AC_LIBOBJ\u2019 replacement for \u2018memcmp\u2019.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_memcmp_working\u2019 variable.\n\n     This macro is obsolescent, as current systems have a working\n     \u2018memcmp\u2019.  New programs need not use this macro.\n", "config"], "AC_FUNC_MKTIME": [" -- Macro: AC_FUNC_MKTIME\n     If the \u2018mktime\u2019 function is not available, or does not work\n     correctly, require an \u2018AC_LIBOBJ\u2019 replacement for \u2018mktime\u2019.  For\n     the purposes of this test, \u2018mktime\u2019 should conform to the Posix\n     standard and should be the inverse of \u2018localtime\u2019.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_working_mktime\u2019 variable.\n\n     The \u2018AC_FUNC_MKTIME\u2019 macro is obsolescent.  New programs should use\n     Gnulib\u2019s \u2018mktime\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_MMAP": [" -- Macro: AC_FUNC_MMAP\n     If the \u2018mmap\u2019 function exists and works correctly, define\n     \u2018HAVE_MMAP\u2019.  This checks only private fixed mapping of\n     already-mapped memory.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_mmap_fixed_mapped\u2019 variable.\n\n     Note: This macro asks for more than what an average program needs\n     from \u2018mmap\u2019.  In particular, the use of \u2018MAP_FIXED\u2019 fails on HP-UX\n     11, whereas \u2018mmap\u2019 otherwise works fine on this platform.\n", "config"], "AC_FUNC_OBSTACK": [" -- Macro: AC_FUNC_OBSTACK\n     If the obstacks are found, define \u2018HAVE_OBSTACK\u2019, else require an\n     \u2018AC_LIBOBJ\u2019 replacement for \u2018obstack\u2019.\n\n     The result of this macro is cached in the \u2018ac_cv_func_obstack\u2019\n     variable.\n\n     The \u2018AC_FUNC_OBSTACK\u2019 macro is obsolescent.  New programs should\n     use Gnulib\u2019s \u2018obstack\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_REALLOC": [" -- Macro: AC_FUNC_REALLOC\n     If the \u2018realloc\u2019 function is compatible with the GNU C library\n     \u2018realloc\u2019 (i.e., \u2018realloc (NULL, 0)\u2019 returns a valid pointer),\n     define \u2018HAVE_REALLOC\u2019 to 1.  Otherwise define \u2018HAVE_REALLOC\u2019 to 0,\n     ask for an \u2018AC_LIBOBJ\u2019 replacement for \u2018realloc\u2019, and define\n     \u2018realloc\u2019 to \u2018rpl_realloc\u2019 so that the native \u2018realloc\u2019 is not used\n     in the main project.  See \u2018AC_FUNC_MALLOC\u2019 for details.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_realloc_0_nonnull\u2019 variable.\n\n     If you don\u2019t want to maintain a \u2018realloc.c\u2019 file in your package\n     manually, you can instead use the Gnulib module \u2018realloc-gnu\u2019.\n", "config"], "AC_FUNC_SELECT_ARGTYPES": [" -- Macro: AC_FUNC_SELECT_ARGTYPES\n     Determines the correct type to be passed for each of the \u2018select\u2019\n     function\u2019s arguments, and defines those types in\n     \u2018SELECT_TYPE_ARG1\u2019, \u2018SELECT_TYPE_ARG234\u2019, and \u2018SELECT_TYPE_ARG5\u2019\n     respectively.  \u2018SELECT_TYPE_ARG1\u2019 defaults to \u2018int\u2019,\n     \u2018SELECT_TYPE_ARG234\u2019 defaults to \u2018int *\u2019, and \u2018SELECT_TYPE_ARG5\u2019\n     defaults to \u2018struct timeval *\u2019.\n\n     This macro is obsolescent, as current systems have a \u2018select\u2019 whose\n     signature conforms to Posix.  New programs need not use this macro.\n", "config"], "AC_FUNC_SETPGRP": [" -- Macro: AC_FUNC_SETPGRP\n     If \u2018setpgrp\u2019 takes no argument (the Posix version), define\n     \u2018SETPGRP_VOID\u2019.  Otherwise, it is the BSD version, which takes two\n     process IDs as arguments.  This macro does not check whether\n     \u2018setpgrp\u2019 exists at all; if you need to work in that situation,\n     first call \u2018AC_CHECK_FUNC\u2019 for \u2018setpgrp\u2019.  This macro also does not\n     check for the Solaris variant of \u2018setpgrp\u2019, which returns a \u2018pid_t\u2019\n     instead of an \u2018int\u2019; portable code should only use the return value\n     by comparing it against \u2018-1\u2019 to check for errors.\n\n     The result of this macro is cached in the \u2018ac_cv_func_setpgrp_void\u2019\n     variable.\n\n     This macro is obsolescent, as all forms of \u2018setpgrp\u2019 are also\n     obsolescent.  New programs should use the Posix function \u2018setpgid\u2019,\n     which takes two process IDs as arguments (like the BSD \u2018setpgrp\u2019).\n", "config"], "AC_FUNC_STAT": [" -- Macro: AC_FUNC_STAT\n -- Macro: AC_FUNC_LSTAT\n     Determine whether \u2018stat\u2019 or \u2018lstat\u2019 have the bug that it succeeds\n     when given the zero-length file name as argument.  The \u2018stat\u2019 and\n     \u2018lstat\u2019 from SunOS 4.1.4 and the Hurd (as of 1998-11-01) do this.\n\n     If it does, then define \u2018HAVE_STAT_EMPTY_STRING_BUG\u2019 (or\n     \u2018HAVE_LSTAT_EMPTY_STRING_BUG\u2019) and ask for an \u2018AC_LIBOBJ\u2019\n     replacement of it.\n\n     The results of these macros are cached in the\n     \u2018ac_cv_func_stat_empty_string_bug\u2019 and the\n     \u2018ac_cv_func_lstat_empty_string_bug\u2019 variables, respectively.\n\n     These macros are obsolescent, as no current systems have the bug.\n     New programs need not use these macros.\n", "config"], "AC_FUNC_LSTAT": [" -- Macro: AC_FUNC_STAT\n -- Macro: AC_FUNC_LSTAT\n     Determine whether \u2018stat\u2019 or \u2018lstat\u2019 have the bug that it succeeds\n     when given the zero-length file name as argument.  The \u2018stat\u2019 and\n     \u2018lstat\u2019 from SunOS 4.1.4 and the Hurd (as of 1998-11-01) do this.\n\n     If it does, then define \u2018HAVE_STAT_EMPTY_STRING_BUG\u2019 (or\n     \u2018HAVE_LSTAT_EMPTY_STRING_BUG\u2019) and ask for an \u2018AC_LIBOBJ\u2019\n     replacement of it.\n\n     The results of these macros are cached in the\n     \u2018ac_cv_func_stat_empty_string_bug\u2019 and the\n     \u2018ac_cv_func_lstat_empty_string_bug\u2019 variables, respectively.\n\n     These macros are obsolescent, as no current systems have the bug.\n     New programs need not use these macros.\n", "config"], "AC_FUNC_STRCOLL": [" -- Macro: AC_FUNC_STRCOLL\n     If the \u2018strcoll\u2019 function exists and works correctly, define\n     \u2018HAVE_STRCOLL\u2019.  This does a bit more than\n     \u2018AC_CHECK_FUNCS(strcoll)\u2019, because some systems have incorrect\n     definitions of \u2018strcoll\u2019 that should not be used.  But it does not\n     check against a known bug of this function on Solaris 10.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_strcoll_works\u2019 variable.\n", "config"], "AC_FUNC_STRERROR_R": [" -- Macro: AC_FUNC_STRERROR_R\n     If \u2018strerror_r\u2019 is available, define \u2018HAVE_STRERROR_R\u2019, and if it\n     is declared, define \u2018HAVE_DECL_STRERROR_R\u2019.  If it returns a \u2018char\n     *\u2019 message, define \u2018STRERROR_R_CHAR_P\u2019; otherwise it returns an\n     \u2018int\u2019 error number.  The Thread-Safe Functions option of Posix\n     requires \u2018strerror_r\u2019 to return \u2018int\u2019, but many systems (including,\n     for example, version 2.2.4 of the GNU C Library) return a \u2018char *\u2019\n     value that is not necessarily equal to the buffer argument.\n\n     The result of this macro is cached in the\n     \u2018ac_cv_func_strerror_r_char_p\u2019 variable.\n\n     The Gnulib module \u2018strerror_r\u2019 not only ensures that the function\n     has the return type specified by Posix, but also works around other\n     portability problems of this function.\n", "config"], "AC_FUNC_STRFTIME": [" -- Macro: AC_FUNC_STRFTIME\n     Check for \u2018strftime\u2019 in the \u2018intl\u2019 library, for SCO Unix.  Then, if\n     \u2018strftime\u2019 is available, define \u2018HAVE_STRFTIME\u2019.\n\n     This macro is obsolescent, as no current systems require the \u2018intl\u2019\n     library for \u2018strftime\u2019.  New programs need not use this macro.\n", "config"], "AC_FUNC_STRTOD": [" -- Macro: AC_FUNC_STRTOD\n     If the \u2018strtod\u2019 function does not exist or doesn\u2019t work correctly,\n     ask for an \u2018AC_LIBOBJ\u2019 replacement of \u2018strtod\u2019.  In this case,\n     because \u2018strtod.c\u2019 is likely to need \u2018pow\u2019, set the output variable\n     \u2018POW_LIB\u2019 to the extra library needed.\n\n     This macro caches its result in the \u2018ac_cv_func_strtod\u2019 variable\n     and depends upon the result in the \u2018ac_cv_func_pow\u2019 variable.\n\n     The \u2018AC_FUNC_STRTOD\u2019 macro is obsolescent.  New programs should use\n     Gnulib\u2019s \u2018strtod\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_STRTOLD": [" -- Macro: AC_FUNC_STRTOLD\n     If the \u2018strtold\u2019 function exists and conforms to C99 or later,\n     define \u2018HAVE_STRTOLD\u2019.\n\n     This macro caches its result in the \u2018ac_cv_func_strtold\u2019 variable.\n\n     The Gnulib module \u2018strtold\u2019 not only ensures that the function\n     exists, but also works around other portability problems of this\n     function.\n", "config"], "AC_FUNC_STRNLEN": [" -- Macro: AC_FUNC_STRNLEN\n     If the \u2018strnlen\u2019 function is not available, or is buggy (like the\n     one from AIX 4.3), require an \u2018AC_LIBOBJ\u2019 replacement for it.\n\n     This macro caches its result in the \u2018ac_cv_func_strnlen_working\u2019\n     variable.\n\n     The \u2018AC_FUNC_STRNLEN\u2019 macro is obsolescent.  New programs should\n     use Gnulib\u2019s \u2018strnlen\u2019 module.  *Note Gnulib::.\n", "config"], "AC_FUNC_UTIME_NULL": [" -- Macro: AC_FUNC_UTIME_NULL\n     If \u2018utime (FILE, NULL)\u2019 sets FILE\u2019s timestamp to the present,\n     define \u2018HAVE_UTIME_NULL\u2019.\n\n     This macro caches its result in the \u2018ac_cv_func_utime_null\u2019\n     variable.\n\n     This macro is obsolescent, as all current systems have a \u2018utime\u2019\n     that behaves this way.  New programs need not use this macro.\n", "config"], "AC_FUNC_VPRINTF": [" -- Macro: AC_FUNC_VPRINTF\n     If \u2018vprintf\u2019 is found, define \u2018HAVE_VPRINTF\u2019.  Otherwise, if\n     \u2018_doprnt\u2019 is found, define \u2018HAVE_DOPRNT\u2019.  (If \u2018vprintf\u2019 is\n     available, you may assume that \u2018vfprintf\u2019 and \u2018vsprintf\u2019 are also\n     available.)\n\n     This macro is obsolescent, as all current systems have \u2018vprintf\u2019.\n     New programs need not use this macro.\n", "config"], "AC_REPLACE_FNMATCH": [" -- Macro: AC_REPLACE_FNMATCH\n     If the \u2018fnmatch\u2019 function does not conform to Posix (see\n     \u2018AC_FUNC_FNMATCH\u2019), ask for its \u2018AC_LIBOBJ\u2019 replacement.\n\n     The files \u2018fnmatch.c\u2019, \u2018fnmatch_loop.c\u2019, and \u2018fnmatch_.h\u2019 in the\n     \u2018AC_LIBOBJ\u2019 replacement directory are assumed to contain a copy of\n     the source code of GNU \u2018fnmatch\u2019.  If necessary, this source code\n     is compiled as an \u2018AC_LIBOBJ\u2019 replacement, and the \u2018fnmatch_.h\u2019\n     file is linked to \u2018fnmatch.h\u2019 so that it can be included in place\n     of the system \u2018<fnmatch.h>\u2019.\n\n     This macro caches its result in the \u2018ac_cv_func_fnmatch_works\u2019\n     variable.\n\n     This macro is obsolescent, as it assumes the use of particular\n     source files.  New programs should use Gnulib\u2019s \u2018fnmatch-posix\u2019\n     module, which provides this macro along with the source files.\n     *Note Gnulib::.\n\n\u001f", "config"], "AC_CHECK_FUNC": [" -- Macro: AC_CHECK_FUNC (FUNCTION, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND])\n     If C function FUNCTION is available, run shell commands\n     ACTION-IF-FOUND, otherwise ACTION-IF-NOT-FOUND.  If you just want\n     to define a symbol if the function is available, consider using\n     \u2018AC_CHECK_FUNCS\u2019 instead.  This macro checks for functions with C\n     linkage even when \u2018AC_LANG(C++)\u2019 has been called, since C is more\n     standardized than C++.  (*note Language Choice::, for more\n     information about selecting the language for checks.)\n\n     This macro caches its result in the \u2018ac_cv_func_FUNCTION\u2019 variable.\n", "config"], "AC_CHECK_FUNCS": [" -- Macro: AC_CHECK_FUNCS (FUNCTION..., [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND])\n     For each FUNCTION enumerated in the blank-or-newline-separated\n     argument list, define \u2018HAVE_FUNCTION\u2019 (in all capitals) if it is\n     available.  If ACTION-IF-FOUND is given, it is additional shell\n     code to execute when one of the functions is found.  You can give\n     it a value of \u2018break\u2019 to break out of the loop on the first match.\n     If ACTION-IF-NOT-FOUND is given, it is executed when one of the\n     functions is not found.\n\n     Results are cached for each FUNCTION as in \u2018AC_CHECK_FUNC\u2019.\n", "config"], "AC_CHECK_FUNCS_ONCE": [" -- Macro: AC_CHECK_FUNCS_ONCE (FUNCTION...)\n     For each FUNCTION enumerated in the blank-or-newline-separated\n     argument list, define \u2018HAVE_FUNCTION\u2019 (in all capitals) if it is\n     available.  This is a once-only variant of \u2018AC_CHECK_FUNCS\u2019.  It\n     generates the checking code at most once, so that \u2018configure\u2019 is\n     smaller and faster; but the checks cannot be conditionalized and\n     are always done once, early during the \u2018configure\u2019 run.\n\n", "config"], "AC_LIBOBJ": ["\u2018AC_LIBOBJ\u2019\n\u2018AC_LIBSOURCE\u2019\n\u2018AC_LIBSOURCES\u2019\n     Automake will automatically distribute any file listed in\n     \u2018AC_LIBSOURCE\u2019 or \u2018AC_LIBSOURCES\u2019.\n\n     Note that the \u2018AC_LIBOBJ\u2019 macro calls \u2018AC_LIBSOURCE\u2019.  So if an\n     Autoconf macro is documented to call \u2018AC_LIBOBJ([file])\u2019, then\n     \u2018file.c\u2019 will be distributed automatically by Automake.  This\n     encompasses many macros like \u2018AC_FUNC_ALLOCA\u2019, \u2018AC_FUNC_MEMCMP\u2019,\n     \u2018AC_REPLACE_FUNCS\u2019, and others.\n\n     By the way, direct assignments to \u2018LIBOBJS\u2019 are no longer\n     supported.  You should always use \u2018AC_LIBOBJ\u2019 for this purpose.\n     *Note \u2018AC_LIBOBJ\u2019 vs. \u2018LIBOBJS\u2019: (autoconf)AC_LIBOBJ vs LIBOBJS.\n", "config"], "AC_LIBSOURCE": ["\u2018AC_LIBOBJ\u2019\n\u2018AC_LIBSOURCE\u2019\n\u2018AC_LIBSOURCES\u2019\n     Automake will automatically distribute any file listed in\n     \u2018AC_LIBSOURCE\u2019 or \u2018AC_LIBSOURCES\u2019.\n\n     Note that the \u2018AC_LIBOBJ\u2019 macro calls \u2018AC_LIBSOURCE\u2019.  So if an\n     Autoconf macro is documented to call \u2018AC_LIBOBJ([file])\u2019, then\n     \u2018file.c\u2019 will be distributed automatically by Automake.  This\n     encompasses many macros like \u2018AC_FUNC_ALLOCA\u2019, \u2018AC_FUNC_MEMCMP\u2019,\n     \u2018AC_REPLACE_FUNCS\u2019, and others.\n\n     By the way, direct assignments to \u2018LIBOBJS\u2019 are no longer\n     supported.  You should always use \u2018AC_LIBOBJ\u2019 for this purpose.\n     *Note \u2018AC_LIBOBJ\u2019 vs. \u2018LIBOBJS\u2019: (autoconf)AC_LIBOBJ vs LIBOBJS.\n", "config"], "AC_LIBSOURCES": ["\u2018AC_LIBOBJ\u2019\n\u2018AC_LIBSOURCE\u2019\n\u2018AC_LIBSOURCES\u2019\n     Automake will automatically distribute any file listed in\n     \u2018AC_LIBSOURCE\u2019 or \u2018AC_LIBSOURCES\u2019.\n\n     Note that the \u2018AC_LIBOBJ\u2019 macro calls \u2018AC_LIBSOURCE\u2019.  So if an\n     Autoconf macro is documented to call \u2018AC_LIBOBJ([file])\u2019, then\n     \u2018file.c\u2019 will be distributed automatically by Automake.  This\n     encompasses many macros like \u2018AC_FUNC_ALLOCA\u2019, \u2018AC_FUNC_MEMCMP\u2019,\n     \u2018AC_REPLACE_FUNCS\u2019, and others.\n\n     By the way, direct assignments to \u2018LIBOBJS\u2019 are no longer\n     supported.  You should always use \u2018AC_LIBOBJ\u2019 for this purpose.\n     *Note \u2018AC_LIBOBJ\u2019 vs. \u2018LIBOBJS\u2019: (autoconf)AC_LIBOBJ vs LIBOBJS.\n", "config"], "AC_CONFIG_LIBOBJ_DIR": ["\u2018AC_CONFIG_LIBOBJ_DIR\u2019\n     Automake will require the sources file declared with \u2018AC_LIBSOURCE\u2019\n     (see below) in the directory specified by this macro.\n", "config"], "AC_REPLACE_FUNCS": [" -- Macro: AC_REPLACE_FUNCS (FUNCTION...)\n     Like \u2018AC_CHECK_FUNCS\u2019, but uses \u2018AC_LIBOBJ(FUNCTION)\u2019 as\n     ACTION-IF-NOT-FOUND.  You can declare your replacement function by\n     enclosing the prototype in \u2018#ifndef HAVE_FUNCTION\u2019.  If the system\n     has the function, it probably declares it in a header file you\n     should be including, so you shouldn\u2019t redeclare it lest your\n     declaration conflict.\n\n\u001f", "config"], "AC_CHECK_HEADER_STDBOOL": [" -- Macro: AC_CHECK_HEADER_STDBOOL\n     Check whether \u2018stdbool.h\u2019 exists and conforms to C99 or later, and\n     cache the result in the \u2018ac_cv_header_stdbool_h\u2019 variable.  If the\n     type \u2018_Bool\u2019 is defined, define \u2018HAVE__BOOL\u2019 to 1.\n\n     This macro is intended for use by Gnulib (*note Gnulib::) and other\n     packages that supply a substitute \u2018stdbool.h\u2019 on platforms lacking\n     a conforming one.  The \u2018AC_HEADER_STDBOOL\u2019 macro is better for code\n     that explicitly checks for \u2018stdbool.h\u2019.\n", "config"], "AC_HEADER_ASSERT": [" -- Macro: AC_HEADER_ASSERT\n     Check whether to enable assertions in the style of \u2018assert.h\u2019.\n     Assertions are enabled by default, but the user can override this\n     by invoking \u2018configure\u2019 with the \u2018--disable-assert\u2019 option.\n", "config"], "AC_HEADER_DIRENT": [" -- Macro: AC_HEADER_DIRENT\n     Check for the following header files.  For the first one that is\n     found and defines \u2018DIR\u2019, define the listed C preprocessor macro:\n\n     \u2018dirent.h\u2019     \u2018HAVE_DIRENT_H\u2019\n     \u2018sys/ndir.h\u2019   \u2018HAVE_SYS_NDIR_H\u2019\n     \u2018sys/dir.h\u2019    \u2018HAVE_SYS_DIR_H\u2019\n     \u2018ndir.h\u2019       \u2018HAVE_NDIR_H\u2019\n\n     The directory-library declarations in your source code should look\n     something like the following:\n\n          #include <sys/types.h>\n          #ifdef HAVE_DIRENT_H\n          # include <dirent.h>\n          # define NAMLEN(dirent) strlen ((dirent)->d_name)\n          #else\n          # define dirent direct\n          # define NAMLEN(dirent) ((dirent)->d_namlen)\n          # ifdef HAVE_SYS_NDIR_H\n          #  include <sys/ndir.h>\n          # endif\n          # ifdef HAVE_SYS_DIR_H\n          #  include <sys/dir.h>\n          # endif\n          # ifdef HAVE_NDIR_H\n          #  include <ndir.h>\n          # endif\n          #endif\n\n     Using the above declarations, the program would declare variables\n     to be of type \u2018struct dirent\u2019, not \u2018struct direct\u2019, and would\n     access the length of a directory entry name by passing a pointer to\n     a \u2018struct dirent\u2019 to the \u2018NAMLEN\u2019 macro.\n\n     This macro also checks for the SCO Xenix \u2018dir\u2019 and \u2018x\u2019 libraries.\n\n     This macro is obsolescent, as all current systems with directory\n     libraries have \u2018<dirent.h>\u2019.  New programs need not use this macro.\n\n     Also see \u2018AC_STRUCT_DIRENT_D_INO\u2019 and \u2018AC_STRUCT_DIRENT_D_TYPE\u2019\n     (*note Particular Structures::).\n", "config"], "AC_HEADER_MAJOR": [" -- Macro: AC_HEADER_MAJOR\n     Detect the headers required to use \u2018makedev\u2019, \u2018major\u2019, and \u2018minor\u2019.\n     These functions may be defined by \u2018sys/mkdev.h\u2019, \u2018sys/sysmacros.h\u2019,\n     or \u2018sys/types.h\u2019.\n\n     \u2018AC_HEADER_MAJOR\u2019 defines \u2018MAJOR_IN_MKDEV\u2019 if they are in\n     \u2018sys/mkdev.h\u2019, or \u2018MAJOR_IN_SYSMACROS\u2019 if they are in\n     \u2018sys/sysmacros.h\u2019.  If neither macro is defined, they are either in\n     \u2018sys/types.h\u2019 or unavailable.\n\n     To properly use these functions, your code should contain something\n     like:\n\n     #include <sys/types.h>\n     #ifdef MAJOR_IN_MKDEV\n     # include <sys/mkdev.h>\n     #elif defined MAJOR_IN_SYSMACROS\n     # include <sys/sysmacros.h>\n     #endif\n\n     Note: Configure scripts built with Autoconf 2.69 or earlier will\n     not detect a problem if \u2018sys/types.h\u2019 contains definitions of\n     \u2018major\u2019, \u2018minor\u2019, and/or \u2018makedev\u2019 that trigger compiler warnings\n     upon use.  This is known to occur with GNU libc 2.25, where those\n     definitions are being deprecated to reduce namespace pollution.  If\n     it is not practical to use Autoconf 2.70 to regenerate the\n     configure script of affected software, you can work around the\n     problem by setting \u2018ac_cv_header_sys_types_h_makedev=no\u2019, as an\n     argument to \u2018configure\u2019 or as part of a \u2018config.site\u2019 site default\n     file (*note Site Defaults::).\n", "config"], "AC_HEADER_RESOLV": [" -- Macro: AC_HEADER_RESOLV\n     Checks for header \u2018resolv.h\u2019, checking for prerequisites first.  To\n     properly use \u2018resolv.h\u2019, your code should contain something like\n     the following:\n\n     #ifdef HAVE_SYS_TYPES_H\n     #  include <sys/types.h>\n     #endif\n     #ifdef HAVE_NETINET_IN_H\n     #  include <netinet/in.h>   /* inet_ functions / structs */\n     #endif\n     #ifdef HAVE_ARPA_NAMESER_H\n     #  include <arpa/nameser.h> /* DNS HEADER struct */\n     #endif\n     #ifdef HAVE_NETDB_H\n     #  include <netdb.h>\n     #endif\n     #include <resolv.h>\n", "config"], "AC_HEADER_STAT": [" -- Macro: AC_HEADER_STAT\n     If the macros \u2018S_ISDIR\u2019, \u2018S_ISREG\u2019, etc. defined in \u2018sys/stat.h\u2019 do\n     not work properly (returning false positives), define\n     \u2018STAT_MACROS_BROKEN\u2019.  This is the case on Tektronix UTekV, Amdahl\n     UTS and Motorola System V/88.\n\n     This macro is obsolescent, as no current systems have the bug.  New\n     programs need not use this macro.\n", "config"], "AC_HEADER_STDBOOL": [" -- Macro: AC_HEADER_STDBOOL\n     If \u2018stdbool.h\u2019 exists and conforms to C99 or later, define\n     \u2018HAVE_STDBOOL_H\u2019 to 1; if the type \u2018_Bool\u2019 is defined, define\n     \u2018HAVE__BOOL\u2019 to 1.  To fulfill the standard\u2019s requirements, your\n     program could contain the following code:\n\n          #ifdef HAVE_STDBOOL_H\n          # include <stdbool.h>\n          #else\n          # ifndef HAVE__BOOL\n          #  ifdef __cplusplus\n          typedef bool _Bool;\n          #  else\n          #   define _Bool signed char\n          #  endif\n          # endif\n          # define bool _Bool\n          # define false 0\n          # define true 1\n          # define __bool_true_false_are_defined 1\n          #endif\n\n     Alternatively you can use the \u2018stdbool\u2019 package of Gnulib (*note\n     Gnulib::).  It simplifies your code so that it can say just\n     \u2018#include <stdbool.h>\u2019, and it adds support for less-common\n     platforms.\n\n     This macro caches its result in the \u2018ac_cv_header_stdbool_h\u2019\n     variable.\n\n     This macro differs from \u2018AC_CHECK_HEADER_STDBOOL\u2019 only in that it\n     defines \u2018HAVE_STDBOOL_H\u2019 whereas \u2018AC_CHECK_HEADER_STDBOOL\u2019 does\n     not.\n", "config"], "AC_HEADER_STDC": [" -- Macro: AC_HEADER_STDC\n\n     This macro is obsolescent.  Its sole effect is to make sure that\n     all the headers that are included by \u2018AC_INCLUDES_DEFAULT\u2019 (*note\n     Default Includes::), but not part of ISO C90, have been checked\n     for.\n\n     All hosted environments that are still of interest for portable\n     code provide all of the headers specified in ISO C90 (as amended in\n     1995).\n", "config"], "AC_HEADER_SYS_WAIT": [" -- Macro: AC_HEADER_SYS_WAIT\n     If \u2018sys/wait.h\u2019 exists and is compatible with Posix, define\n     \u2018HAVE_SYS_WAIT_H\u2019.  Incompatibility can occur if \u2018sys/wait.h\u2019 does\n     not exist, or if it uses the old BSD \u2018union wait\u2019 instead of \u2018int\u2019\n     to store a status value.  If \u2018sys/wait.h\u2019 is not Posix compatible,\n     then instead of including it, define the Posix macros with their\n     usual interpretations.  Here is an example:\n\n          #include <sys/types.h>\n          #ifdef HAVE_SYS_WAIT_H\n          # include <sys/wait.h>\n          #endif\n          #ifndef WEXITSTATUS\n          # define WEXITSTATUS(stat_val) ((unsigned int) (stat_val) >> 8)\n          #endif\n          #ifndef WIFEXITED\n          # define WIFEXITED(stat_val) (((stat_val) & 255) == 0)\n          #endif\n\n     This macro caches its result in the \u2018ac_cv_header_sys_wait_h\u2019\n     variable.\n\n     This macro is obsolescent, as current systems are compatible with\n     Posix.  New programs need not use this macro.\n", "config"], "AC_HEADER_TIOCGWINSZ": [" -- Macro: AC_HEADER_TIOCGWINSZ\n     If the use of \u2018TIOCGWINSZ\u2019 requires \u2018<sys/ioctl.h>\u2019, then define\n     \u2018GWINSZ_IN_SYS_IOCTL\u2019.  Otherwise \u2018TIOCGWINSZ\u2019 can be found in\n     \u2018<termios.h>\u2019.\n\n     Use:\n\n          #ifdef HAVE_TERMIOS_H\n          # include <termios.h>\n          #endif\n\n          #ifdef GWINSZ_IN_SYS_IOCTL\n          # include <sys/ioctl.h>\n          #endif\n\n\u001f", "config"], "AC_CHECK_HEADER": [" -- Macro: AC_CHECK_HEADER (HEADER-FILE, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [INCLUDES])\n     If the system header file HEADER-FILE is compilable, execute shell\n     commands ACTION-IF-FOUND, otherwise execute ACTION-IF-NOT-FOUND.\n     If you just want to define a symbol if the header file is\n     available, consider using \u2018AC_CHECK_HEADERS\u2019 instead.\n\n     INCLUDES should be the appropriate \u201cprerequisite\u201d code, i.e.\n     whatever might be required to appear above \u2018#include <HEADER-FILE>\u2019\n     for it to compile without error.  This can be anything, but will\n     normally be additional \u2018#include\u2019 directives.  If INCLUDES is\n     omitted or empty, \u2018configure\u2019 will use the contents of the macro\n     \u2018AC_INCLUDES_DEFAULT\u2019.  *Note Default Includes::.\n\n     This macro used to check only for the _presence_ of a header, not\n     whether its contents were acceptable to the compiler.  Some older\n     \u2018configure\u2019 scripts rely on this behavior, so it is still available\n     by specifying \u2018-\u2019 as INCLUDES.  This mechanism is deprecated as of\n     Autoconf 2.70; situations where a preprocessor-only check is\n     required should use \u2018AC_PREPROC_IFELSE\u2019.  *Note Running the\n     Preprocessor::.\n\n     This macro caches its result in the \u2018ac_cv_header_HEADER-FILE\u2019\n     variable, with characters not suitable for a variable name mapped\n     to underscores.\n", "config"], "AC_CHECK_HEADERS": [" -- Macro: AC_CHECK_HEADERS (HEADER-FILE..., [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [INCLUDES])\n     For each given system header file HEADER-FILE in the\n     blank-separated argument list that exists, define\n     \u2018HAVE_HEADER-FILE\u2019 (in all capitals).  If ACTION-IF-FOUND is given,\n     it is additional shell code to execute when one of the header files\n     is found.  You can give it a value of \u2018break\u2019 to break out of the\n     loop on the first match.  If ACTION-IF-NOT-FOUND is given, it is\n     executed when one of the header files is not found.\n\n     INCLUDES is interpreted as in \u2018AC_CHECK_HEADER\u2019, in order to choose\n     the set of preprocessor directives supplied before the header under\n     test.\n\n     This macro caches its result in the \u2018ac_cv_header_HEADER-FILE\u2019\n     variable, with characters not suitable for a variable name mapped\n     to underscores.\n", "config"], "AC_CHECK_HEADERS_ONCE": [" -- Macro: AC_CHECK_HEADERS_ONCE (HEADER-FILE...)\n     For each given system header file HEADER-FILE in the\n     blank-separated argument list that exists, define\n     \u2018HAVE_HEADER-FILE\u2019 (in all capitals).\n\n     If you do not need the full power of \u2018AC_CHECK_HEADERS\u2019, this\n     variant generates smaller, faster \u2018configure\u2019 files.  All headers\n     passed to \u2018AC_CHECK_HEADERS_ONCE\u2019 are checked for in one pass,\n     early during the \u2018configure\u2019 run.  The checks cannot be\n     conditionalized, you cannot specify an ACTION-IF-FOUND or\n     ACTION-IF-NOT-FOUND, and \u2018AC_INCLUDES_DEFAULT\u2019 is always used for\n     the prerequisites.\n", "config"], "AC_CHECK_DECL": [" -- Macro: AC_CHECK_DECL (SYMBOL, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [INCLUDES = \u2018AC_INCLUDES_DEFAULT\u2019])\n     If SYMBOL (a function, variable, or constant) is not declared in\n     INCLUDES and a declaration is needed, run the shell commands\n     ACTION-IF-NOT-FOUND, otherwise ACTION-IF-FOUND.  INCLUDES is a\n     series of include directives, defaulting to \u2018AC_INCLUDES_DEFAULT\u2019\n     (*note Default Includes::), which are used prior to the declaration\n     under test.\n\n     This macro actually tests whether SYMBOL is defined as a macro or\n     can be used as an r-value, not whether it is really declared,\n     because it is much safer to avoid introducing extra declarations\n     when they are not needed.  In order to facilitate use of C++ and\n     overloaded function declarations, it is possible to specify\n     function argument types in parentheses for types which can be\n     zero-initialized:\n\n          AC_CHECK_DECL([basename(char *)])\n\n     This macro caches its result in the \u2018ac_cv_have_decl_SYMBOL\u2019\n     variable, with characters not suitable for a variable name mapped\n     to underscores.\n", "config"], "AC_CHECK_DECLS": [" -- Macro: AC_CHECK_DECLS (SYMBOLS, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [INCLUDES = \u2018AC_INCLUDES_DEFAULT\u2019])\n     For each of the SYMBOLS (_comma_-separated list with optional\n     function argument types for C++ overloads), define\n     \u2018HAVE_DECL_SYMBOL\u2019 (in all capitals) to \u20181\u2019 if SYMBOL is declared,\n     otherwise to \u20180\u2019.  If ACTION-IF-NOT-FOUND is given, it is\n     additional shell code to execute when one of the function\n     declarations is needed, otherwise ACTION-IF-FOUND is executed.\n\n     INCLUDES is a series of include directives, defaulting to\n     \u2018AC_INCLUDES_DEFAULT\u2019 (*note Default Includes::), which are used\n     prior to the declarations under test.\n\n     This macro uses an M4 list as first argument:\n          AC_CHECK_DECLS([strdup])\n          AC_CHECK_DECLS([strlen])\n          AC_CHECK_DECLS([malloc, realloc, calloc, free])\n          AC_CHECK_DECLS([j0], [], [], [[#include <math.h>]])\n          AC_CHECK_DECLS([[basename(char *)], [dirname(char *)]])\n\n     Unlike the other \u2018AC_CHECK_*S\u2019 macros, when a SYMBOL is not\n     declared, \u2018HAVE_DECL_SYMBOL\u2019 is defined to \u20180\u2019 instead of leaving\n     \u2018HAVE_DECL_SYMBOL\u2019 undeclared.  When you are _sure_ that the check\n     was performed, use \u2018HAVE_DECL_SYMBOL\u2019 in \u2018#if\u2019:\n\n          #if !HAVE_DECL_SYMBOL\n          extern char *symbol;\n          #endif\n\n     If the test may have not been performed, however, because it is\n     safer _not_ to declare a symbol than to use a declaration that\n     conflicts with the system\u2019s one, you should use:\n\n          #if defined HAVE_DECL_MALLOC && !HAVE_DECL_MALLOC\n          void *malloc (size_t *s);\n          #endif\n\n     You fall into the second category only in extreme situations:\n     either your files may be used without being configured, or they are\n     used during the configuration.  In most cases the traditional\n     approach is enough.\n\n     This macro caches its results in \u2018ac_cv_have_decl_SYMBOL\u2019\n     variables, with characters not suitable for a variable name mapped\n     to underscores.\n", "config"], "AC_CHECK_DECLS_ONCE": [" -- Macro: AC_CHECK_DECLS_ONCE (SYMBOLS)\n     For each of the SYMBOLS (_comma_-separated list), define\n     \u2018HAVE_DECL_SYMBOL\u2019 (in all capitals) to \u20181\u2019 if SYMBOL is declared\n     in the default include files, otherwise to \u20180\u2019.  This is a\n     once-only variant of \u2018AC_CHECK_DECLS\u2019.  It generates the checking\n     code at most once, so that \u2018configure\u2019 is smaller and faster; but\n     the checks cannot be conditionalized and are always done once,\n     early during the \u2018configure\u2019 run.\n\n\u001f", "config"], "AC_STRUCT_DIRENT_D_INO": [" -- Macro: AC_STRUCT_DIRENT_D_INO\n     Perform all the actions of \u2018AC_HEADER_DIRENT\u2019 (*note Particular\n     Headers::).  Then, if \u2018struct dirent\u2019 contains a \u2018d_ino\u2019 member,\n     define \u2018HAVE_STRUCT_DIRENT_D_INO\u2019.\n\n     \u2018HAVE_STRUCT_DIRENT_D_INO\u2019 indicates only the presence of \u2018d_ino\u2019,\n     not whether its contents are always reliable.  Traditionally, a\n     zero \u2018d_ino\u2019 indicated a deleted directory entry, though current\n     systems hide this detail from the user and never return zero\n     \u2018d_ino\u2019 values.  Many current systems report an incorrect \u2018d_ino\u2019\n     for a directory entry that is a mount point.\n", "config"], "AC_STRUCT_DIRENT_D_TYPE": [" -- Macro: AC_STRUCT_DIRENT_D_TYPE\n     Perform all the actions of \u2018AC_HEADER_DIRENT\u2019 (*note Particular\n     Headers::).  Then, if \u2018struct dirent\u2019 contains a \u2018d_type\u2019 member,\n     define \u2018HAVE_STRUCT_DIRENT_D_TYPE\u2019.\n", "config"], "AC_STRUCT_ST_BLOCKS": [" -- Macro: AC_STRUCT_ST_BLOCKS\n     If \u2018struct stat\u2019 contains an \u2018st_blocks\u2019 member, define\n     \u2018HAVE_STRUCT_STAT_ST_BLOCKS\u2019.  Otherwise, require an \u2018AC_LIBOBJ\u2019\n     replacement of \u2018fileblocks\u2019.  The former name, \u2018HAVE_ST_BLOCKS\u2019 is\n     to be avoided, as its support will cease in the future.\n\n     This macro caches its result in the\n     \u2018ac_cv_member_struct_stat_st_blocks\u2019 variable.\n", "config"], "AC_STRUCT_TM": [" -- Macro: AC_STRUCT_TM\n     If \u2018time.h\u2019 does not define \u2018struct tm\u2019, define \u2018TM_IN_SYS_TIME\u2019,\n     which means that including \u2018sys/time.h\u2019 had better define \u2018struct\n     tm\u2019.\n\n     This macro is obsolescent, as \u2018time.h\u2019 defines \u2018struct tm\u2019 in\n     current systems.  New programs need not use this macro.\n", "config"], "AC_STRUCT_TIMEZONE": [" -- Macro: AC_STRUCT_TIMEZONE\n     Figure out how to get the current timezone.  If \u2018struct tm\u2019 has a\n     \u2018tm_zone\u2019 member, define \u2018HAVE_STRUCT_TM_TM_ZONE\u2019 (and the\n     obsoleted \u2018HAVE_TM_ZONE\u2019).  Otherwise, if the external array\n     \u2018tzname\u2019 is found, define \u2018HAVE_TZNAME\u2019; if it is declared, define\n     \u2018HAVE_DECL_TZNAME\u2019.\n\n\u001f", "config"], "AC_CHECK_MEMBER": [" -- Macro: AC_CHECK_MEMBER (AGGREGATE.MEMBER, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [INCLUDES = \u2018AC_INCLUDES_DEFAULT\u2019])\n     Check whether MEMBER is a member of the aggregate AGGREGATE.  If no\n     INCLUDES are specified, the default includes are used (*note\n     Default Includes::).\n\n          AC_CHECK_MEMBER([struct passwd.pw_gecos], [],\n                          [AC_MSG_ERROR([we need 'passwd.pw_gecos'])],\n                          [[#include <pwd.h>]])\n\n     You can use this macro for submembers:\n\n          AC_CHECK_MEMBER(struct top.middle.bot)\n\n     This macro caches its result in the \u2018ac_cv_member_AGGREGATE_MEMBER\u2019\n     variable, with characters not suitable for a variable name mapped\n     to underscores.\n", "config"], "AC_CHECK_MEMBERS": [" -- Macro: AC_CHECK_MEMBERS (MEMBERS, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [INCLUDES = \u2018AC_INCLUDES_DEFAULT\u2019])\n     Check for the existence of each \u2018AGGREGATE.MEMBER\u2019 of MEMBERS using\n     the previous macro.  When MEMBER belongs to AGGREGATE, define\n     \u2018HAVE_AGGREGATE_MEMBER\u2019 (in all capitals, with spaces and dots\n     replaced by underscores).  If ACTION-IF-FOUND is given, it is\n     executed for each of the found members.  If ACTION-IF-NOT-FOUND is\n     given, it is executed for each of the members that could not be\n     found.\n\n     INCLUDES is a series of include directives, defaulting to\n     \u2018AC_INCLUDES_DEFAULT\u2019 (*note Default Includes::), which are used\n     prior to the members under test.\n\n     This macro uses M4 lists:\n          AC_CHECK_MEMBERS([struct stat.st_rdev, struct stat.st_blksize])\n\n\u001f", "config"], "AC_TYPE_GETGROUPS": [" -- Macro: AC_TYPE_GETGROUPS\n     Define \u2018GETGROUPS_T\u2019 to be whichever of \u2018gid_t\u2019 or \u2018int\u2019 is the\n     base type of the array argument to \u2018getgroups\u2019.\n\n     This macro caches the base type in the \u2018ac_cv_type_getgroups\u2019\n     variable.\n", "config"], "AC_TYPE_INT8_T": [" -- Macro: AC_TYPE_INT8_T\n     If \u2018stdint.h\u2019 or \u2018inttypes.h\u2019 does not define the type \u2018int8_t\u2019,\n     define \u2018int8_t\u2019 to a signed integer type that is exactly 8 bits\n     wide and that uses two\u2019s complement representation, if such a type\n     exists.  If you are worried about porting to hosts that lack such a\n     type, you can use the results of this macro in C89-or-later code as\n     follows:\n\n          #if HAVE_STDINT_H\n          # include <stdint.h>\n          #endif\n          #if defined INT8_MAX || defined int8_t\n           _code using int8_t_\n          #else\n           _complicated alternative using >8-bit 'signed char'_\n          #endif\n\n     This macro caches the type in the \u2018ac_cv_c_int8_t\u2019 variable.\n", "config"], "AC_TYPE_INT16_T": [" -- Macro: AC_TYPE_INT16_T\n     This is like \u2018AC_TYPE_INT8_T\u2019, except for 16-bit integers.\n", "config"], "AC_TYPE_INT32_T": [" -- Macro: AC_TYPE_INT32_T\n     This is like \u2018AC_TYPE_INT8_T\u2019, except for 32-bit integers.\n", "config"], "AC_TYPE_INT64_T": [" -- Macro: AC_TYPE_INT64_T\n     This is like \u2018AC_TYPE_INT8_T\u2019, except for 64-bit integers.\n", "config"], "AC_TYPE_INTMAX_T": [" -- Macro: AC_TYPE_INTMAX_T\n     If \u2018stdint.h\u2019 or \u2018inttypes.h\u2019 defines the type \u2018intmax_t\u2019, define\n     \u2018HAVE_INTMAX_T\u2019.  Otherwise, define \u2018intmax_t\u2019 to the widest signed\n     integer type.\n", "config"], "AC_TYPE_INTPTR_T": [" -- Macro: AC_TYPE_INTPTR_T\n     If \u2018stdint.h\u2019 or \u2018inttypes.h\u2019 defines the type \u2018intptr_t\u2019, define\n     \u2018HAVE_INTPTR_T\u2019.  Otherwise, define \u2018intptr_t\u2019 to a signed integer\n     type wide enough to hold a pointer, if such a type exists.\n", "config"], "AC_TYPE_LONG_DOUBLE": [" -- Macro: AC_TYPE_LONG_DOUBLE\n     If the C compiler supports a working \u2018long double\u2019 type, define\n     \u2018HAVE_LONG_DOUBLE\u2019.  The \u2018long double\u2019 type might have the same\n     range and precision as \u2018double\u2019.\n\n     This macro caches its result in the \u2018ac_cv_type_long_double\u2019\n     variable.\n\n     This macro is obsolescent, as current C compilers support \u2018long\n     double\u2019.  New programs need not use this macro.\n", "config"], "AC_TYPE_LONG_DOUBLE_WIDER": [" -- Macro: AC_TYPE_LONG_DOUBLE_WIDER\n     If the C compiler supports a working \u2018long double\u2019 type with more\n     range or precision than the \u2018double\u2019 type, define\n     \u2018HAVE_LONG_DOUBLE_WIDER\u2019.\n\n     This macro caches its result in the \u2018ac_cv_type_long_double_wider\u2019\n     variable.\n", "config"], "AC_TYPE_LONG_LONG_INT": [" -- Macro: AC_TYPE_LONG_LONG_INT\n     If the C compiler supports a working \u2018long long int\u2019 type, define\n     \u2018HAVE_LONG_LONG_INT\u2019.  However, this test does not test \u2018long long\n     int\u2019 values in preprocessor \u2018#if\u2019 expressions, because too many\n     compilers mishandle such expressions.  *Note Preprocessor\n     Arithmetic::.\n\n     This macro caches its result in the \u2018ac_cv_type_long_long_int\u2019\n     variable.\n", "config"], "AC_TYPE_MBSTATE_T": [" -- Macro: AC_TYPE_MBSTATE_T\n     Define \u2018HAVE_MBSTATE_T\u2019 if \u2018<wchar.h>\u2019 declares the \u2018mbstate_t\u2019\n     type.  Also, define \u2018mbstate_t\u2019 to be a type if \u2018<wchar.h>\u2019 does\n     not declare it.\n\n     This macro caches its result in the \u2018ac_cv_type_mbstate_t\u2019\n     variable.\n", "config"], "AC_TYPE_MODE_T": [" -- Macro: AC_TYPE_MODE_T\n     Define \u2018mode_t\u2019 to a suitable type, if standard headers do not\n     define it.\n\n     This macro caches its result in the \u2018ac_cv_type_mode_t\u2019 variable.\n", "config"], "AC_TYPE_OFF_T": [" -- Macro: AC_TYPE_OFF_T\n     Define \u2018off_t\u2019 to a suitable type, if standard headers do not\n     define it.\n\n     This macro caches its result in the \u2018ac_cv_type_off_t\u2019 variable.\n", "config"], "AC_TYPE_PID_T": [" -- Macro: AC_TYPE_PID_T\n     Define \u2018pid_t\u2019 to a suitable type, if standard headers do not\n     define it.\n\n     This macro caches its result in the \u2018ac_cv_type_pid_t\u2019 variable.\n", "config"], "AC_TYPE_SIZE_T": [" -- Macro: AC_TYPE_SIZE_T\n     Define \u2018size_t\u2019 to a suitable type, if standard headers do not\n     define it.\n\n     This macro caches its result in the \u2018ac_cv_type_size_t\u2019 variable.\n", "config"], "AC_TYPE_SSIZE_T": [" -- Macro: AC_TYPE_SSIZE_T\n     Define \u2018ssize_t\u2019 to a suitable type, if standard headers do not\n     define it.\n\n     This macro caches its result in the \u2018ac_cv_type_ssize_t\u2019 variable.\n", "config"], "AC_TYPE_UID_T": [" -- Macro: AC_TYPE_UID_T\n     Define \u2018uid_t\u2019 and \u2018gid_t\u2019 to suitable types, if standard headers\n     do not define them.\n\n     This macro caches its result in the \u2018ac_cv_type_uid_t\u2019 variable.\n", "config"], "AC_TYPE_UINT8_T": [" -- Macro: AC_TYPE_UINT8_T\n     If \u2018stdint.h\u2019 or \u2018inttypes.h\u2019 does not define the type \u2018uint8_t\u2019,\n     define \u2018uint8_t\u2019 to an unsigned integer type that is exactly 8 bits\n     wide, if such a type exists.  This is like \u2018AC_TYPE_INT8_T\u2019, except\n     for unsigned integers.\n", "config"], "AC_TYPE_UINT16_T": [" -- Macro: AC_TYPE_UINT16_T\n     This is like \u2018AC_TYPE_UINT8_T\u2019, except for 16-bit integers.\n", "config"], "AC_TYPE_UINT32_T": [" -- Macro: AC_TYPE_UINT32_T\n     This is like \u2018AC_TYPE_UINT8_T\u2019, except for 32-bit integers.\n", "config"], "AC_TYPE_UINT64_T": [" -- Macro: AC_TYPE_UINT64_T\n     This is like \u2018AC_TYPE_UINT8_T\u2019, except for 64-bit integers.\n", "config"], "AC_TYPE_UINTMAX_T": [" -- Macro: AC_TYPE_UINTMAX_T\n     If \u2018stdint.h\u2019 or \u2018inttypes.h\u2019 defines the type \u2018uintmax_t\u2019, define\n     \u2018HAVE_UINTMAX_T\u2019.  Otherwise, define \u2018uintmax_t\u2019 to the widest\n     unsigned integer type.\n", "config"], "AC_TYPE_UINTPTR_T": [" -- Macro: AC_TYPE_UINTPTR_T\n     If \u2018stdint.h\u2019 or \u2018inttypes.h\u2019 defines the type \u2018uintptr_t\u2019, define\n     \u2018HAVE_UINTPTR_T\u2019.  Otherwise, define \u2018uintptr_t\u2019 to an unsigned\n     integer type wide enough to hold a pointer, if such a type exists.\n", "config"], "AC_TYPE_UNSIGNED_LONG_LONG_INT": [" -- Macro: AC_TYPE_UNSIGNED_LONG_LONG_INT\n     If the C compiler supports a working \u2018unsigned long long int\u2019 type,\n     define \u2018HAVE_UNSIGNED_LONG_LONG_INT\u2019.  However, this test does not\n     test \u2018unsigned long long int\u2019 values in preprocessor \u2018#if\u2019\n     expressions, because too many compilers mishandle such expressions.\n     *Note Preprocessor Arithmetic::.\n\n     This macro caches its result in the\n     \u2018ac_cv_type_unsigned_long_long_int\u2019 variable.\n\n\u001f", "config"], "AC_CHECK_TYPE": [" -- Macro: AC_CHECK_TYPE (TYPE, DEFAULT)\n     Autoconf, up to 2.13, used to provide this version of\n     \u2018AC_CHECK_TYPE\u2019, deprecated because of its flaws.  First, although\n     it is a member of the \u2018CHECK\u2019 clan, it does more than just\n     checking.  Secondly, missing types are defined using \u2018#define\u2019, not\n     \u2018typedef\u2019, and this can lead to problems in the case of pointer\n     types.\n\n     This use of \u2018AC_CHECK_TYPE\u2019 is obsolete and discouraged; see *note\n     Generic Types::, for the description of the current macro.\n\n     If the type TYPE is not defined, define it to be the C (or C++)\n     builtin type DEFAULT, e.g., \u2018short int\u2019 or \u2018unsigned int\u2019.\n\n     This macro is equivalent to:\n\n          AC_CHECK_TYPE([TYPE], [],\n            [AC_DEFINE_UNQUOTED([TYPE], [DEFAULT],\n               [Define to `DEFAULT'\n                if <sys/types.h> does not define.])])\n\n     In order to keep backward compatibility, the two versions of\n     \u2018AC_CHECK_TYPE\u2019 are implemented, selected using these heuristics:\n\n       1. If there are three or four arguments, the modern version is\n          used.\n\n       2. If the second argument appears to be a C or C++ type, then the\n          obsolete version is used.  This happens if the argument is a C\n          or C++ _builtin_ type or a C identifier ending in \u2018_t\u2019,\n          optionally followed by one of \u2018[(* \u2019 and then by a string of\n          zero or more characters taken from the set \u2018[]()* _a-zA-Z0-9\u2019.\n\n       3. If the second argument is spelled with the alphabet of valid C\n          and C++ types, the user is warned and the modern version is\n          used.\n\n       4. Otherwise, the modern version is used.\n\n     You are encouraged either to use a valid builtin type, or to use\n     the equivalent modern code (see above), or better yet, to use\n     \u2018AC_CHECK_TYPES\u2019 together with\n\n          #ifndef HAVE_LOFF_T\n          typedef loff_t off_t;\n          #endif\n", "config"], "AC_CHECK_TYPES": [" -- Macro: AC_CHECK_TYPES (TYPES, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [INCLUDES = \u2018AC_INCLUDES_DEFAULT\u2019])\n     For each TYPE of the TYPES that is defined, define \u2018HAVE_TYPE\u2019 (in\n     all capitals).  Each TYPE must follow the rules of \u2018AC_CHECK_TYPE\u2019.\n     If no INCLUDES are specified, the default includes are used (*note\n     Default Includes::).  If ACTION-IF-FOUND is given, it is additional\n     shell code to execute when one of the types is found.  If\n     ACTION-IF-NOT-FOUND is given, it is executed when one of the types\n     is not found.\n\n     This macro uses M4 lists:\n          AC_CHECK_TYPES([ptrdiff_t])\n          AC_CHECK_TYPES([unsigned long long int, uintmax_t])\n          AC_CHECK_TYPES([float_t], [], [], [[#include <math.h>]])\n", "config"], "AC_CHECK_SIZEOF": [" -- Macro: AC_CHECK_SIZEOF (TYPE-OR-EXPR, [UNUSED], [INCLUDES =\n          \u2018AC_INCLUDES_DEFAULT\u2019])\n     Define \u2018SIZEOF_TYPE-OR-EXPR\u2019 (*note Standard Symbols::) to be the\n     size in bytes of TYPE-OR-EXPR, which may be either a type or an\n     expression returning a value that has a size.  If the expression\n     \u2018sizeof (TYPE-OR-EXPR)\u2019 is invalid, the result is 0.  INCLUDES is a\n     series of include directives, defaulting to \u2018AC_INCLUDES_DEFAULT\u2019\n     (*note Default Includes::), which are used prior to the expression\n     under test.\n\n     This macro now works even when cross-compiling.  The UNUSED\n     argument was used when cross-compiling.\n\n     For example, the call\n\n          AC_CHECK_SIZEOF([int *])\n\n     defines \u2018SIZEOF_INT_P\u2019 to be 8 on DEC Alpha AXP systems.\n\n     This macro caches its result in the \u2018ac_cv_sizeof_TYPE-OR-EXPR\u2019\n     variable, with \u2018*\u2019 mapped to \u2018p\u2019 and other characters not suitable\n     for a variable name mapped to underscores.\n", "config"], "AC_CHECK_ALIGNOF": [" -- Macro: AC_CHECK_ALIGNOF (TYPE, [INCLUDES = \u2018AC_INCLUDES_DEFAULT\u2019])\n     Define \u2018ALIGNOF_TYPE\u2019 (*note Standard Symbols::) to be the\n     alignment in bytes of TYPE.  \u2018TYPE y;\u2019 must be valid as a structure\n     member declaration.  If \u2018type\u2019 is unknown, the result is 0.  If no\n     INCLUDES are specified, the default includes are used (*note\n     Default Includes::).\n\n     This macro caches its result in the \u2018ac_cv_alignof_TYPE-OR-EXPR\u2019\n     variable, with \u2018*\u2019 mapped to \u2018p\u2019 and other characters not suitable\n     for a variable name mapped to underscores.\n", "config"], "AC_COMPUTE_INT": [" -- Macro: AC_COMPUTE_INT (VAR, EXPRESSION, [INCLUDES =\n          \u2018AC_INCLUDES_DEFAULT\u2019], [ACTION-IF-FAILS])\n     Store into the shell variable VAR the value of the integer\n     EXPRESSION.  The value should fit in an initializer in a C variable\n     of type \u2018signed long\u2019.  To support cross compilation (in which\n     case, the macro only works on hosts that use twos-complement\n     arithmetic), it should be possible to evaluate the expression at\n     compile-time.  If no INCLUDES are specified, the default includes\n     are used (*note Default Includes::).\n\n     Execute ACTION-IF-FAILS if the value cannot be determined\n     correctly.\n", "config"], "AC_LANG_WERROR": [" -- Macro: AC_LANG_WERROR\n     Normally Autoconf ignores warnings generated by the compiler,\n     linker, and preprocessor.  If this macro is used, warnings count as\n     fatal errors for the current language.  This macro is useful when\n     the results of configuration are used where warnings are\n     unacceptable; for instance, if parts of a program are built with\n     the GCC \u2018-Werror\u2019 option.  If the whole program is built using\n     \u2018-Werror\u2019 it is often simpler to put \u2018-Werror\u2019 in the compiler\n     flags (\u2018CFLAGS\u2019, etc.).\n", "config"], "AC_OPENMP": [" -- Macro: AC_OPENMP\n     OpenMP (http://www.openmp.org/) specifies extensions of C, C++, and\n     Fortran that simplify optimization of shared memory parallelism,\n     which is a common problem on multi-core CPUs.\n\n     If the current language is C, the macro \u2018AC_OPENMP\u2019 sets the\n     variable \u2018OPENMP_CFLAGS\u2019 to the C compiler flags needed for\n     supporting OpenMP.  \u2018OPENMP_CFLAGS\u2019 is set to empty if the compiler\n     already supports OpenMP, if it has no way to activate OpenMP\n     support, or if the user rejects OpenMP support by invoking\n     \u2018configure\u2019 with the \u2018--disable-openmp\u2019 option.\n\n     \u2018OPENMP_CFLAGS\u2019 needs to be used when compiling programs, when\n     preprocessing program source, and when linking programs.  Therefore\n     you need to add \u2018$(OPENMP_CFLAGS)\u2019 to the \u2018CFLAGS\u2019 of C programs\n     that use OpenMP.  If you preprocess OpenMP-specific C code, you\n     also need to add \u2018$(OPENMP_CFLAGS)\u2019 to \u2018CPPFLAGS\u2019.  The presence of\n     OpenMP support is revealed at compile time by the preprocessor\n     macro \u2018_OPENMP\u2019.\n\n     Linking a program with \u2018OPENMP_CFLAGS\u2019 typically adds one more\n     shared library to the program\u2019s dependencies, so its use is\n     recommended only on programs that actually require OpenMP.\n\n     If the current language is C++, \u2018AC_OPENMP\u2019 sets the variable\n     \u2018OPENMP_CXXFLAGS\u2019, suitably for the C++ compiler.  The same remarks\n     hold as for C.\n\n     If the current language is Fortran 77 or Fortran, \u2018AC_OPENMP\u2019 sets\n     the variable \u2018OPENMP_FFLAGS\u2019 or \u2018OPENMP_FCFLAGS\u2019, respectively.\n     Similar remarks as for C hold, except that \u2018CPPFLAGS\u2019 is not used\n     for Fortran, and no preprocessor macro signals OpenMP support.\n\n     For portability, it is best to avoid spaces between \u2018#\u2019 and \u2018pragma\n     omp\u2019.  That is, write \u2018#pragma omp\u2019, not \u2018# pragma omp\u2019.  The Sun\n     WorkShop 6.2 C compiler chokes on the latter.\n\n     This macro caches its result in the \u2018ac_cv_prog_c_openmp\u2019,\n     \u2018ac_cv_prog_cxx_openmp\u2019, \u2018ac_cv_prog_f77_openmp\u2019, or\n     \u2018ac_cv_prog_fc_openmp\u2019 variable, depending on the current language.\n\n     *Caution:* Some of the compiler options that \u2018AC_OPENMP\u2019 tests,\n     mean \u201cenable OpenMP\u201d to one compiler, but \u201cwrite output to a file\n     named \u2018mp\u2019 or \u2018penmp\u2019\u201d to other compilers.  We cannot guarantee\n     that the implementation of \u2018AC_OPENMP\u2019 will not overwrite an\n     existing file with either of these names.\n\n     Therefore, as a defensive measure, a \u2018configure\u2019 script that uses\n     \u2018AC_OPENMP\u2019 will issue an error and stop (before doing any of the\n     operations that might overwrite these files) upon encountering\n     either of these files in its working directory.  \u2018autoconf\u2019 will\n     also issue an error if it finds either of these files in the same\n     directory as a \u2018configure.ac\u2019 that uses \u2018AC_OPENMP\u2019.\n\n     If you have files with either of these names at the top level of\n     your source tree, and you need to use \u2018AC_OPENMP\u2019, we recommend you\n     either change their names or move them into a subdirectory.\n\n\u001f", "config"], "AC_PROG_CC": [" -- Macro: AC_PROG_CC ([COMPILER-SEARCH-LIST])\n     Determine a C compiler to use.\n\n     If the environment variable \u2018CC\u2019 is set, its value will be taken as\n     the name of the C compiler to use.  Otherwise, search for a C\n     compiler under a series of likely names, trying \u2018gcc\u2019 and \u2018cc\u2019\n     first.  Regardless, the output variable \u2018CC\u2019 is set to the chosen\n     compiler.\n\n     If the optional first argument to the macro is used, it must be a\n     whitespace-separated list of potential names for a C compiler,\n     which overrides the built-in list.\n\n     If no C compiler can be found, \u2018configure\u2019 will error out.\n\n     If the selected C compiler is found to be GNU C (regardless of its\n     name), the shell variable \u2018GCC\u2019 will be set to \u2018yes\u2019.  If the shell\n     variable \u2018CFLAGS\u2019 was not already set, it is set to \u2018-g -O2\u2019 for\n     the GNU C compiler (\u2018-O2\u2019 on systems where GCC does not accept\n     \u2018-g\u2019), or \u2018-g\u2019 for other compilers.  \u2018CFLAGS\u2019 is then made an\n     output variable.  You can override the default for \u2018CFLAGS\u2019 by\n     inserting a shell default assignment between \u2018AC_INIT\u2019 and\n     \u2018AC_PROG_CC\u2019:\n\n          : ${CFLAGS=\"OPTIONS\"}\n\n     where OPTIONS are the appropriate set of options to use by default.\n     (It is important to use this construct rather than a normal\n     assignment, so that \u2018CFLAGS\u2019 can still be overridden by the person\n     building the package.  *Note Preset Output Variables::.)\n\n     If necessary, options are added to \u2018CC\u2019 to enable support for ISO\n     Standard C features with extensions, preferring the newest edition\n     of the C standard that is supported.  Currently the newest edition\n     Autoconf knows how to detect support for is ISO C 2011.  After\n     calling this macro you can check whether the C compiler has been\n     set to accept standard C by inspecting the shell variable\n     \u2018ac_prog_cc_stdc\u2019.  Its value will be \u2018c11\u2019, \u2018c99\u2019, or \u2018c89\u2019,\n     respectively, if the C compiler has been set to use the 2011, 1999,\n     or 1990 edition of the C standard, and \u2018no\u2019 if the compiler does\n     not support compiling standard C at all.\n\n     The tests for standard conformance are not comprehensive.  They\n     test the values of \u2018__STDC__\u2019 and \u2018__STDC_VERSION__\u2019, and a\n     representative sample of the language features added in each\n     version of the C standard.  They do not test the C standard\n     library, because the C compiler might be generating code for a\n     \u201cfreestanding environment\u201d (in which most of the standard library\n     is optional).  If you need to know whether a particular C standard\n     header exists, use \u2018AC_CHECK_HEADER\u2019.\n\n     None of the options that may be added to \u2018CC\u2019 by this macro enable\n     _strict_ conformance to the C standard.  In particular,\n     system-specific extensions are not disabled.  (For example, for GNU\n     C, the \u2018-std=gnuNN\u2019 options may be used, but not the \u2018-std=cNN\u2019\n     options.)\n\n     Many Autoconf macros use a compiler, and thus call\n     \u2018AC_REQUIRE([AC_PROG_CC])\u2019 to ensure that the compiler has been\n     determined before the body of the outermost \u2018AC_DEFUN\u2019 macro.\n     Although \u2018AC_PROG_CC\u2019 is safe to directly expand multiple times, it\n     performs certain checks (such as the proper value of \u2018EXEEXT\u2019) only\n     on the first invocation.  Therefore, care must be used when\n     invoking this macro from within another macro rather than at the\n     top level (*note Expanded Before Required::).\n", "config"], "AC_PROG_CC_C_O": [" -- Macro: AC_PROG_CC_C_O\n     If the C compiler does not accept the \u2018-c\u2019 and \u2018-o\u2019 options\n     simultaneously, define \u2018NO_MINUS_C_MINUS_O\u2019.  This macro actually\n     tests both the compiler found by \u2018AC_PROG_CC\u2019, and, if different,\n     the first \u2018cc\u2019 in the path.  The test fails if one fails.  This\n     macro was created for GNU Make to choose the default C compilation\n     rule.\n\n     For the compiler COMPILER, this macro caches its result in the\n     \u2018ac_cv_prog_cc_COMPILER_c_o\u2019 variable.\n", "config"], "AC_PROG_CPP": [" -- Macro: AC_PROG_CPP\n     Set output variable \u2018CPP\u2019 to a command that runs the C\n     preprocessor.  If \u2018$CC -E\u2019 doesn\u2019t work, tries \u2018cpp\u2019 and\n     \u2018/lib/cpp\u2019, in that order.\n\n     It is only portable to run \u2018CPP\u2019 on files with a \u2018.c\u2019 extension.\n\n     Some preprocessors don\u2019t indicate missing include files by the\n     error status.  For such preprocessors an internal variable is set\n     that causes other macros to check the standard error from the\n     preprocessor and consider the test failed if any warnings have been\n     reported.  For most preprocessors, though, warnings do not cause\n     include-file tests to fail unless \u2018AC_PROG_CPP_WERROR\u2019 is also\n     specified.\n", "config"], "AC_PROG_CPP_WERROR": [" -- Macro: AC_PROG_CPP_WERROR\n     This acts like \u2018AC_PROG_CPP\u2019, except it treats warnings from the\n     preprocessor as errors even if the preprocessor exit status\n     indicates success.  This is useful for avoiding headers that\n     generate mandatory warnings, such as deprecation notices.\n", "config"], "AC_C_BACKSLASH_A": [" -- Macro: AC_C_BACKSLASH_A\n     Define \u2018HAVE_C_BACKSLASH_A\u2019 to 1 if the C compiler understands\n     \u2018\\a\u2019.\n\n     This macro is obsolescent, as current C compilers understand \u2018\\a\u2019.\n     New programs need not use this macro.\n", "config"], "AC_C_BIGENDIAN": [" -- Macro: AC_C_BIGENDIAN ([ACTION-IF-TRUE], [ACTION-IF-FALSE],\n          [ACTION-IF-UNKNOWN], [ACTION-IF-UNIVERSAL])\n     If words are stored with the most significant byte first (like\n     Motorola and SPARC CPUs), execute ACTION-IF-TRUE.  If words are\n     stored with the least significant byte first (like Intel and VAX\n     CPUs), execute ACTION-IF-FALSE.\n\n     This macro runs a test-case if endianness cannot be determined from\n     the system header files.  When cross-compiling, the test-case is\n     not run but grep\u2019ed for some magic values.  ACTION-IF-UNKNOWN is\n     executed if the latter case fails to determine the byte sex of the\n     host system.\n\n     In some cases a single run of a compiler can generate code for\n     multiple architectures.  This can happen, for example, when\n     generating Mac OS X universal binary files, which work on both\n     PowerPC and Intel architectures.  In this case, the different\n     variants might be for architectures with differing endianness.  If\n     \u2018configure\u2019 detects this, it executes ACTION-IF-UNIVERSAL instead\n     of ACTION-IF-UNKNOWN.\n\n     The default for ACTION-IF-TRUE is to define \u2018WORDS_BIGENDIAN\u2019.  The\n     default for ACTION-IF-FALSE is to do nothing.  The default for\n     ACTION-IF-UNKNOWN is to abort configure and tell the installer how\n     to bypass this test.  And finally, the default for\n     ACTION-IF-UNIVERSAL is to ensure that \u2018WORDS_BIGENDIAN\u2019 is defined\n     if and only if a universal build is detected and the current code\n     is big-endian; this default works only if \u2018autoheader\u2019 is used\n     (*note autoheader Invocation::).\n\n     If you use this macro without specifying ACTION-IF-UNIVERSAL, you\n     should also use \u2018AC_CONFIG_HEADERS\u2019; otherwise \u2018WORDS_BIGENDIAN\u2019\n     may be set incorrectly for Mac OS X universal binary files.\n", "config"], "AC_C_CONST": [" -- Macro: AC_C_CONST\n     If the C compiler does not fully support the \u2018const\u2019 keyword,\n     define \u2018const\u2019 to be empty.  Some C compilers that do not define\n     \u2018__STDC__\u2019 do support \u2018const\u2019; some compilers that define\n     \u2018__STDC__\u2019 do not completely support \u2018const\u2019.  Programs can simply\n     use \u2018const\u2019 as if every C compiler supported it; for those that\n     don\u2019t, the makefile or configuration header file defines it as\n     empty.\n\n     Occasionally installers use a C++ compiler to compile C code,\n     typically because they lack a C compiler.  This causes problems\n     with \u2018const\u2019, because C and C++ treat \u2018const\u2019 differently.  For\n     example:\n\n          const int foo;\n\n     is valid in C but not in C++.  These differences unfortunately\n     cannot be papered over by defining \u2018const\u2019 to be empty.\n\n     If \u2018autoconf\u2019 detects this situation, it leaves \u2018const\u2019 alone, as\n     this generally yields better results in practice.  However, using a\n     C++ compiler to compile C code is not recommended or supported, and\n     installers who run into trouble in this area should get a C\n     compiler like GCC to compile their C code.\n\n     This macro caches its result in the \u2018ac_cv_c_const\u2019 variable.\n\n     This macro is obsolescent, as current C compilers support \u2018const\u2019.\n     New programs need not use this macro.\n", "config"], "AC_C__GENERIC": [" -- Macro: AC_C__GENERIC\n     If the C compiler supports C11-style generic selection using the\n     \u2018_Generic\u2019 keyword, define \u2018HAVE_C__GENERIC\u2019.\n", "config"], "AC_C_RESTRICT": [" -- Macro: AC_C_RESTRICT\n     If the C compiler recognizes a variant spelling for the \u2018restrict\u2019\n     keyword (\u2018__restrict\u2019, \u2018__restrict__\u2019, or \u2018_Restrict\u2019), then define\n     \u2018restrict\u2019 to that; this is more likely to do the right thing with\n     compilers that support language variants where plain \u2018restrict\u2019 is\n     not a keyword.  Otherwise, if the C compiler recognizes the\n     \u2018restrict\u2019 keyword, don\u2019t do anything.  Otherwise, define\n     \u2018restrict\u2019 to be empty.  Thus, programs may simply use \u2018restrict\u2019\n     as if every C compiler supported it; for those that do not, the\n     makefile or configuration header defines it away.\n\n     Although support in C++ for the \u2018restrict\u2019 keyword is not required,\n     several C++ compilers do accept the keyword.  This macro works for\n     them, too.\n\n     This macro caches \u2018no\u2019 in the \u2018ac_cv_c_restrict\u2019 variable if\n     \u2018restrict\u2019 is not supported, and a supported spelling otherwise.\n", "config"], "AC_C_VOLATILE": [" -- Macro: AC_C_VOLATILE\n     If the C compiler does not understand the keyword \u2018volatile\u2019,\n     define \u2018volatile\u2019 to be empty.  Programs can simply use \u2018volatile\u2019\n     as if every C compiler supported it; for those that do not, the\n     makefile or configuration header defines it as empty.\n\n     If the correctness of your program depends on the semantics of\n     \u2018volatile\u2019, simply defining it to be empty does, in a sense, break\n     your code.  However, given that the compiler does not support\n     \u2018volatile\u2019, you are at its mercy anyway.  At least your program\n     compiles, when it wouldn\u2019t before.  *Note Volatile Objects::, for\n     more about \u2018volatile\u2019.\n\n     In general, the \u2018volatile\u2019 keyword is a standard C feature, so you\n     might expect that \u2018volatile\u2019 is available only when \u2018__STDC__\u2019 is\n     defined.  However, Ultrix 4.3\u2019s native compiler does support\n     volatile, but does not define \u2018__STDC__\u2019.\n\n     This macro is obsolescent, as current C compilers support\n     \u2018volatile\u2019.  New programs need not use this macro.\n", "config"], "AC_C_INLINE": [" -- Macro: AC_C_INLINE\n     If the C compiler supports the keyword \u2018inline\u2019, do nothing.\n     Otherwise define \u2018inline\u2019 to \u2018__inline__\u2019 or \u2018__inline\u2019 if it\n     accepts one of those, otherwise define \u2018inline\u2019 to be empty.\n", "config"], "AC_C_CHAR_UNSIGNED": [" -- Macro: AC_C_CHAR_UNSIGNED\n     If the C type \u2018char\u2019 is unsigned, define \u2018__CHAR_UNSIGNED__\u2019,\n     unless the C compiler predefines it.\n\n     These days, using this macro is not necessary.  The same\n     information can be determined by this portable alternative, thus\n     avoiding the use of preprocessor macros in the namespace reserved\n     for the implementation.\n\n          #include <limits.h>\n          #if CHAR_MIN == 0\n          # define CHAR_UNSIGNED 1\n          #endif\n", "config"], "AC_C_STRINGIZE": [" -- Macro: AC_C_STRINGIZE\n     If the C preprocessor supports the stringizing operator, define\n     \u2018HAVE_STRINGIZE\u2019.  The stringizing operator is \u2018#\u2019 and is found in\n     macros such as this:\n\n          #define x(y) #y\n\n     This macro is obsolescent, as current C compilers support the\n     stringizing operator.  New programs need not use this macro.\n", "config"], "AC_C_FLEXIBLE_ARRAY_MEMBER": [" -- Macro: AC_C_FLEXIBLE_ARRAY_MEMBER\n     If the C compiler supports flexible array members, define\n     \u2018FLEXIBLE_ARRAY_MEMBER\u2019 to nothing; otherwise define it to 1.  That\n     way, a declaration like this:\n\n          struct s\n            {\n              size_t n_vals;\n              double val[FLEXIBLE_ARRAY_MEMBER];\n            };\n\n     will let applications use the \u201cstruct hack\u201d even with compilers\n     that do not support flexible array members.  To allocate and use\n     such an object, you can use code like this:\n\n          size_t i;\n          size_t n = compute_value_count ();\n          struct s *p =\n             malloc (offsetof (struct s, val)\n                     + n * sizeof (double));\n          p->n_vals = n;\n          for (i = 0; i < n; i++)\n            p->val[i] = compute_value (i);\n", "config"], "AC_C_VARARRAYS": [" -- Macro: AC_C_VARARRAYS\n     If the C compiler does not support variable-length arrays, define\n     the macro \u2018__STDC_NO_VLA__\u2019 to be 1 if it is not already defined.\n     A variable-length array is an array of automatic storage duration\n     whose length is determined at run time, when the array is declared.\n     For backward compatibility this macro also defines\n     \u2018HAVE_C_VARARRAYS\u2019 if the C compiler supports variable-length\n     arrays, but this usage is obsolescent and new programs should use\n     \u2018__STDC_NO_VLA__\u2019.\n", "config"], "AC_C_TYPEOF": [" -- Macro: AC_C_TYPEOF\n     If the C compiler supports GNU C\u2019s \u2018typeof\u2019 syntax either directly\n     or through a different spelling of the keyword (e.g.,\n     \u2018__typeof__\u2019), define \u2018HAVE_TYPEOF\u2019.  If the support is available\n     only through a different spelling, define \u2018typeof\u2019 to that\n     spelling.\n", "config"], "AC_C_PROTOTYPES": [" -- Macro: AC_C_PROTOTYPES\n     If function prototypes are understood by the compiler (as\n     determined by \u2018AC_PROG_CC\u2019), define \u2018PROTOTYPES\u2019 and\n     \u2018__PROTOTYPES\u2019.  Defining \u2018__PROTOTYPES\u2019 is for the benefit of\n     header files that cannot use macros that infringe on user name\n     space.\n\n     This macro is obsolescent, as current C compilers support\n     prototypes.  New programs need not use this macro.\n", "config"], "AC_PROG_GCC_TRADITIONAL": [" -- Macro: AC_PROG_GCC_TRADITIONAL\n     Add \u2018-traditional\u2019 to output variable \u2018CC\u2019 if using a GNU C\n     compiler and \u2018ioctl\u2019 does not work properly without \u2018-traditional\u2019.\n     That usually happens when the fixed header files have not been\n     installed on an old system.\n\n     This macro is obsolescent, since current versions of the GNU C\n     compiler fix the header files automatically when installed.\n\n\u001f", "config"], "AC_PROG_CXX": ["\u2018AC_PROG_CXX\u2019\n     This is required if any C++ source is included.  *Note Particular\n     Program Checks: (autoconf)Particular Programs.\n", "config"], "AC_PROG_CXXCPP": [" -- Macro: AC_PROG_CXXCPP\n     Set output variable \u2018CXXCPP\u2019 to a command that runs the C++\n     preprocessor.  If \u2018$CXX -E\u2019 doesn\u2019t work, tries \u2018cpp\u2019 and\n     \u2018/lib/cpp\u2019, in that order.  Because of this fallback, \u2018CXXCPP\u2019 may\n     or may not set C++-specific predefined macros (such as\n     \u2018__cplusplus\u2019).\n\n     It is portable to run \u2018CXXCPP\u2019 only on files with a \u2018.c\u2019, \u2018.C\u2019,\n     \u2018.cc\u2019, or \u2018.cpp\u2019 extension.\n\n     Some preprocessors don\u2019t indicate missing include files by the\n     error status.  For such preprocessors an internal variable is set\n     that causes other macros to check the standard error from the\n     preprocessor and consider the test failed if any warnings have been\n     reported.  However, it is not known whether such broken\n     preprocessors exist for C++.\n", "config"], "AC_PROG_CXX_C_O": [" -- Macro: AC_PROG_CXX_C_O\n     Test whether the C++ compiler accepts the options \u2018-c\u2019 and \u2018-o\u2019\n     simultaneously, and define \u2018CXX_NO_MINUS_C_MINUS_O\u2019, if it does\n     not.\n\n\u001f", "config"], "AC_PROG_OBJC": ["\u2018AC_PROG_OBJC\u2019\n     This is required if any Objective C source is included.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n", "config"], "AC_PROG_OBJCPP": [" -- Macro: AC_PROG_OBJCPP\n     Set output variable \u2018OBJCPP\u2019 to a command that runs the Objective C\n     preprocessor.  If \u2018$OBJC -E\u2019 doesn\u2019t work, tries \u2018cpp\u2019 and\n     \u2018/lib/cpp\u2019, in that order.  Because of this fallback, \u2018CXXCPP\u2019 may\n     or may not set Objective-C-specific predefined macros (such as\n     \u2018__OBJC__\u2019).\n\n\u001f", "config"], "AC_PROG_OBJCXX": ["\u2018AC_PROG_OBJCXX\u2019\n     This is required if any Objective C++ source is included.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n", "config"], "AC_PROG_OBJCXXCPP": [" -- Macro: AC_PROG_OBJCXXCPP\n     Set output variable \u2018OBJCXXCPP\u2019 to a command that runs the\n     Objective C++ preprocessor.  If \u2018$OBJCXX -E\u2019 doesn\u2019t work, tries\n     \u2018cpp\u2019 and \u2018/lib/cpp\u2019, in that order.  Because of this fallback,\n     \u2018CXXCPP\u2019 may or may not set Objective-C++-specific predefined\n     macros (such as \u2018__cplusplus\u2019 and \u2018__OBJC__\u2019).\n\n\u001f", "config"], "AC_ERLANG_PATH_ERLC": [" -- Macro: AC_ERLANG_PATH_ERLC ([VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Determine an Erlang compiler to use.  If \u2018ERLC\u2019 is not already set\n     in the environment, check for \u2018erlc\u2019.  Set output variable \u2018ERLC\u2019\n     to the complete path of the compiler command found.  In addition,\n     if \u2018ERLCFLAGS\u2019 is not set in the environment, set it to an empty\n     value.\n\n     The two optional arguments have the same meaning as the two last\n     arguments of macro \u2018AC_PATH_PROG\u2019 for looking for the \u2018erlc\u2019\n     program.  For example, to look for \u2018erlc\u2019 only in the\n     \u2018/usr/lib/erlang/bin\u2019 directory:\n\n          AC_ERLANG_PATH_ERLC([not found], [/usr/lib/erlang/bin])\n", "config"], "AC_ERLANG_NEED_ERLC": [" -- Macro: AC_ERLANG_NEED_ERLC ([PATH = \u2018$PATH\u2019])\n     A simplified variant of the \u2018AC_ERLANG_PATH_ERLC\u2019 macro, that\n     prints an error message and exits the \u2018configure\u2019 script if the\n     \u2018erlc\u2019 program is not found.\n", "config"], "AC_ERLANG_PATH_ERL": [" -- Macro: AC_ERLANG_PATH_ERL ([VALUE-IF-NOT-FOUND], [PATH = \u2018$PATH\u2019])\n     Determine an Erlang interpreter to use.  If \u2018ERL\u2019 is not already\n     set in the environment, check for \u2018erl\u2019.  Set output variable \u2018ERL\u2019\n     to the complete path of the interpreter command found.\n\n     The two optional arguments have the same meaning as the two last\n     arguments of macro \u2018AC_PATH_PROG\u2019 for looking for the \u2018erl\u2019\n     program.  For example, to look for \u2018erl\u2019 only in the\n     \u2018/usr/lib/erlang/bin\u2019 directory:\n\n          AC_ERLANG_PATH_ERL([not found], [/usr/lib/erlang/bin])\n", "config"], "AC_ERLANG_NEED_ERL": [" -- Macro: AC_ERLANG_NEED_ERL ([PATH = \u2018$PATH\u2019])\n     A simplified variant of the \u2018AC_ERLANG_PATH_ERL\u2019 macro, that prints\n     an error message and exits the \u2018configure\u2019 script if the \u2018erl\u2019\n     program is not found.\n\n\u001f", "config"], "AC_PROG_F77": ["\u2018AC_PROG_F77\u2019\n     This is required if any Fortran 77 source is included.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n", "config"], "AC_PROG_FC": ["\u2018AC_PROG_FC\u2019\n     This is required if any Fortran 90/95 source is included.  This\n     macro is distributed with Autoconf version 2.58 and later.  *Note\n     Particular Program Checks: (autoconf)Particular Programs.\n", "config"], "AC_PROG_F77_C_O": [" -- Macro: AC_PROG_F77_C_O\n -- Macro: AC_PROG_FC_C_O\n     Test whether the Fortran compiler accepts the options \u2018-c\u2019 and \u2018-o\u2019\n     simultaneously, and define \u2018F77_NO_MINUS_C_MINUS_O\u2019 or\n     \u2018FC_NO_MINUS_C_MINUS_O\u2019, respectively, if it does not.\n\n     The result of the test is cached in the \u2018ac_cv_prog_f77_c_o\u2019 or\n     \u2018ac_cv_prog_fc_c_o\u2019 variable, respectively.\n", "config"], "AC_PROG_FC_C_O": [" -- Macro: AC_PROG_F77_C_O\n -- Macro: AC_PROG_FC_C_O\n     Test whether the Fortran compiler accepts the options \u2018-c\u2019 and \u2018-o\u2019\n     simultaneously, and define \u2018F77_NO_MINUS_C_MINUS_O\u2019 or\n     \u2018FC_NO_MINUS_C_MINUS_O\u2019, respectively, if it does not.\n\n     The result of the test is cached in the \u2018ac_cv_prog_f77_c_o\u2019 or\n     \u2018ac_cv_prog_fc_c_o\u2019 variable, respectively.\n", "config"], "AC_F77_LIBRARY_LDFLAGS": ["\u2018AC_F77_LIBRARY_LDFLAGS\u2019\n     This is required for programs and shared libraries that are a\n     mixture of languages that include Fortran 77 (*note Mixing Fortran\n     77 With C and C++::).  *Note Autoconf macros supplied with\n     Automake: Macros.\n", "config"], "AC_FC_LIBRARY_LDFLAGS": [" -- Macro: AC_F77_LIBRARY_LDFLAGS\n -- Macro: AC_FC_LIBRARY_LDFLAGS\n     Determine the linker flags (e.g., \u2018-L\u2019 and \u2018-l\u2019) for the \u201cFortran\n     intrinsic and runtime libraries\u201d that are required to successfully\n     link a Fortran program or shared library.  The output variable\n     \u2018FLIBS\u2019 or \u2018FCLIBS\u2019 is set to these flags (which should be included\n     after \u2018LIBS\u2019 when linking).\n\n     This macro is intended to be used in those situations when it is\n     necessary to mix, e.g., C++ and Fortran source code in a single\n     program or shared library (*note (automake)Mixing Fortran 77 With C\n     and C++::).\n\n     For example, if object files from a C++ and Fortran compiler must\n     be linked together, then the C++ compiler/linker must be used for\n     linking (since special C++-ish things need to happen at link time\n     like calling global constructors, instantiating templates, enabling\n     exception support, etc.).\n\n     However, the Fortran intrinsic and runtime libraries must be linked\n     in as well, but the C++ compiler/linker doesn\u2019t know by default how\n     to add these Fortran 77 libraries.  Hence, this macro was created\n     to determine these Fortran libraries.\n\n     The macros \u2018AC_F77_DUMMY_MAIN\u2019 and \u2018AC_FC_DUMMY_MAIN\u2019 or\n     \u2018AC_F77_MAIN\u2019 and \u2018AC_FC_MAIN\u2019 are probably also necessary to link\n     C/C++ with Fortran; see below.  Further, it is highly recommended\n     that you use \u2018AC_CONFIG_HEADERS\u2019 (*note Configuration Headers::)\n     because the complex defines that the function wrapper macros create\n     may not work with C/C++ compiler drivers.\n\n     These macros internally compute the flag needed to verbose linking\n     output and cache it in \u2018ac_cv_prog_f77_v\u2019 or \u2018ac_cv_prog_fc_v\u2019\n     variables, respectively.  The computed linker flags are cached in\n     \u2018ac_cv_f77_libs\u2019 or \u2018ac_cv_fc_libs\u2019, respectively.\n", "config"], "AC_F77_DUMMY_MAIN": [" -- Macro: AC_F77_DUMMY_MAIN ([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND =\n          \u2018AC_MSG_FAILURE\u2019])", "config"], "AC_FC_DUMMY_MAIN": [" -- Macro: AC_FC_DUMMY_MAIN ([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND =\n          \u2018AC_MSG_FAILURE\u2019])\n     With many compilers, the Fortran libraries detected by\n     \u2018AC_F77_LIBRARY_LDFLAGS\u2019 or \u2018AC_FC_LIBRARY_LDFLAGS\u2019 provide their\n     own \u2018main\u2019 entry function that initializes things like Fortran I/O,\n     and which then calls a user-provided entry function named (say)\n     \u2018MAIN__\u2019 to run the user\u2019s program.  The \u2018AC_F77_DUMMY_MAIN\u2019 and\n     \u2018AC_FC_DUMMY_MAIN\u2019 or \u2018AC_F77_MAIN\u2019 and \u2018AC_FC_MAIN\u2019 macros figure\n     out how to deal with this interaction.\n\n     When using Fortran for purely numerical functions (no I/O, etc.)\n     often one prefers to provide one\u2019s own \u2018main\u2019 and skip the Fortran\n     library initializations.  In this case, however, one may still need\n     to provide a dummy \u2018MAIN__\u2019 routine in order to prevent linking\n     errors on some systems.  \u2018AC_F77_DUMMY_MAIN\u2019 or \u2018AC_FC_DUMMY_MAIN\u2019\n     detects whether any such routine is _required_ for linking, and\n     what its name is; the shell variable \u2018F77_DUMMY_MAIN\u2019 or\n     \u2018FC_DUMMY_MAIN\u2019 holds this name, \u2018unknown\u2019 when no solution was\n     found, and \u2018none\u2019 when no such dummy main is needed.\n\n     By default, ACTION-IF-FOUND defines \u2018F77_DUMMY_MAIN\u2019 or\n     \u2018FC_DUMMY_MAIN\u2019 to the name of this routine (e.g., \u2018MAIN__\u2019) _if_\n     it is required.  ACTION-IF-NOT-FOUND defaults to exiting with an\n     error.\n\n     In order to link with Fortran routines, the user\u2019s C/C++ program\n     should then include the following code to define the dummy main if\n     it is needed:\n\n          #ifdef F77_DUMMY_MAIN\n          #  ifdef __cplusplus\n               extern \"C\"\n          #  endif\n             int F77_DUMMY_MAIN () { return 1; }\n          #endif\n\n     (Replace \u2018F77\u2019 with \u2018FC\u2019 for Fortran instead of Fortran 77.)\n\n     Note that this macro is called automatically from \u2018AC_F77_WRAPPERS\u2019\n     or \u2018AC_FC_WRAPPERS\u2019; there is generally no need to call it\n     explicitly unless one wants to change the default actions.\n\n     The result of this macro is cached in the \u2018ac_cv_f77_dummy_main\u2019 or\n     \u2018ac_cv_fc_dummy_main\u2019 variable, respectively.\n", "config"], "AC_F77_MAIN": [" -- Macro: AC_F77_MAIN\n -- Macro: AC_FC_MAIN\n     As discussed above, many Fortran libraries allow you to provide an\n     entry point called (say) \u2018MAIN__\u2019 instead of the usual \u2018main\u2019,\n     which is then called by a \u2018main\u2019 function in the Fortran libraries\n     that initializes things like Fortran I/O.  The \u2018AC_F77_MAIN\u2019 and\n     \u2018AC_FC_MAIN\u2019 macros detect whether it is _possible_ to utilize such\n     an alternate main function, and defines \u2018F77_MAIN\u2019 and \u2018FC_MAIN\u2019 to\n     the name of the function.  (If no alternate main function name is\n     found, \u2018F77_MAIN\u2019 and \u2018FC_MAIN\u2019 are simply defined to \u2018main\u2019.)\n\n     Thus, when calling Fortran routines from C that perform things like\n     I/O, one should use this macro and declare the \"main\" function like\n     so:\n\n          #ifdef __cplusplus\n            extern \"C\"\n          #endif\n          int F77_MAIN (int argc, char *argv[]);\n\n     (Again, replace \u2018F77\u2019 with \u2018FC\u2019 for Fortran instead of Fortran 77.)\n\n     The result of this macro is cached in the \u2018ac_cv_f77_main\u2019 or\n     \u2018ac_cv_fc_main\u2019 variable, respectively.\n", "config"], "AC_FC_MAIN": [" -- Macro: AC_F77_MAIN\n -- Macro: AC_FC_MAIN\n     As discussed above, many Fortran libraries allow you to provide an\n     entry point called (say) \u2018MAIN__\u2019 instead of the usual \u2018main\u2019,\n     which is then called by a \u2018main\u2019 function in the Fortran libraries\n     that initializes things like Fortran I/O.  The \u2018AC_F77_MAIN\u2019 and\n     \u2018AC_FC_MAIN\u2019 macros detect whether it is _possible_ to utilize such\n     an alternate main function, and defines \u2018F77_MAIN\u2019 and \u2018FC_MAIN\u2019 to\n     the name of the function.  (If no alternate main function name is\n     found, \u2018F77_MAIN\u2019 and \u2018FC_MAIN\u2019 are simply defined to \u2018main\u2019.)\n\n     Thus, when calling Fortran routines from C that perform things like\n     I/O, one should use this macro and declare the \"main\" function like\n     so:\n\n          #ifdef __cplusplus\n            extern \"C\"\n          #endif\n          int F77_MAIN (int argc, char *argv[]);\n\n     (Again, replace \u2018F77\u2019 with \u2018FC\u2019 for Fortran instead of Fortran 77.)\n\n     The result of this macro is cached in the \u2018ac_cv_f77_main\u2019 or\n     \u2018ac_cv_fc_main\u2019 variable, respectively.\n", "config"], "AC_F77_WRAPPERS": [" -- Macro: AC_F77_WRAPPERS\n -- Macro: AC_FC_WRAPPERS\n     Defines C macros \u2018F77_FUNC (name, NAME)\u2019, \u2018FC_FUNC (name, NAME)\u2019,\n     \u2018F77_FUNC_(name, NAME)\u2019, and \u2018FC_FUNC_(name, NAME)\u2019 to properly\n     mangle the names of C/C++ identifiers, and identifiers with\n     underscores, respectively, so that they match the name-mangling\n     scheme used by the Fortran compiler.\n\n     Fortran is case-insensitive, and in order to achieve this the\n     Fortran compiler converts all identifiers into a canonical case and\n     format.  To call a Fortran subroutine from C or to write a C\n     function that is callable from Fortran, the C program must\n     explicitly use identifiers in the format expected by the Fortran\n     compiler.  In order to do this, one simply wraps all C identifiers\n     in one of the macros provided by \u2018AC_F77_WRAPPERS\u2019 or\n     \u2018AC_FC_WRAPPERS\u2019.  For example, suppose you have the following\n     Fortran 77 subroutine:\n\n                subroutine foobar (x, y)\n                double precision x, y\n                y = 3.14159 * x\n                return\n                end\n\n     You would then declare its prototype in C or C++ as:\n\n          #define FOOBAR_F77 F77_FUNC (foobar, FOOBAR)\n          #ifdef __cplusplus\n          extern \"C\"  /* prevent C++ name mangling */\n          #endif\n          void FOOBAR_F77 (double *x, double *y);\n\n     Note that we pass both the lowercase and uppercase versions of the\n     function name to \u2018F77_FUNC\u2019 so that it can select the right one.\n     Note also that all parameters to Fortran 77 routines are passed as\n     pointers (*note (automake)Mixing Fortran 77 With C and C++::).\n\n     (Replace \u2018F77\u2019 with \u2018FC\u2019 for Fortran instead of Fortran 77.)\n\n     Although Autoconf tries to be intelligent about detecting the\n     name-mangling scheme of the Fortran compiler, there may be Fortran\n     compilers that it doesn\u2019t support yet.  In this case, the above\n     code generates a compile-time error, but some other behavior (e.g.,\n     disabling Fortran-related features) can be induced by checking\n     whether \u2018F77_FUNC\u2019 or \u2018FC_FUNC\u2019 is defined.\n\n     Now, to call that routine from a C program, we would do something\n     like:\n\n          {\n              double x = 2.7183, y;\n              FOOBAR_F77 (&x, &y);\n          }\n\n     If the Fortran identifier contains an underscore (e.g., \u2018foo_bar\u2019),\n     you should use \u2018F77_FUNC_\u2019 or \u2018FC_FUNC_\u2019 instead of \u2018F77_FUNC\u2019 or\n     \u2018FC_FUNC\u2019 (with the same arguments).  This is because some Fortran\n     compilers mangle names differently if they contain an underscore.\n\n     The name mangling scheme is encoded in the \u2018ac_cv_f77_mangling\u2019 or\n     \u2018ac_cv_fc_mangling\u2019 cache variable, respectively, and also used for\n     the \u2018AC_F77_FUNC\u2019 and \u2018AC_FC_FUNC\u2019 macros described below.\n", "config"], "AC_FC_WRAPPERS": [" -- Macro: AC_F77_WRAPPERS\n -- Macro: AC_FC_WRAPPERS\n     Defines C macros \u2018F77_FUNC (name, NAME)\u2019, \u2018FC_FUNC (name, NAME)\u2019,\n     \u2018F77_FUNC_(name, NAME)\u2019, and \u2018FC_FUNC_(name, NAME)\u2019 to properly\n     mangle the names of C/C++ identifiers, and identifiers with\n     underscores, respectively, so that they match the name-mangling\n     scheme used by the Fortran compiler.\n\n     Fortran is case-insensitive, and in order to achieve this the\n     Fortran compiler converts all identifiers into a canonical case and\n     format.  To call a Fortran subroutine from C or to write a C\n     function that is callable from Fortran, the C program must\n     explicitly use identifiers in the format expected by the Fortran\n     compiler.  In order to do this, one simply wraps all C identifiers\n     in one of the macros provided by \u2018AC_F77_WRAPPERS\u2019 or\n     \u2018AC_FC_WRAPPERS\u2019.  For example, suppose you have the following\n     Fortran 77 subroutine:\n\n                subroutine foobar (x, y)\n                double precision x, y\n                y = 3.14159 * x\n                return\n                end\n\n     You would then declare its prototype in C or C++ as:\n\n          #define FOOBAR_F77 F77_FUNC (foobar, FOOBAR)\n          #ifdef __cplusplus\n          extern \"C\"  /* prevent C++ name mangling */\n          #endif\n          void FOOBAR_F77 (double *x, double *y);\n\n     Note that we pass both the lowercase and uppercase versions of the\n     function name to \u2018F77_FUNC\u2019 so that it can select the right one.\n     Note also that all parameters to Fortran 77 routines are passed as\n     pointers (*note (automake)Mixing Fortran 77 With C and C++::).\n\n     (Replace \u2018F77\u2019 with \u2018FC\u2019 for Fortran instead of Fortran 77.)\n\n     Although Autoconf tries to be intelligent about detecting the\n     name-mangling scheme of the Fortran compiler, there may be Fortran\n     compilers that it doesn\u2019t support yet.  In this case, the above\n     code generates a compile-time error, but some other behavior (e.g.,\n     disabling Fortran-related features) can be induced by checking\n     whether \u2018F77_FUNC\u2019 or \u2018FC_FUNC\u2019 is defined.\n\n     Now, to call that routine from a C program, we would do something\n     like:\n\n          {\n              double x = 2.7183, y;\n              FOOBAR_F77 (&x, &y);\n          }\n\n     If the Fortran identifier contains an underscore (e.g., \u2018foo_bar\u2019),\n     you should use \u2018F77_FUNC_\u2019 or \u2018FC_FUNC_\u2019 instead of \u2018F77_FUNC\u2019 or\n     \u2018FC_FUNC\u2019 (with the same arguments).  This is because some Fortran\n     compilers mangle names differently if they contain an underscore.\n\n     The name mangling scheme is encoded in the \u2018ac_cv_f77_mangling\u2019 or\n     \u2018ac_cv_fc_mangling\u2019 cache variable, respectively, and also used for\n     the \u2018AC_F77_FUNC\u2019 and \u2018AC_FC_FUNC\u2019 macros described below.\n", "config"], "AC_F77_FUNC": [" -- Macro: AC_F77_FUNC (NAME, [SHELLVAR])\n -- Macro: AC_FC_FUNC (NAME, [SHELLVAR])\n     Given an identifier NAME, set the shell variable SHELLVAR to hold\n     the mangled version NAME according to the rules of the Fortran\n     linker (see also \u2018AC_F77_WRAPPERS\u2019 or \u2018AC_FC_WRAPPERS\u2019).  SHELLVAR\n     is optional; if it is not supplied, the shell variable is simply\n     NAME.  The purpose of this macro is to give the caller a way to\n     access the name-mangling information other than through the C\n     preprocessor as above, for example, to call Fortran routines from\n     some language other than C/C++.\n", "config"], "AC_FC_FUNC": [" -- Macro: AC_F77_FUNC (NAME, [SHELLVAR])\n -- Macro: AC_FC_FUNC (NAME, [SHELLVAR])\n     Given an identifier NAME, set the shell variable SHELLVAR to hold\n     the mangled version NAME according to the rules of the Fortran\n     linker (see also \u2018AC_F77_WRAPPERS\u2019 or \u2018AC_FC_WRAPPERS\u2019).  SHELLVAR\n     is optional; if it is not supplied, the shell variable is simply\n     NAME.  The purpose of this macro is to give the caller a way to\n     access the name-mangling information other than through the C\n     preprocessor as above, for example, to call Fortran routines from\n     some language other than C/C++.\n", "config"], "AC_FC_SRCEXT": ["\u2018AC_FC_SRCEXT\u2019\n     Automake will add the flags computed by \u2018AC_FC_SRCEXT\u2019 to\n     compilation of files with the respective source extension (*note\n     Fortran Compiler Characteristics: (autoconf)Fortran Compiler.).\n", "config"], "AC_FC_PP_SRCEXT": [" -- Macro: AC_FC_PP_SRCEXT (EXT, [ACTION-IF-SUCCESS], [ACTION-IF-FAILURE\n          = \u2018AC_MSG_FAILURE\u2019])\n     By default, the \u2018FC\u2019 macros perform their tests using a \u2018.f\u2019\n     extension for source-code files.  Some compilers, however, only\n     enable newer language features for appropriately named files, e.g.,\n     Fortran 90 features only for \u2018.f90\u2019 files, or preprocessing only\n     with \u2018.F\u2019 files or maybe other upper-case extensions.  On the other\n     hand, some other compilers expect all source files to end in \u2018.f\u2019\n     and require special flags to support other file name extensions.\n     The \u2018AC_FC_SRCEXT\u2019 and \u2018AC_FC_PP_SRCEXT\u2019 macros deal with these\n     issues.\n\n     The \u2018AC_FC_SRCEXT\u2019 macro tries to get the \u2018FC\u2019 compiler to accept\n     files ending with the extension \u2018.EXT\u2019 (i.e., EXT does _not_\n     contain the dot).  If any special compiler flags are needed for\n     this, it stores them in the output variable \u2018FCFLAGS_EXT\u2019.  This\n     extension and these flags are then used for all subsequent \u2018FC\u2019\n     tests (until \u2018AC_FC_SRCEXT\u2019 or \u2018AC_FC_PP_SRCEXT\u2019 is called another\n     time).\n\n     For example, you would use \u2018AC_FC_SRCEXT(f90)\u2019 to employ the \u2018.f90\u2019\n     extension in future tests, and it would set the \u2018FCFLAGS_f90\u2019\n     output variable with any extra flags that are needed to compile\n     such files.\n\n     Similarly, the \u2018AC_FC_PP_SRCEXT\u2019 macro tries to get the \u2018FC\u2019\n     compiler to preprocess and compile files with the extension \u2018.EXT\u2019.\n     When both \u2018fpp\u2019 and \u2018cpp\u2019 style preprocessing are provided, the\n     former is preferred, as the latter may treat continuation lines,\n     \u2018//\u2019 tokens, and white space differently from what some Fortran\n     dialects expect.  Conversely, if you do not want files to be\n     preprocessed, use only lower-case characters in the file name\n     extension.  Like with \u2018AC_FC_SRCEXT(f90)\u2019, any needed flags are\n     stored in the \u2018FCFLAGS_EXT\u2019 variable.\n\n     The \u2018FCFLAGS_EXT\u2019 flags can _not_ be simply absorbed into\n     \u2018FCFLAGS\u2019, for two reasons based on the limitations of some\n     compilers.  First, only one \u2018FCFLAGS_EXT\u2019 can be used at a time, so\n     files with different extensions must be compiled separately.\n     Second, \u2018FCFLAGS_EXT\u2019 must appear _immediately_ before the\n     source-code file name when compiling.  So, continuing the example\n     above, you might compile a \u2018foo.f90\u2019 file in your makefile with the\n     command:\n\n          foo.o: foo.f90\n                 $(FC) -c $(FCFLAGS) $(FCFLAGS_f90) '$(srcdir)/foo.f90'\n\n     If \u2018AC_FC_SRCEXT\u2019 or \u2018AC_FC_PP_SRCEXT\u2019 succeeds in compiling files\n     with the EXT extension, it calls ACTION-IF-SUCCESS (defaults to\n     nothing).  If it fails, and cannot find a way to make the \u2018FC\u2019\n     compiler accept such files, it calls ACTION-IF-FAILURE (defaults to\n     exiting with an error message).\n\n     The \u2018AC_FC_SRCEXT\u2019 and \u2018AC_FC_PP_SRCEXT\u2019 macros cache their results\n     in \u2018ac_cv_fc_srcext_EXT\u2019 and \u2018ac_cv_fc_pp_srcext_EXT\u2019 variables,\n     respectively.\n", "config"], "AC_FC_PP_DEFINE": [" -- Macro: AC_FC_PP_DEFINE ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =\n          \u2018AC_MSG_FAILURE\u2019])\n\n     Find a flag to specify defines for preprocessed Fortran.  Not all\n     Fortran compilers use \u2018-D\u2019.  Substitute \u2018FC_DEFINE\u2019 with the result\n     and call ACTION-IF-SUCCESS (defaults to nothing) if successful, and\n     ACTION-IF-FAILURE (defaults to failing with an error message) if\n     not.\n\n     This macro calls \u2018AC_FC_PP_SRCEXT([F])\u2019 in order to learn how to\n     preprocess a \u2018conftest.F\u2019 file, but restores a previously used\n     Fortran source file extension afterwards again.\n\n     The result of this test is cached in the \u2018ac_cv_fc_pp_define\u2019\n     variable.\n", "config"], "AC_FC_FREEFORM": [" -- Macro: AC_FC_FREEFORM ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =\n          \u2018AC_MSG_FAILURE\u2019])\n\n     Try to ensure that the Fortran compiler (\u2018$FC\u2019) allows free-format\n     source code (as opposed to the older fixed-format style from\n     Fortran 77).  If necessary, it may add some additional flags to\n     \u2018FCFLAGS\u2019.\n\n     This macro is most important if you are using the default \u2018.f\u2019\n     extension, since many compilers interpret this extension as\n     indicating fixed-format source unless an additional flag is\n     supplied.  If you specify a different extension with\n     \u2018AC_FC_SRCEXT\u2019, such as \u2018.f90\u2019, then \u2018AC_FC_FREEFORM\u2019 ordinarily\n     succeeds without modifying \u2018FCFLAGS\u2019.  For extensions which the\n     compiler does not know about, the flag set by the \u2018AC_FC_SRCEXT\u2019\n     macro might let the compiler assume Fortran 77 by default, however.\n\n     If \u2018AC_FC_FREEFORM\u2019 succeeds in compiling free-form source, it\n     calls ACTION-IF-SUCCESS (defaults to nothing).  If it fails, it\n     calls ACTION-IF-FAILURE (defaults to exiting with an error\n     message).\n\n     The result of this test, or \u2018none\u2019 or \u2018unknown\u2019, is cached in the\n     \u2018ac_cv_fc_freeform\u2019 variable.\n", "config"], "AC_FC_FIXEDFORM": [" -- Macro: AC_FC_FIXEDFORM ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =\n          \u2018AC_MSG_FAILURE\u2019])\n\n     Try to ensure that the Fortran compiler (\u2018$FC\u2019) allows the old\n     fixed-format source code (as opposed to free-format style).  If\n     necessary, it may add some additional flags to \u2018FCFLAGS\u2019.\n\n     This macro is needed for some compilers alias names like \u2018xlf95\u2019\n     which assume free-form source code by default, and in case you want\n     to use fixed-form source with an extension like \u2018.f90\u2019 which many\n     compilers interpret as free-form by default.  If you specify a\n     different extension with \u2018AC_FC_SRCEXT\u2019, such as \u2018.f\u2019, then\n     \u2018AC_FC_FIXEDFORM\u2019 ordinarily succeeds without modifying \u2018FCFLAGS\u2019.\n\n     If \u2018AC_FC_FIXEDFORM\u2019 succeeds in compiling fixed-form source, it\n     calls ACTION-IF-SUCCESS (defaults to nothing).  If it fails, it\n     calls ACTION-IF-FAILURE (defaults to exiting with an error\n     message).\n\n     The result of this test, or \u2018none\u2019 or \u2018unknown\u2019, is cached in the\n     \u2018ac_cv_fc_fixedform\u2019 variable.\n", "config"], "AC_FC_LINE_LENGTH": [" -- Macro: AC_FC_LINE_LENGTH ([LENGTH], [ACTION-IF-SUCCESS],\n          [ACTION-IF-FAILURE = \u2018AC_MSG_FAILURE\u2019])\n\n     Try to ensure that the Fortran compiler (\u2018$FC\u2019) accepts long source\n     code lines.  The LENGTH argument may be given as 80, 132, or\n     unlimited, and defaults to 132.  Note that line lengths above 250\n     columns are not portable, and some compilers do not accept more\n     than 132 columns at least for fixed format source.  If necessary,\n     it may add some additional flags to \u2018FCFLAGS\u2019.\n\n     If \u2018AC_FC_LINE_LENGTH\u2019 succeeds in compiling fixed-form source, it\n     calls ACTION-IF-SUCCESS (defaults to nothing).  If it fails, it\n     calls ACTION-IF-FAILURE (defaults to exiting with an error\n     message).\n\n     The result of this test, or \u2018none\u2019 or \u2018unknown\u2019, is cached in the\n     \u2018ac_cv_fc_line_length\u2019 variable.\n", "config"], "AC_FC_CHECK_BOUNDS": [" -- Macro: AC_FC_CHECK_BOUNDS ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =\n          \u2018AC_MSG_FAILURE\u2019])\n\n     The \u2018AC_FC_CHECK_BOUNDS\u2019 macro tries to enable array bounds\n     checking in the Fortran compiler.  If successful, the\n     ACTION-IF-SUCCESS is called and any needed flags are added to\n     \u2018FCFLAGS\u2019.  Otherwise, ACTION-IF-FAILURE is called, which defaults\n     to failing with an error message.  The macro currently requires\n     Fortran 90 or a newer dialect.\n\n     The result of the macro is cached in the \u2018ac_cv_fc_check_bounds\u2019\n     variable.\n", "config"], "AC_F77_IMPLICIT_NONE": [" -- Macro: AC_F77_IMPLICIT_NONE ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE\n          = \u2018AC_MSG_FAILURE\u2019])", "config"], "AC_FC_IMPLICIT_NONE": [" -- Macro: AC_FC_IMPLICIT_NONE ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE\n          = \u2018AC_MSG_FAILURE\u2019])\n\n     Try to disallow implicit declarations in the Fortran compiler.  If\n     successful, ACTION-IF-SUCCESS is called and any needed flags are\n     added to \u2018FFLAGS\u2019 or \u2018FCFLAGS\u2019, respectively.  Otherwise,\n     ACTION-IF-FAILURE is called, which defaults to failing with an\n     error message.\n\n     The result of these macros are cached in the\n     \u2018ac_cv_f77_implicit_none\u2019 and \u2018ac_cv_fc_implicit_none\u2019 variables,\n     respectively.\n", "config"], "AC_FC_MODULE_EXTENSION": [" -- Macro: AC_FC_MODULE_EXTENSION\n\n     Find the Fortran 90 module file name extension.  Most Fortran 90\n     compilers store module information in files separate from the\n     object files.  The module files are usually named after the name of\n     the module rather than the source file name, with characters\n     possibly turned to upper case, plus an extension, often \u2018.mod\u2019.\n\n     Not all compilers use module files at all, or by default.  The Cray\n     Fortran compiler requires \u2018-e m\u2019 in order to store and search\n     module information in \u2018.mod\u2019 files rather than in object files.\n     Likewise, the Fujitsu Fortran compilers uses the \u2018-Am\u2019 option to\n     indicate how module information is stored.\n\n     The \u2018AC_FC_MODULE_EXTENSION\u2019 macro computes the module extension\n     without the leading dot, and stores that in the \u2018FC_MODEXT\u2019\n     variable.  If the compiler does not produce module files, or the\n     extension cannot be determined, \u2018FC_MODEXT\u2019 is empty.  Typically,\n     the result of this macro may be used in cleanup \u2018make\u2019 rules as\n     follows:\n\n          clean-modules:\n                  -test -z \"$(FC_MODEXT)\" || rm -f *.$(FC_MODEXT)\n\n     The extension, or \u2018unknown\u2019, is cached in the \u2018ac_cv_fc_module_ext\u2019\n     variable.\n", "config"], "AC_FC_MODULE_FLAG": [" -- Macro: AC_FC_MODULE_FLAG ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =\n          \u2018AC_MSG_FAILURE\u2019])\n\n     Find the compiler flag to include Fortran 90 module information\n     from another directory, and store that in the \u2018FC_MODINC\u2019 variable.\n     Call ACTION-IF-SUCCESS (defaults to nothing) if successful, and set\n     \u2018FC_MODINC\u2019 to empty and call ACTION-IF-FAILURE (defaults to\n     exiting with an error message) if not.\n\n     Most Fortran 90 compilers provide a way to specify module\n     directories.  Some have separate flags for the directory to write\n     module files to, and directories to search them in, whereas others\n     only allow writing to the current directory or to the first\n     directory specified in the include path.  Further, with some\n     compilers, the module search path and the preprocessor search path\n     can only be modified with the same flag.  Thus, for portability,\n     write module files to the current directory only and list that as\n     first directory in the search path.\n\n     There may be no whitespace between \u2018FC_MODINC\u2019 and the following\n     directory name, but \u2018FC_MODINC\u2019 may contain trailing white space.\n     For example, if you use Automake and would like to search \u2018../lib\u2019\n     for module files, you can use the following:\n\n          AM_FCFLAGS = $(FC_MODINC). $(FC_MODINC)../lib\n\n     Inside \u2018configure\u2019 tests, you can use:\n\n          if test -n \"$FC_MODINC\"; then\n            FCFLAGS=\"$FCFLAGS $FC_MODINC. $FC_MODINC../lib\"\n          fi\n\n     The flag is cached in the \u2018ac_cv_fc_module_flag\u2019 variable.  The\n     substituted value of \u2018FC_MODINC\u2019 may refer to the \u2018ac_empty\u2019 dummy\n     placeholder empty variable, to avoid losing the significant\n     trailing whitespace in a \u2018Makefile\u2019.\n", "config"], "AC_FC_MODULE_OUTPUT_FLAG": [" -- Macro: AC_FC_MODULE_OUTPUT_FLAG ([ACTION-IF-SUCCESS],\n          [ACTION-IF-FAILURE = \u2018AC_MSG_FAILURE\u2019])\n\n     Find the compiler flag to write Fortran 90 module information to\n     another directory, and store that in the \u2018FC_MODOUT\u2019 variable.\n     Call ACTION-IF-SUCCESS (defaults to nothing) if successful, and set\n     \u2018FC_MODOUT\u2019 to empty and call ACTION-IF-FAILURE (defaults to\n     exiting with an error message) if not.\n\n     Not all Fortran 90 compilers write module files, and of those that\n     do, not all allow writing to a directory other than the current\n     one, nor do all have separate flags for writing and reading; see\n     the description of \u2018AC_FC_MODULE_FLAG\u2019 above.  If you need to be\n     able to write to another directory, for maximum portability use\n     \u2018FC_MODOUT\u2019 before any \u2018FC_MODINC\u2019 and include both the current\n     directory and the one you write to in the search path:\n\n          AM_FCFLAGS = $(FC_MODOUT)../mod $(FC_MODINC)../mod $(FC_MODINC). ...\n\n     The flag is cached in the \u2018ac_cv_fc_module_output_flag\u2019 variable.\n     The substituted value of \u2018FC_MODOUT\u2019 may refer to the \u2018ac_empty\u2019\n     dummy placeholder empty variable, to avoid losing the significant\n     trailing whitespace in a \u2018Makefile\u2019.\n\n\u001f", "config"], "AC_PROG_GO": [" -- Macro: AC_PROG_GO ([COMPILER-SEARCH-LIST])\n     Find the Go compiler to use.  Check whether the environment\n     variable \u2018GOC\u2019 is set; if so, then set output variable \u2018GOC\u2019 to its\n     value.\n\n     Otherwise, if the macro is invoked without an argument, then search\n     for a Go compiler named \u2018gccgo\u2019.  If it is not found, then as a\n     last resort set \u2018GOC\u2019 to \u2018gccgo\u2019.\n\n     This macro may be invoked with an optional first argument which, if\n     specified, must be a blank-separated list of Go compilers to search\n     for.\n\n     If output variable \u2018GOFLAGS\u2019 was not already set, set it to \u2018-g\n     -O2\u2019.  If your package does not like this default, \u2018GOFLAGS\u2019 may be\n     set before \u2018AC_PROG_GO\u2019.\n\n\u001f", "config"], "AC_PATH_X": [" -- Macro: AC_PATH_X\n     Try to locate the X Window System include files and libraries.  If\n     the user gave the command line options \u2018--x-includes=DIR\u2019 and\n     \u2018--x-libraries=DIR\u2019, use those directories.\n\n     If either or both were not given, get the missing values by running\n     \u2018xmkmf\u2019 (or an executable pointed to by the \u2018XMKMF\u2019 environment\n     variable) on a trivial \u2018Imakefile\u2019 and examining the makefile that\n     it produces.  Setting \u2018XMKMF\u2019 to \u2018false\u2019 disables this method.\n\n     If this method fails to find the X Window System, \u2018configure\u2019 looks\n     for the files in several directories where they often reside.  If\n     either method is successful, set the shell variables \u2018x_includes\u2019\n     and \u2018x_libraries\u2019 to their locations, unless they are in\n     directories the compiler searches by default.\n\n     If both methods fail, or the user gave the command line option\n     \u2018--without-x\u2019, set the shell variable \u2018no_x\u2019 to \u2018yes\u2019; otherwise\n     set it to the empty string.\n", "config"], "AC_PATH_XTRA": [" -- Macro: AC_PATH_XTRA\n     An enhanced version of \u2018AC_PATH_X\u2019.  It adds the C compiler flags\n     that X needs to output variable \u2018X_CFLAGS\u2019, and the X linker flags\n     to \u2018X_LIBS\u2019.  Define \u2018X_DISPLAY_MISSING\u2019 if X is not available.\n\n     This macro also checks for special libraries that some systems need\n     in order to compile X programs.  It adds any that the system needs\n     to output variable \u2018X_EXTRA_LIBS\u2019.  And it checks for special X11R6\n     libraries that need to be linked with before \u2018-lX11\u2019, and adds any\n     found to the output variable \u2018X_PRE_LIBS\u2019.\n", "config"], "AC_SYS_INTERPRETER": [" -- Macro: AC_SYS_INTERPRETER\n     Check whether the system supports starting scripts with a line of\n     the form \u2018#!/bin/sh\u2019 to select the interpreter to use for the\n     script.  After running this macro, shell code in \u2018configure.ac\u2019 can\n     check the shell variable \u2018interpval\u2019; it is set to \u2018yes\u2019 if the\n     system supports \u2018#!\u2019, \u2018no\u2019 if not.\n", "config"], "AC_SYS_LARGEFILE": [" -- Macro: AC_SYS_LARGEFILE\n     Arrange for 64-bit file offsets, known as large-file support\n     (http://www.unix.org/version2/whatsnew/lfs20mar.html).  On some\n     hosts, one must use special compiler options to build programs that\n     can access large files.  Append any such options to the output\n     variable \u2018CC\u2019.  Define \u2018_FILE_OFFSET_BITS\u2019 and \u2018_LARGE_FILES\u2019 if\n     necessary.\n\n     Large-file support can be disabled by configuring with the\n     \u2018--disable-largefile\u2019 option.\n\n     If you use this macro, check that your program works even when\n     \u2018off_t\u2019 is wider than \u2018long int\u2019, since this is common when\n     large-file support is enabled.  For example, it is not correct to\n     print an arbitrary \u2018off_t\u2019 value \u2018X\u2019 with \u2018printf (\"%ld\", (long\n     int) X)\u2019.  Also, when using this macro in concert with\n     \u2018AC_CONFIG_HEADERS\u2019, be sure that \u2018config.h\u2019 is included before any\n     system header.\n\n     The LFS introduced the \u2018fseeko\u2019 and \u2018ftello\u2019 functions to replace\n     their C counterparts \u2018fseek\u2019 and \u2018ftell\u2019 that do not use \u2018off_t\u2019.\n     Take care to use \u2018AC_FUNC_FSEEKO\u2019 to make their prototypes\n     available when using them and large-file support is enabled.\n", "config"], "AC_SYS_LONG_FILE_NAMES": [" -- Macro: AC_SYS_LONG_FILE_NAMES\n     If the system supports file names longer than 14 characters, define\n     \u2018HAVE_LONG_FILE_NAMES\u2019.\n", "config"], "AC_SYS_POSIX_TERMIOS": [" -- Macro: AC_SYS_POSIX_TERMIOS\n     Check to see if the Posix termios headers and functions are\n     available on the system.  If so, set the shell variable\n     \u2018ac_cv_sys_posix_termios\u2019 to \u2018yes\u2019.  If not, set the variable to\n     \u2018no\u2019.\n\n\u001f", "config"], "AC_USE_SYSTEM_EXTENSIONS": [" -- Macro: AC_USE_SYSTEM_EXTENSIONS\n     If possible, enable extensions to C or Posix on hosts that normally\n     disable the extensions, typically due to standards-conformance\n     namespace issues.  This should be called before any macros that run\n     the C compiler.  Also, when using this macro in concert with\n     \u2018AC_CONFIG_HEADERS\u2019, be sure that \u2018config.h\u2019 is included before any\n     system header.\n\n     The following preprocessor macros are defined unconditionally:\n\n     \u2018_ALL_SOURCE\u2019\n          Enable extensions on AIX 3 and Interix.\n     \u2018_DARWIN_C_SOURCE\u2019\n          Enable extensions on macOS.\n     \u2018_GNU_SOURCE\u2019\n          Enable extensions on GNU systems.\n     \u2018_NETBSD_SOURCE\u2019\n          Enable general extensions on NetBSD. Enable NetBSD\n          compatibility extensions on Minix.\n     \u2018_OPENBSD_SOURCE\u2019\n          Enable OpenBSD compatibility extensions on NetBSD. Oddly\n          enough, this does nothing on OpenBSD.\n     \u2018_POSIX_PTHREAD_SEMANTICS\u2019\n          Enable Posix-compatible threading on Solaris.\n     \u2018__STDC_WANT_IEC_60559_ATTRIBS_EXT__\u2019\n          Enable extensions specified by ISO/IEC TS 18661-5:2014.\n     \u2018__STDC_WANT_IEC_60559_BFP_EXT__\u2019\n          Enable extensions specified by ISO/IEC TS 18661-1:2014.\n     \u2018__STDC_WANT_IEC_60559_DFP_EXT__\u2019\n          Enable extensions specified by ISO/IEC TS 18661-2:2015.\n     \u2018__STDC_WANT_IEC_60559_FUNCS_EXT__\u2019\n          Enable extensions specified by ISO/IEC TS 18661-4:2015.\n     \u2018__STDC_WANT_IEC_60559_TYPES_EXT__\u2019\n          Enable extensions specified by ISO/IEC TS 18661-3:2015.\n     \u2018__STDC_WANT_LIB_EXT2__\u2019\n          Enable extensions specified by ISO/IEC TR 24731-2:2010.\n     \u2018__STDC_WANT_MATH_SPEC_FUNCS__\u2019\n          Enable extensions specified by ISO/IEC 24747:2009.\n     \u2018_TANDEM_SOURCE\u2019\n          Enable extensions on HP NonStop systems.\n\n     The following preprocessor macros are defined only when necessary;\n     they enable access to extensions on some operating systems but\n     _disable_ extensions on other operating systems.\n\n     \u2018__EXTENSIONS__\u2019\n          Enable general extensions on Solaris.  This macro is defined\n          only if the headers included by \u2018AC_INCLUDES_DEFAULT\u2019 (*note\n          Default Includes::) work correctly with it defined.\n\n     \u2018_MINIX\u2019\n     \u2018_POSIX_SOURCE\u2019\n     \u2018_POSIX_1_SOURCE\u2019\n          Defined only on MINIX. \u2018_POSIX_SOURCE\u2019 and \u2018_POSIX_1_SOURCE\u2019\n          are needed to enable a number of POSIX features on this OS.\n          \u2018_MINIX\u2019 does not affect the system headers\u2019 behavior; future\n          versions of Autoconf may stop defining it.  Programs that need\n          to recognize Minix should use \u2018AC_CANONICAL_HOST\u2019.\n\n     \u2018_XOPEN_SOURCE\u2019\n          Defined (with value 500) only if needed to make \u2018wchar.h\u2019\n          declare \u2018mbstate_t\u2019.  This is known to be necessary on some\n          versions of HP/UX.\n\n     The C preprocessor macro \u2018__STDC_WANT_DEC_FP__\u2019 is not defined.\n     ISO/IEC TR 24732:2009 was superseded by ISO/IEC TS 18661-2:2015.\n\n     The C preprocessor macro \u2018__STDC_WANT_LIB_EXT1__\u2019 is not defined,\n     as C11 Annex K is problematic.  See: O\u2019Donell C, Sebor M. Field\n     Experience With Annex K\u2014Bounds Checking Interfaces\n     (http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1967.htm).\n\n     The Autoconf macro \u2018AC_USE_SYSTEM_EXTENSIONS\u2019 was introduced in\n     Autoconf 2.60.\n\n\u001f", "config"], "AC_ERLANG_SUBST_ERTS_VER": [" -- Macro: AC_ERLANG_SUBST_ERTS_VER\n     Set the output variable \u2018ERLANG_ERTS_VER\u2019 to the version of the\n     Erlang runtime system (as returned by Erlang\u2019s\n     \u2018erlang:system_info(version)\u2019 function).  The result of this test\n     is cached if caching is enabled when running \u2018configure\u2019.  The\n     \u2018ERLANG_ERTS_VER\u2019 variable is not intended to be used for testing\n     for features of specific ERTS versions, but to be used for\n     substituting the ERTS version in Erlang/OTP release resource files\n     (\u2018.rel\u2019 files), as shown below.\n", "config"], "AC_ERLANG_SUBST_ROOT_DIR": [" -- Macro: AC_ERLANG_SUBST_ROOT_DIR\n     Set the output variable \u2018ERLANG_ROOT_DIR\u2019 to the path to the base\n     directory in which Erlang/OTP is installed (as returned by Erlang\u2019s\n     \u2018code:root_dir/0\u2019 function).  The result of this test is cached if\n     caching is enabled when running \u2018configure\u2019.\n", "config"], "AC_ERLANG_SUBST_LIB_DIR": [" -- Macro: AC_ERLANG_SUBST_LIB_DIR\n     Set the output variable \u2018ERLANG_LIB_DIR\u2019 to the path of the library\n     directory of Erlang/OTP (as returned by Erlang\u2019s \u2018code:lib_dir/0\u2019\n     function), which subdirectories each contain an installed\n     Erlang/OTP library.  The result of this test is cached if caching\n     is enabled when running \u2018configure\u2019.\n", "config"], "AC_ERLANG_CHECK_LIB": [" -- Macro: AC_ERLANG_CHECK_LIB (LIBRARY, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND])\n     Test whether the Erlang/OTP library LIBRARY is installed by calling\n     Erlang\u2019s \u2018code:lib_dir/1\u2019 function.  The result of this test is\n     cached if caching is enabled when running \u2018configure\u2019.\n     ACTION-IF-FOUND is a list of shell commands to run if the library\n     is installed; ACTION-IF-NOT-FOUND is a list of shell commands to\n     run if it is not.  Additionally, if the library is installed, the\n     output variable \u2018ERLANG_LIB_DIR_LIBRARY\u2019 is set to the path to the\n     library installation directory, and the output variable\n     \u2018ERLANG_LIB_VER_LIBRARY\u2019 is set to the version number that is part\n     of the subdirectory name, if it is in the standard form\n     (\u2018LIBRARY-VERSION\u2019).  If the directory name does not have a version\n     part, \u2018ERLANG_LIB_VER_LIBRARY\u2019 is set to the empty string.  If the\n     library is not installed, \u2018ERLANG_LIB_DIR_LIBRARY\u2019 and\n     \u2018ERLANG_LIB_VER_LIBRARY\u2019 are set to \u2018\"not found\"\u2019.  For example, to\n     check if library \u2018stdlib\u2019 is installed:\n\n          AC_ERLANG_CHECK_LIB([stdlib],\n            [echo \"stdlib version \\\"$ERLANG_LIB_VER_stdlib\\\"\"\n             echo \"is installed in \\\"$ERLANG_LIB_DIR_stdlib\\\"\"],\n            [AC_MSG_ERROR([stdlib was not found!])])\n\n     The \u2018ERLANG_LIB_VER_LIBRARY\u2019 variables (set by\n     \u2018AC_ERLANG_CHECK_LIB\u2019) and the \u2018ERLANG_ERTS_VER\u2019 variable (set by\n     \u2018AC_ERLANG_SUBST_ERTS_VER\u2019) are not intended to be used for testing\n     for features of specific versions of libraries or of the Erlang\n     runtime system.  Those variables are intended to be substituted in\n     Erlang release resource files (\u2018.rel\u2019 files).  For instance, to\n     generate a \u2018example.rel\u2019 file for an application depending on the\n     \u2018stdlib\u2019 library, \u2018configure.ac\u2019 could contain:\n\n          AC_ERLANG_SUBST_ERTS_VER\n          AC_ERLANG_CHECK_LIB([stdlib],\n            [],\n            [AC_MSG_ERROR([stdlib was not found!])])\n          AC_CONFIG_FILES([example.rel])\n\n     The \u2018example.rel.in\u2019 file used to generate \u2018example.rel\u2019 should\n     contain:\n\n          {release,\n              {\"@PACKAGE@\", \"@VERSION@\"},\n              {erts, \"@ERLANG_ERTS_VER@\"},\n              [{stdlib, \"@ERLANG_LIB_VER_stdlib@\"},\n               {@PACKAGE@, \"@VERSION@\"}]}.\n", "config"], "AC_ERLANG_SUBST_INSTALL_LIB_DIR": [" -- Macro: AC_ERLANG_SUBST_INSTALL_LIB_DIR\n\n     Set the \u2018ERLANG_INSTALL_LIB_DIR\u2019 output variable to the directory\n     into which every built Erlang library should be installed in a\n     separate subdirectory.  If this variable is not set in the\n     environment when \u2018configure\u2019 runs, its default value is\n     \u2018${libdir}/erlang/lib\u2019.\n", "config"], "AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR": [" -- Macro: AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR (LIBRARY, VERSION)\n\n     Set the \u2018ERLANG_INSTALL_LIB_DIR_LIBRARY\u2019 output variable to the\n     directory into which the built Erlang library LIBRARY version\n     VERSION should be installed.  If this variable is not set in the\n     environment when \u2018configure\u2019 runs, its default value is\n     \u2018$ERLANG_INSTALL_LIB_DIR/LIBRARY-VERSION\u2019, the value of the\n     \u2018ERLANG_INSTALL_LIB_DIR\u2019 variable being set by the\n     \u2018AC_ERLANG_SUBST_INSTALL_LIB_DIR\u2019 macro.\n\n\u001f", "config"], "AC_LANG": [" -- Macro: AC_LANG (LANGUAGE)\n     Do compilation tests using the compiler, preprocessor, and file\n     extensions for the specified LANGUAGE.\n\n     Supported languages are:\n\n     \u2018C\u2019\n          Do compilation tests using \u2018CC\u2019 and \u2018CPP\u2019 and use extension\n          \u2018.c\u2019 for test programs.  Use compilation flags: \u2018CPPFLAGS\u2019\n          with \u2018CPP\u2019, and both \u2018CPPFLAGS\u2019 and \u2018CFLAGS\u2019 with \u2018CC\u2019.\n\n     \u2018C++\u2019\n          Do compilation tests using \u2018CXX\u2019 and \u2018CXXCPP\u2019 and use\n          extension \u2018.C\u2019 for test programs.  Use compilation flags:\n          \u2018CPPFLAGS\u2019 with \u2018CXXCPP\u2019, and both \u2018CPPFLAGS\u2019 and \u2018CXXFLAGS\u2019\n          with \u2018CXX\u2019.\n\n     \u2018Fortran 77\u2019\n          Do compilation tests using \u2018F77\u2019 and use extension \u2018.f\u2019 for\n          test programs.  Use compilation flags: \u2018FFLAGS\u2019.\n\n     \u2018Fortran\u2019\n          Do compilation tests using \u2018FC\u2019 and use extension \u2018.f\u2019 (or\n          whatever has been set by \u2018AC_FC_SRCEXT\u2019) for test programs.\n          Use compilation flags: \u2018FCFLAGS\u2019.\n\n     \u2018Erlang\u2019\n          Compile and execute tests using \u2018ERLC\u2019 and \u2018ERL\u2019 and use\n          extension \u2018.erl\u2019 for test Erlang modules.  Use compilation\n          flags: \u2018ERLCFLAGS\u2019.\n\n     \u2018Objective C\u2019\n          Do compilation tests using \u2018OBJC\u2019 and \u2018OBJCPP\u2019 and use\n          extension \u2018.m\u2019 for test programs.  Use compilation flags:\n          \u2018CPPFLAGS\u2019 with \u2018OBJCPP\u2019, and both \u2018CPPFLAGS\u2019 and \u2018OBJCFLAGS\u2019\n          with \u2018OBJC\u2019.\n\n     \u2018Objective C++\u2019\n          Do compilation tests using \u2018OBJCXX\u2019 and \u2018OBJCXXCPP\u2019 and use\n          extension \u2018.mm\u2019 for test programs.  Use compilation flags:\n          \u2018CPPFLAGS\u2019 with \u2018OBJCXXCPP\u2019, and both \u2018CPPFLAGS\u2019 and\n          \u2018OBJCXXFLAGS\u2019 with \u2018OBJCXX\u2019.\n\n     \u2018Go\u2019\n          Do compilation tests using \u2018GOC\u2019 and use extension \u2018.go\u2019 for\n          test programs.  Use compilation flags \u2018GOFLAGS\u2019.\n", "config"], "AC_LANG_PUSH": [" -- Macro: AC_LANG_PUSH (LANGUAGE)\n     Remember the current language (as set by \u2018AC_LANG\u2019) on a stack, and\n     then select the LANGUAGE.  Use this macro and \u2018AC_LANG_POP\u2019 in\n     macros that need to temporarily switch to a particular language.\n", "config"], "AC_LANG_POP": [" -- Macro: AC_LANG_POP ([LANGUAGE])\n     Select the language that is saved on the top of the stack, as set\n     by \u2018AC_LANG_PUSH\u2019, and remove it from the stack.\n\n     If given, LANGUAGE specifies the language we just _quit_.  It is a\n     good idea to specify it when it\u2019s known (which should be the\n     case...), since Autoconf detects inconsistencies.\n\n          AC_LANG_PUSH([Fortran 77])\n          # Perform some tests on Fortran 77.\n          # ...\n          AC_LANG_POP([Fortran 77])\n", "config"], "AC_LANG_ASSERT": [" -- Macro: AC_LANG_ASSERT (LANGUAGE)\n     Check statically that the current language is LANGUAGE.  You should\n     use this in your language specific macros to avoid that they be\n     called with an inappropriate language.\n\n     This macro runs only at \u2018autoconf\u2019 time, and incurs no cost at\n     \u2018configure\u2019 time.  Sadly enough and because Autoconf is a two layer\n     language (1), the macros \u2018AC_LANG_PUSH\u2019 and \u2018AC_LANG_POP\u2019 cannot be\n     \u201coptimizing\u201d, therefore as much as possible you ought to avoid\n     using them to wrap your code, rather, require from the user to run\n     the macro with a correct current language, and check it with\n     \u2018AC_LANG_ASSERT\u2019.  And anyway, that may help the user understand\n     she is running a Fortran macro while expecting a result about her\n     Fortran 77 compiler...\n", "config"], "AC_REQUIRE_CPP": [" -- Macro: AC_REQUIRE_CPP\n     Ensure that whichever preprocessor would currently be used for\n     tests has been found.  Calls \u2018AC_REQUIRE\u2019 (*note Prerequisite\n     Macros::) with an argument of either \u2018AC_PROG_CPP\u2019 or\n     \u2018AC_PROG_CXXCPP\u2019, depending on which language is current.\n", "config"], "AC_LANG_CONFTEST": [" -- Macro: AC_LANG_CONFTEST (SOURCE)\n     Save the SOURCE text in the current test source file:\n     \u2018conftest.EXTENSION\u2019 where the EXTENSION depends on the current\n     language.  As of Autoconf 2.63b, the source file also contains the\n     results of all of the \u2018AC_DEFINE\u2019 performed so far.\n\n     Note that the SOURCE is evaluated exactly once, like regular\n     Autoconf macro arguments, and therefore (i) you may pass a macro\n     invocation, (ii) if not, be sure to double quote if needed.\n\n     This macro issues a warning during \u2018autoconf\u2019 processing if SOURCE\n     does not include an expansion of the macro\n     \u2018AC_LANG_DEFINES_PROVIDED\u2019 (note that both \u2018AC_LANG_SOURCE\u2019 and\n     \u2018AC_LANG_PROGRAM\u2019 call this macro, and thus avoid the warning).\n\n     This macro is seldom called directly, but is used under the hood by\n     more common macros such as \u2018AC_COMPILE_IFELSE\u2019 and \u2018AC_RUN_IFELSE\u2019.\n", "config"], "AC_LANG_DEFINES_PROVIDED": [" -- Macro: AC_LANG_DEFINES_PROVIDED\n     This macro is called as a witness that the file\n     \u2018conftest.EXTENSION\u2019 appropriate for the current language is\n     complete, including all previously determined results from\n     \u2018AC_DEFINE\u2019.  This macro is seldom called directly, but exists if\n     you have a compelling reason to write a conftest file without using\n     \u2018AC_LANG_SOURCE\u2019, yet still want to avoid a syntax warning from\n     \u2018AC_LANG_CONFTEST\u2019.\n", "config"], "AC_LANG_SOURCE": [" -- Macro: AC_LANG_SOURCE (SOURCE)\n     Expands into the SOURCE, with the definition of all the \u2018AC_DEFINE\u2019\n     performed so far.  This macro includes an expansion of\n     \u2018AC_LANG_DEFINES_PROVIDED\u2019.\n\n     In many cases, you may find it more convenient to use the wrapper\n     \u2018AC_LANG_PROGRAM\u2019.\n", "config"], "AC_LANG_PROGRAM": [" -- Macro: AC_LANG_PROGRAM (PROLOGUE, BODY)\n     Expands into a source file which consists of the PROLOGUE, and then\n     BODY as body of the main function (e.g., \u2018main\u2019 in C). Since it\n     uses \u2018AC_LANG_SOURCE\u2019, the features of the latter are available.\n", "config"], "AC_LANG_CALL": [" -- Macro: AC_LANG_CALL (PROLOGUE, FUNCTION)\n     Expands into a source file which consists of the PROLOGUE, and then\n     a call to the FUNCTION as body of the main function (e.g., \u2018main\u2019\n     in C). Since it uses \u2018AC_LANG_PROGRAM\u2019, the feature of the latter\n     are available.\n\n     This function will probably be replaced in the future by a version\n     which would enable specifying the arguments.  The use of this macro\n     is not encouraged, as it violates strongly the typing system.\n\n     This macro cannot be used for Erlang tests.\n", "config"], "AC_LANG_FUNC_LINK_TRY": [" -- Macro: AC_LANG_FUNC_LINK_TRY (FUNCTION)\n     Expands into a source file which uses the FUNCTION in the body of\n     the main function (e.g., \u2018main\u2019 in C). Since it uses\n     \u2018AC_LANG_PROGRAM\u2019, the features of the latter are available.\n\n     As \u2018AC_LANG_CALL\u2019, this macro is documented only for completeness.\n     It is considered to be severely broken, and in the future will be\n     removed in favor of actual function calls (with properly typed\n     arguments).\n\n     This macro cannot be used for Erlang tests.\n\n\u001f", "config"], "AC_PREPROC_IFELSE": [" -- Macro: AC_PREPROC_IFELSE (INPUT, [ACTION-IF-TRUE],\n          [ACTION-IF-FALSE])\n     Run the preprocessor of the current language (*note Language\n     Choice::) on the INPUT, run the shell commands ACTION-IF-TRUE on\n     success, ACTION-IF-FALSE otherwise.  The INPUT can be made by\n     \u2018AC_LANG_PROGRAM\u2019 and friends.\n\n     This macro uses \u2018CPPFLAGS\u2019, but not \u2018CFLAGS\u2019, because \u2018-g\u2019, \u2018-O\u2019,\n     etc. are not valid options to many C preprocessors.\n\n     It is customary to report unexpected failures with\n     \u2018AC_MSG_FAILURE\u2019.  If needed, ACTION-IF-TRUE can further access the\n     preprocessed output in the file \u2018conftest.i\u2019.\n", "config"], "AC_EGREP_HEADER": [" -- Macro: AC_EGREP_HEADER (PATTERN, HEADER-FILE, ACTION-IF-FOUND,\n          [ACTION-IF-NOT-FOUND])\n     If the output of running the preprocessor on the system header file\n     HEADER-FILE matches the extended regular expression PATTERN,\n     execute shell commands ACTION-IF-FOUND, otherwise execute\n     ACTION-IF-NOT-FOUND.\n\n     See below for some problems involving this macro.\n", "config"], "AC_EGREP_CPP": [" -- Macro: AC_EGREP_CPP (PATTERN, PROGRAM, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND])\n     PROGRAM is the text of a C or C++ program, on which shell variable,\n     back quote, and backslash substitutions are performed.  If the\n     output of running the preprocessor on PROGRAM matches the extended\n     regular expression PATTERN, execute shell commands ACTION-IF-FOUND,\n     otherwise execute ACTION-IF-NOT-FOUND.\n\n     See below for some problems involving this macro.\n", "config"], "AC_COMPILE_IFELSE": [" -- Macro: AC_COMPILE_IFELSE (INPUT, [ACTION-IF-TRUE],\n          [ACTION-IF-FALSE])\n     Run the compiler and compilation flags of the current language\n     (*note Language Choice::) on the INPUT, run the shell commands\n     ACTION-IF-TRUE on success, ACTION-IF-FALSE otherwise.  The INPUT\n     can be made by \u2018AC_LANG_PROGRAM\u2019 and friends.\n\n     It is customary to report unexpected failures with\n     \u2018AC_MSG_FAILURE\u2019.  This macro does not try to link; use\n     \u2018AC_LINK_IFELSE\u2019 if you need to do that (*note Running the\n     Linker::).  If needed, ACTION-IF-TRUE can further access the\n     just-compiled object file \u2018conftest.$OBJEXT\u2019.\n\n     This macro uses \u2018AC_REQUIRE\u2019 for the compiler associated with the\n     current language, which means that if the compiler has not yet been\n     determined, the compiler determination will be made prior to the\n     body of the outermost \u2018AC_DEFUN\u2019 macro that triggered this macro to\n     expand (*note Expanded Before Required::).\n", "config"], "AC_LINK_IFELSE": [" -- Macro: AC_LINK_IFELSE (INPUT, [ACTION-IF-TRUE], [ACTION-IF-FALSE])\n     Run the compiler (and compilation flags) and the linker of the\n     current language (*note Language Choice::) on the INPUT, run the\n     shell commands ACTION-IF-TRUE on success, ACTION-IF-FALSE\n     otherwise.  The INPUT can be made by \u2018AC_LANG_PROGRAM\u2019 and friends.\n     If needed, ACTION-IF-TRUE can further access the just-linked\n     program file \u2018conftest$EXEEXT\u2019.\n\n     \u2018LDFLAGS\u2019 and \u2018LIBS\u2019 are used for linking, in addition to the\n     current compilation flags.\n\n     It is customary to report unexpected failures with\n     \u2018AC_MSG_FAILURE\u2019.  This macro does not try to execute the program;\n     use \u2018AC_RUN_IFELSE\u2019 if you need to do that (*note Runtime::).\n", "config"], "AC_RUN_IFELSE": [" -- Macro: AC_RUN_IFELSE (INPUT, [ACTION-IF-TRUE], [ACTION-IF-FALSE],\n          [ACTION-IF-CROSS-COMPILING = \u2018AC_MSG_FAILURE\u2019])\n     Run the compiler (and compilation flags) and the linker of the\n     current language (*note Language Choice::) on the INPUT, then\n     execute the resulting program.  If the program returns an exit\n     status of 0 when executed, run shell commands ACTION-IF-TRUE.\n     Otherwise, run shell commands ACTION-IF-FALSE.\n\n     The INPUT can be made by \u2018AC_LANG_PROGRAM\u2019 and friends.  \u2018LDFLAGS\u2019\n     and \u2018LIBS\u2019 are used for linking, in addition to the compilation\n     flags of the current language (*note Language Choice::).\n     Additionally, ACTION-IF-TRUE can run \u2018./conftest$EXEEXT\u2019 for\n     further testing.\n\n     In the ACTION-IF-FALSE section, the failing exit status is\n     available in the shell variable \u2018$?\u2019.  This exit status might be\n     that of a failed compilation, or it might be that of a failed\n     program execution.\n\n     If cross-compilation mode is enabled (this is the case if either\n     the compiler being used does not produce executables that run on\n     the system where \u2018configure\u2019 is being run, or if the options\n     \u2018--build\u2019 and \u2018--host\u2019 were both specified and their values are\n     different), then the test program is not run.  If the optional\n     shell commands ACTION-IF-CROSS-COMPILING are given, those commands\n     are run instead; typically these commands provide pessimistic\n     defaults that allow cross-compilation to work even if the guess was\n     wrong.  If the fourth argument is empty or omitted, but\n     cross-compilation is detected, then \u2018configure\u2019 prints an error\n     message and exits.  If you want your package to be useful in a\n     cross-compilation scenario, you _should_ provide a non-empty\n     ACTION-IF-CROSS-COMPILING clause, as well as wrap the\n     \u2018AC_RUN_IFELSE\u2019 compilation inside an \u2018AC_CACHE_CHECK\u2019 (*note\n     Caching Results::) which allows the user to override the\n     pessimistic default if needed.\n\n     It is customary to report unexpected failures with\n     \u2018AC_MSG_FAILURE\u2019.\n", "config"], "AC_DEFINE": [" -- Macro: AC_DEFINE (VARIABLE, VALUE, [DESCRIPTION])\n -- Macro: AC_DEFINE (VARIABLE)\n     Define VARIABLE to VALUE (verbatim), by defining a C preprocessor\n     macro for VARIABLE.  VARIABLE should be a C identifier, optionally\n     suffixed by a parenthesized argument list to define a C\n     preprocessor macro with arguments.  The macro argument list, if\n     present, should be a comma-separated list of C identifiers,\n     possibly terminated by an ellipsis \u2018...\u2019 if C99-or-later syntax is\n     employed.  VARIABLE should not contain comments, white space,\n     trigraphs, backslash-newlines, universal character names, or\n     non-ASCII characters.\n\n     VALUE may contain backslash-escaped newlines, which will be\n     preserved if you use \u2018AC_CONFIG_HEADERS\u2019 but flattened if passed\n     via \u2018@DEFS@\u2019 (with no effect on the compilation, since the\n     preprocessor sees only one line in the first place).  VALUE should\n     not contain raw newlines.  If you are not using\n     \u2018AC_CONFIG_HEADERS\u2019, VALUE should not contain any \u2018#\u2019 characters,\n     as \u2018make\u2019 tends to eat them.  To use a shell variable, use\n     \u2018AC_DEFINE_UNQUOTED\u2019 instead.\n\n     DESCRIPTION is only useful if you are using \u2018AC_CONFIG_HEADERS\u2019.\n     In this case, DESCRIPTION is put into the generated \u2018config.h.in\u2019\n     as the comment before the macro define.  The following example\n     defines the C preprocessor variable \u2018EQUATION\u2019 to be the string\n     constant \u2018\"$a > $b\"\u2019:\n\n          AC_DEFINE([EQUATION], [\"$a > $b\"],\n            [Equation string.])\n\n     If neither VALUE nor DESCRIPTION are given, then VALUE defaults to\n     1 instead of to the empty string.  This is for backwards\n     compatibility with older versions of Autoconf, but this usage is\n     obsolescent and may be withdrawn in future versions of Autoconf.\n\n     If the VARIABLE is a literal string, it is passed to\n     \u2018m4_pattern_allow\u2019 (*note Forbidden Patterns::).\n\n     If multiple \u2018AC_DEFINE\u2019 statements are executed for the same\n     VARIABLE name (not counting any parenthesized argument list), the\n     last one wins.\n", "config"], "AC_DEFINE_UNQUOTED": [" -- Macro: AC_DEFINE_UNQUOTED (VARIABLE, VALUE, [DESCRIPTION])\n -- Macro: AC_DEFINE_UNQUOTED (VARIABLE)\n     Like \u2018AC_DEFINE\u2019, but three shell expansions are performed\u2014once\u2014on\n     VARIABLE and VALUE: variable expansion (\u2018$\u2019), command substitution\n     (\u2018`\u2019), and backslash escaping (\u2018\\\u2019), as if in an unquoted\n     here-document.  Single and double quote characters in the value\n     have no special meaning.  Use this macro instead of \u2018AC_DEFINE\u2019\n     when VARIABLE or VALUE is a shell variable.  Examples:\n\n          AC_DEFINE_UNQUOTED([config_machfile], [\"$machfile\"],\n            [Configuration machine file.])\n          AC_DEFINE_UNQUOTED([GETGROUPS_T], [$ac_cv_type_getgroups],\n            [getgroups return type.])\n          AC_DEFINE_UNQUOTED([$ac_tr_hdr], [1],\n            [Translated header name.])\n", "config"], "AC_SUBST": ["\u2018AC_SUBST\u2019\n     The first argument is automatically defined as a variable in each\n     generated \u2018Makefile.in\u2019, unless \u2018AM_SUBST_NOTMAKE\u2019 is also used for\n     this variable.  *Note Setting Output Variables: (autoconf)Setting\n     Output Variables.\n\n     For every substituted variable VAR, \u2018automake\u2019 will add a line \u2018VAR\n     = VALUE\u2019 to each \u2018Makefile.in\u2019 file.  Many Autoconf macros invoke\n     \u2018AC_SUBST\u2019 to set output variables this way, e.g., \u2018AC_PATH_XTRA\u2019\n     defines \u2018X_CFLAGS\u2019 and \u2018X_LIBS\u2019.  Thus, you can access these\n     variables as \u2018$(X_CFLAGS)\u2019 and \u2018$(X_LIBS)\u2019 in any \u2018Makefile.am\u2019 if\n     \u2018AC_PATH_XTRA\u2019 is called.\n", "config"], "AC_SUBST_FILE": [" -- Macro: AC_SUBST_FILE (VARIABLE)\n     Another way to create an output variable from a shell variable.\n     Make \u2018AC_OUTPUT\u2019 insert (without substitutions) the contents of the\n     file named by shell variable VARIABLE into output files.  This\n     means that \u2018AC_OUTPUT\u2019 replaces instances of \u2018@VARIABLE@\u2019 in output\n     files (such as \u2018Makefile.in\u2019) with the contents of the file that\n     the shell variable VARIABLE names when \u2018AC_OUTPUT\u2019 is called.  Set\n     the variable to \u2018/dev/null\u2019 for cases that do not have a file to\n     insert.  This substitution occurs only when the \u2018@VARIABLE@\u2019 is on\n     a line by itself, optionally surrounded by spaces and tabs.  The\n     substitution replaces the whole line, including the spaces, tabs,\n     and the terminating newline.\n\n     This macro is useful for inserting makefile fragments containing\n     special dependencies or other \u2018make\u2019 directives for particular host\n     or target types into makefiles.  For example, \u2018configure.ac\u2019 could\n     contain:\n\n          AC_SUBST_FILE([host_frag])\n          host_frag=$srcdir/conf/sun4.mh\n\n     and then a \u2018Makefile.in\u2019 could contain:\n\n          @host_frag@\n\n     The string VARIABLE is passed to \u2018m4_pattern_allow\u2019 (*note\n     Forbidden Patterns::).\n", "config"], "AC_ARG_VAR": [" -- Macro: AC_ARG_VAR (VARIABLE, DESCRIPTION)\n     Declare VARIABLE is a precious variable, and include its\n     DESCRIPTION in the variable section of \u2018./configure --help\u2019.\n\n     Being precious means that\n        \u2212 VARIABLE is substituted via \u2018AC_SUBST\u2019.\n\n        \u2212 The value of VARIABLE when \u2018configure\u2019 was launched is saved\n          in the cache, including if it was not specified on the command\n          line but via the environment.  Indeed, while \u2018configure\u2019 can\n          notice the definition of \u2018CC\u2019 in \u2018./configure CC=bizarre-cc\u2019,\n          it is impossible to notice it in \u2018CC=bizarre-cc ./configure\u2019,\n          which, unfortunately, is what most users do.\n\n          We emphasize that it is the _initial_ value of VARIABLE which\n          is saved, not that found during the execution of \u2018configure\u2019.\n          Indeed, specifying \u2018./configure FOO=foo\u2019 and letting\n          \u2018./configure\u2019 guess that \u2018FOO\u2019 is \u2018foo\u2019 can be two different\n          things.\n\n        \u2212 VARIABLE is checked for consistency between two \u2018configure\u2019\n          runs.  For instance:\n\n               $ ./configure --silent --config-cache\n               $ CC=cc ./configure --silent --config-cache\n               configure: error: 'CC' was not set in the previous run\n               configure: error: changes in the environment can compromise \\\n               the build\n               configure: error: run 'make distclean' and/or \\\n               'rm config.cache' and start over\n\n          and similarly if the variable is unset, or if its content is\n          changed.  If the content has white space changes only, then\n          the error is degraded to a warning only, but the old value is\n          reused.\n\n        \u2212 VARIABLE is kept during automatic reconfiguration (*note\n          config.status Invocation::) as if it had been passed as a\n          command line argument, including when no cache is used:\n\n               $ CC=/usr/bin/cc ./configure var=raboof --silent\n               $ ./config.status --recheck\n               running CONFIG_SHELL=/bin/sh /bin/sh ./configure var=raboof \\\n                 CC=/usr/bin/cc  --no-create --no-recursion\n\n\u001f", "config"], "AC_CACHE_VAL": [" -- Macro: AC_CACHE_VAL (CACHE-ID, COMMANDS-TO-SET-IT)\n     Ensure that the results of the check identified by CACHE-ID are\n     available.  If the results of the check were in the cache file that\n     was read, and \u2018configure\u2019 was not given the \u2018--quiet\u2019 or \u2018--silent\u2019\n     option, print a message saying that the result was cached;\n     otherwise, run the shell commands COMMANDS-TO-SET-IT.  If the shell\n     commands are run to determine the value, the value is saved in the\n     cache file just before \u2018configure\u2019 creates its output files.  *Note\n     Cache Variable Names::, for how to choose the name of the CACHE-ID\n     variable.\n\n     The COMMANDS-TO-SET-IT _must have no side effects_ except for\n     setting the variable CACHE-ID, see below.\n", "config"], "AC_CACHE_CHECK": [" -- Macro: AC_CACHE_CHECK (MESSAGE, CACHE-ID, COMMANDS-TO-SET-IT)\n     A wrapper for \u2018AC_CACHE_VAL\u2019 that takes care of printing the\n     messages.  This macro provides a convenient shorthand for the most\n     common way to use these macros.  It calls \u2018AC_MSG_CHECKING\u2019 for\n     MESSAGE, then \u2018AC_CACHE_VAL\u2019 with the CACHE-ID and COMMANDS\n     arguments, and \u2018AC_MSG_RESULT\u2019 with CACHE-ID.\n\n     The COMMANDS-TO-SET-IT _must have no side effects_ except for\n     setting the variable CACHE-ID, see below.\n", "config"], "AC_CACHE_LOAD": [" -- Macro: AC_CACHE_LOAD\n     Loads values from existing cache file, or creates a new cache file\n     if a cache file is not found.  Called automatically from \u2018AC_INIT\u2019.\n", "config"], "AC_CACHE_SAVE": [" -- Macro: AC_CACHE_SAVE\n     Flushes all cached values to the cache file.  Called automatically\n     from \u2018AC_OUTPUT\u2019, but it can be quite useful to call\n     \u2018AC_CACHE_SAVE\u2019 at key points in \u2018configure.ac\u2019.\n", "config"], "AC_MSG_CHECKING": [" -- Macro: AC_MSG_CHECKING (FEATURE-DESCRIPTION)\n     Notify the user that \u2018configure\u2019 is checking for a particular\n     feature.  This macro prints a message that starts with \u2018checking \u2019\n     and ends with \u2018...\u2019 and no newline.  It must be followed by a call\n     to \u2018AC_MSG_RESULT\u2019 to print the result of the check and the\n     newline.  The FEATURE-DESCRIPTION should be something like \u2018whether\n     the Fortran compiler accepts C++ comments\u2019 or \u2018for _Alignof\u2019.\n\n     This macro prints nothing if \u2018configure\u2019 is run with the \u2018--quiet\u2019\n     or \u2018--silent\u2019 option.\n", "config"], "AC_MSG_RESULT": [" -- Macro: AC_MSG_RESULT (RESULT-DESCRIPTION)\n     Notify the user of the results of a check.  RESULT-DESCRIPTION is\n     almost always the value of the cache variable for the check,\n     typically \u2018yes\u2019, \u2018no\u2019, or a file name.  This macro should follow a\n     call to \u2018AC_MSG_CHECKING\u2019, and the RESULT-DESCRIPTION should be the\n     completion of the message printed by the call to \u2018AC_MSG_CHECKING\u2019.\n\n     This macro prints nothing if \u2018configure\u2019 is run with the \u2018--quiet\u2019\n     or \u2018--silent\u2019 option.\n", "config"], "AC_MSG_NOTICE": [" -- Macro: AC_MSG_NOTICE (MESSAGE)\n     Deliver the MESSAGE to the user.  It is useful mainly to print a\n     general description of the overall purpose of a group of feature\n     checks, e.g.,\n\n          AC_MSG_NOTICE([checking if stack overflow is detectable])\n\n     This macro prints nothing if \u2018configure\u2019 is run with the \u2018--quiet\u2019\n     or \u2018--silent\u2019 option.\n", "config"], "AC_MSG_ERROR": [" -- Macro: AC_MSG_ERROR (ERROR-DESCRIPTION, [EXIT-STATUS = \u2018$?/1\u2019])\n     Notify the user of an error that prevents \u2018configure\u2019 from\n     completing.  This macro prints an error message to the standard\n     error output and exits \u2018configure\u2019 with EXIT-STATUS (\u2018$?\u2019 by\n     default, except that \u20180\u2019 is converted to \u20181\u2019).  ERROR-DESCRIPTION\n     should be something like \u2018invalid value $HOME for \\$HOME\u2019.\n\n     The ERROR-DESCRIPTION should start with a lower-case letter, and\n     \u201ccannot\u201d is preferred to \u201ccan\u2019t\u201d.\n", "config"], "AC_MSG_FAILURE": [" -- Macro: AC_MSG_FAILURE (ERROR-DESCRIPTION, [EXIT-STATUS])\n     This \u2018AC_MSG_ERROR\u2019 wrapper notifies the user of an error that\n     prevents \u2018configure\u2019 from completing _and_ that additional details\n     are provided in \u2018config.log\u2019.  This is typically used when abnormal\n     results are found during a compilation.\n", "config"], "AC_MSG_WARN": [" -- Macro: AC_MSG_WARN (PROBLEM-DESCRIPTION)\n     Notify the \u2018configure\u2019 user of a possible problem.  This macro\n     prints the message to the standard error output; \u2018configure\u2019\n     continues running afterward, so macros that call \u2018AC_MSG_WARN\u2019\n     should provide a default (back-up) behavior for the situations they\n     warn about.  PROBLEM-DESCRIPTION should be something like \u2018ln -s\n     seems to make hard links\u2019.\n\n\u001f", "config"], "m4_bpatsubst": [" -- Macro: m4_bpatsubst (STRING, REGEXP, [REPLACEMENT])\n     This macro corresponds to \u2018patsubst\u2019.  The name \u2018m4_patsubst\u2019 is\n     kept for future versions of M4sugar, once GNU M4 2.0 is released\n     and supports extended regular expression syntax.\n", "config"], "m4_bregexp": [" -- Macro: m4_bregexp (STRING, REGEXP, [REPLACEMENT])\n     This macro corresponds to \u2018regexp\u2019.  The name \u2018m4_regexp\u2019 is kept\n     for future versions of M4sugar, once GNU M4 2.0 is released and\n     supports extended regular expression syntax.\n", "config"], "m4_copy": [" -- Macro: m4_copy (SOURCE, DEST)\n -- Macro: m4_copy_force (SOURCE, DEST)\n -- Macro: m4_rename (SOURCE, DEST)\n -- Macro: m4_rename_force (SOURCE, DEST)\n     These macros aren\u2019t directly builtins, but are closely related to\n     \u2018m4_pushdef\u2019 and \u2018m4_defn\u2019.  \u2018m4_copy\u2019 and \u2018m4_rename\u2019 ensure that\n     DEST is undefined, while \u2018m4_copy_force\u2019 and \u2018m4_rename_force\u2019\n     overwrite any existing definition.  All four macros then proceed to\n     copy the entire pushdef stack of definitions of SOURCE over to\n     DEST.  \u2018m4_copy\u2019 and \u2018m4_copy_force\u2019 preserve the source (including\n     in the special case where SOURCE is undefined), while \u2018m4_rename\u2019\n     and \u2018m4_rename_force\u2019 undefine the original macro name (making it\n     an error to rename an undefined SOURCE).\n\n     Note that attempting to invoke a renamed macro might not work,\n     since the macro may have a dependence on helper macros accessed via\n     composition of \u2018$0\u2019 but that were not also renamed; likewise, other\n     macros may have a hard-coded dependence on SOURCE and could break\n     if SOURCE has been deleted.  On the other hand, it is always safe\n     to rename a macro to temporarily move it out of the way, then\n     rename it back later to restore original semantics.\n", "config"], "m4_copy_force": [" -- Macro: m4_copy (SOURCE, DEST)\n -- Macro: m4_copy_force (SOURCE, DEST)\n -- Macro: m4_rename (SOURCE, DEST)\n -- Macro: m4_rename_force (SOURCE, DEST)\n     These macros aren\u2019t directly builtins, but are closely related to\n     \u2018m4_pushdef\u2019 and \u2018m4_defn\u2019.  \u2018m4_copy\u2019 and \u2018m4_rename\u2019 ensure that\n     DEST is undefined, while \u2018m4_copy_force\u2019 and \u2018m4_rename_force\u2019\n     overwrite any existing definition.  All four macros then proceed to\n     copy the entire pushdef stack of definitions of SOURCE over to\n     DEST.  \u2018m4_copy\u2019 and \u2018m4_copy_force\u2019 preserve the source (including\n     in the special case where SOURCE is undefined), while \u2018m4_rename\u2019\n     and \u2018m4_rename_force\u2019 undefine the original macro name (making it\n     an error to rename an undefined SOURCE).\n\n     Note that attempting to invoke a renamed macro might not work,\n     since the macro may have a dependence on helper macros accessed via\n     composition of \u2018$0\u2019 but that were not also renamed; likewise, other\n     macros may have a hard-coded dependence on SOURCE and could break\n     if SOURCE has been deleted.  On the other hand, it is always safe\n     to rename a macro to temporarily move it out of the way, then\n     rename it back later to restore original semantics.\n", "config"], "m4_rename": [" -- Macro: m4_copy (SOURCE, DEST)\n -- Macro: m4_copy_force (SOURCE, DEST)\n -- Macro: m4_rename (SOURCE, DEST)\n -- Macro: m4_rename_force (SOURCE, DEST)\n     These macros aren\u2019t directly builtins, but are closely related to\n     \u2018m4_pushdef\u2019 and \u2018m4_defn\u2019.  \u2018m4_copy\u2019 and \u2018m4_rename\u2019 ensure that\n     DEST is undefined, while \u2018m4_copy_force\u2019 and \u2018m4_rename_force\u2019\n     overwrite any existing definition.  All four macros then proceed to\n     copy the entire pushdef stack of definitions of SOURCE over to\n     DEST.  \u2018m4_copy\u2019 and \u2018m4_copy_force\u2019 preserve the source (including\n     in the special case where SOURCE is undefined), while \u2018m4_rename\u2019\n     and \u2018m4_rename_force\u2019 undefine the original macro name (making it\n     an error to rename an undefined SOURCE).\n\n     Note that attempting to invoke a renamed macro might not work,\n     since the macro may have a dependence on helper macros accessed via\n     composition of \u2018$0\u2019 but that were not also renamed; likewise, other\n     macros may have a hard-coded dependence on SOURCE and could break\n     if SOURCE has been deleted.  On the other hand, it is always safe\n     to rename a macro to temporarily move it out of the way, then\n     rename it back later to restore original semantics.\n", "config"], "m4_rename_force": [" -- Macro: m4_copy (SOURCE, DEST)\n -- Macro: m4_copy_force (SOURCE, DEST)\n -- Macro: m4_rename (SOURCE, DEST)\n -- Macro: m4_rename_force (SOURCE, DEST)\n     These macros aren\u2019t directly builtins, but are closely related to\n     \u2018m4_pushdef\u2019 and \u2018m4_defn\u2019.  \u2018m4_copy\u2019 and \u2018m4_rename\u2019 ensure that\n     DEST is undefined, while \u2018m4_copy_force\u2019 and \u2018m4_rename_force\u2019\n     overwrite any existing definition.  All four macros then proceed to\n     copy the entire pushdef stack of definitions of SOURCE over to\n     DEST.  \u2018m4_copy\u2019 and \u2018m4_copy_force\u2019 preserve the source (including\n     in the special case where SOURCE is undefined), while \u2018m4_rename\u2019\n     and \u2018m4_rename_force\u2019 undefine the original macro name (making it\n     an error to rename an undefined SOURCE).\n\n     Note that attempting to invoke a renamed macro might not work,\n     since the macro may have a dependence on helper macros accessed via\n     composition of \u2018$0\u2019 but that were not also renamed; likewise, other\n     macros may have a hard-coded dependence on SOURCE and could break\n     if SOURCE has been deleted.  On the other hand, it is always safe\n     to rename a macro to temporarily move it out of the way, then\n     rename it back later to restore original semantics.\n", "config"], "m4_defn": [" -- Macro: m4_defn (MACRO...)\n     This macro fails if MACRO is not defined, even when using older\n     versions of M4 that did not warn.  See \u2018m4_undefine\u2019.\n     Unfortunately, in order to support these older versions of M4,\n     there are some situations involving unbalanced quotes where\n     concatenating multiple macros together will work in newer M4 but\n     not in m4sugar; use quadrigraphs to work around this.\n", "config"], "m4_divert": [" -- Macro: m4_divert (DIVERSION)\n     M4sugar relies heavily on diversions, so rather than behaving as a\n     primitive, \u2018m4_divert\u2019 behaves like:\n          m4_divert_pop()m4_divert_push([DIVERSION])\n     *Note Diversion support::, for more details about the use of the\n     diversion stack.  In particular, this implies that DIVERSION should\n     be a named diversion rather than a raw number.  But be aware that\n     it is seldom necessary to explicitly change the diversion stack,\n     and that when done incorrectly, it can lead to syntactically\n     invalid scripts.\n", "config"], "m4_dumpdef": [" -- Macro: m4_dumpdef (NAME...)\n -- Macro: m4_dumpdefs (NAME...)\n     \u2018m4_dumpdef\u2019 is like the M4 builtin, except that this version\n     requires at least one argument, output always goes to standard\n     error rather than the current debug file, no sorting is done on\n     multiple arguments, and an error is issued if any NAME is\n     undefined.  \u2018m4_dumpdefs\u2019 is a convenience macro that calls\n     \u2018m4_dumpdef\u2019 for all of the \u2018m4_pushdef\u2019 stack of definitions,\n     starting with the current, and silently does nothing if NAME is\n     undefined.\n\n     Unfortunately, due to a limitation in M4 1.4.x, any macro defined\n     as a builtin is output as the empty string.  This behavior is\n     rectified by using M4 1.6 or newer.  However, this behavior\n     difference means that \u2018m4_dumpdef\u2019 should only be used while\n     developing m4sugar macros, and never in the final published form of\n     a macro.\n", "config"], "m4_dumpdefs": [" -- Macro: m4_dumpdef (NAME...)\n -- Macro: m4_dumpdefs (NAME...)\n     \u2018m4_dumpdef\u2019 is like the M4 builtin, except that this version\n     requires at least one argument, output always goes to standard\n     error rather than the current debug file, no sorting is done on\n     multiple arguments, and an error is issued if any NAME is\n     undefined.  \u2018m4_dumpdefs\u2019 is a convenience macro that calls\n     \u2018m4_dumpdef\u2019 for all of the \u2018m4_pushdef\u2019 stack of definitions,\n     starting with the current, and silently does nothing if NAME is\n     undefined.\n\n     Unfortunately, due to a limitation in M4 1.4.x, any macro defined\n     as a builtin is output as the empty string.  This behavior is\n     rectified by using M4 1.6 or newer.  However, this behavior\n     difference means that \u2018m4_dumpdef\u2019 should only be used while\n     developing m4sugar macros, and never in the final published form of\n     a macro.\n", "config"], "m4_esyscmd_s": [" -- Macro: m4_esyscmd_s (COMMAND)\n     Like \u2018m4_esyscmd\u2019, this macro expands to the result of running\n     COMMAND in a shell.  The difference is that any trailing newlines\n     are removed, so that the output behaves more like shell command\n     substitution.\n", "config"], "m4_exit": [" -- Macro: m4_exit (EXIT-STATUS)\n     This macro corresponds to \u2018m4exit\u2019.\n", "config"], "m4_if": [" -- Macro: m4_if (COMMENT)\n -- Macro: m4_if (STRING-1, STRING-2, EQUAL, [NOT-EQUAL])\n -- Macro: m4_if (STRING-1, STRING-2, EQUAL-1, STRING-3, STRING-4,\n          EQUAL-2, ..., [NOT-EQUAL])\n     This macro corresponds to \u2018ifelse\u2019.  STRING-1 and STRING-2 are\n     compared literally, so usually one of the two arguments is passed\n     unquoted.  *Note Conditional constructs::, for more conditional\n     idioms.\n", "config"], "m4_include": ["\u2018m4_include\u2019\n     Files included by \u2018configure.ac\u2019 using this macro will be detected\n     by Automake and automatically distributed.  They will also appear\n     as dependencies in \u2018Makefile\u2019 rules.\n\n     \u2018m4_include\u2019 is seldom used by \u2018configure.ac\u2019 authors, but can\n     appear in \u2018aclocal.m4\u2019 when \u2018aclocal\u2019 detects that some required\n     macros come from files local to your package (as opposed to macros\n     installed in a system-wide directory; *note aclocal Invocation::).\n", "config"], "m4_sinclude": [" -- Macro: m4_include (FILE)\n -- Macro: m4_sinclude (FILE)\n     Like the M4 builtins, but warn against multiple inclusions of FILE.\n", "config"], "m4_mkstemp": [" -- Macro: m4_mkstemp (TEMPLATE)\n -- Macro: m4_maketemp (TEMPLATE)\n     Posix requires \u2018maketemp\u2019 to replace the trailing \u2018X\u2019 characters in\n     TEMPLATE with the process id, without regards to the existence of a\n     file by that name, but this a security hole.  When this was pointed\n     out to the Posix folks, they agreed to invent a new macro \u2018mkstemp\u2019\n     that always creates a uniquely named file, but not all versions of\n     GNU M4 support the new macro.  In M4sugar, \u2018m4_maketemp\u2019 and\n     \u2018m4_mkstemp\u2019 are synonyms for each other, and both have the secure\n     semantics regardless of which macro the underlying M4 provides.\n", "config"], "m4_maketemp": [" -- Macro: m4_mkstemp (TEMPLATE)\n -- Macro: m4_maketemp (TEMPLATE)\n     Posix requires \u2018maketemp\u2019 to replace the trailing \u2018X\u2019 characters in\n     TEMPLATE with the process id, without regards to the existence of a\n     file by that name, but this a security hole.  When this was pointed\n     out to the Posix folks, they agreed to invent a new macro \u2018mkstemp\u2019\n     that always creates a uniquely named file, but not all versions of\n     GNU M4 support the new macro.  In M4sugar, \u2018m4_maketemp\u2019 and\n     \u2018m4_mkstemp\u2019 are synonyms for each other, and both have the secure\n     semantics regardless of which macro the underlying M4 provides.\n", "config"], "m4_popdef": [" -- Macro: m4_popdef (MACRO...)\n     This macro fails if MACRO is not defined, even when using older\n     versions of M4 that did not warn.  See \u2018m4_undefine\u2019.\n", "config"], "m4_undefine": [" -- Macro: m4_undefine (MACRO...)\n     This macro fails if MACRO is not defined, even when using older\n     versions of M4 that did not warn.  Use\n\n          m4_ifdef([MACRO], [m4_undefine([MACRO])])\n\n     if you are not sure whether MACRO is defined.\n", "config"], "m4_undivert": [" -- Macro: m4_undivert (DIVERSION...)\n     Unlike the M4 builtin, at least one DIVERSION must be specified.\n     Also, since the M4sugar diversion stack prefers named diversions,\n     the use of \u2018m4_undivert\u2019 to include files is risky.  *Note\n     Diversion support::, for more details about the use of the\n     diversion stack.  But be aware that it is seldom necessary to\n     explicitly change the diversion stack, and that when done\n     incorrectly, it can lead to syntactically invalid scripts.\n", "config"], "m4_wrap": [" -- Macro: m4_wrap (TEXT)\n -- Macro: m4_wrap_lifo (TEXT)\n     These macros correspond to \u2018m4wrap\u2019.  Posix requires arguments of\n     multiple wrap calls to be reprocessed at EOF in the same order as\n     the original calls (first-in, first-out).  GNU M4 versions through\n     1.4.10, however, reprocess them in reverse order (last-in,\n     first-out).  Both orders are useful, therefore, you can rely on\n     \u2018m4_wrap\u2019 to provide FIFO semantics and \u2018m4_wrap_lifo\u2019 for LIFO\n     semantics, regardless of the underlying GNU M4 version.\n\n     Unlike the GNU M4 builtin, these macros only recognize one\n     argument, and avoid token pasting between consecutive invocations.\n     On the other hand, nested calls to \u2018m4_wrap\u2019 from within wrapped\n     text work just as in the builtin.\n\n\u001f", "config"], "m4_wrap_lifo": [" -- Macro: m4_wrap (TEXT)\n -- Macro: m4_wrap_lifo (TEXT)\n     These macros correspond to \u2018m4wrap\u2019.  Posix requires arguments of\n     multiple wrap calls to be reprocessed at EOF in the same order as\n     the original calls (first-in, first-out).  GNU M4 versions through\n     1.4.10, however, reprocess them in reverse order (last-in,\n     first-out).  Both orders are useful, therefore, you can rely on\n     \u2018m4_wrap\u2019 to provide FIFO semantics and \u2018m4_wrap_lifo\u2019 for LIFO\n     semantics, regardless of the underlying GNU M4 version.\n\n     Unlike the GNU M4 builtin, these macros only recognize one\n     argument, and avoid token pasting between consecutive invocations.\n     On the other hand, nested calls to \u2018m4_wrap\u2019 from within wrapped\n     text work just as in the builtin.\n\n\u001f", "config"], "m4_assert": [" -- Macro: m4_assert (EXPRESSION, [EXIT-STATUS = \u20181\u2019])\n     Assert that the arithmetic EXPRESSION evaluates to non-zero.\n     Otherwise, issue a fatal error, and exit \u2018autom4te\u2019 with\n     EXIT-STATUS.\n", "config"], "m4_errprintn": [" -- Macro: m4_errprintn (MESSAGE)\n     Similar to the builtin \u2018m4_errprint\u2019, except that a newline is\n     guaranteed after MESSAGE.\n", "config"], "m4_fatal": [" -- Macro: m4_fatal (MESSAGE)\n     Report a severe error MESSAGE prefixed with the current location,\n     and have \u2018autom4te\u2019 die.\n", "config"], "m4_location": [" -- Macro: m4_location\n     Useful as a prefix in a message line.  Short for:\n          __file__:__line__\n", "config"], "m4_warn": [" -- Macro: m4_warn (CATEGORY, MESSAGE)\n     Report MESSAGE as a warning (or as an error if requested by the\n     user) if warnings of the CATEGORY are turned on.  If the message is\n     emitted, it is prefixed with the current location, and followed by\n     a call trace of all macros defined via \u2018AC_DEFUN\u2019 used to get to\n     the current expansion.\n\n     The CATEGORY must be one of:\n\n     \u2018cross\u2019\n          Warnings about constructs that may interfere with\n          cross-compilation, such as using \u2018AC_RUN_IFELSE\u2019 without a\n          default.\n\n     \u2018gnu\u2019\n          Warnings related to the GNU Coding Standards (*note\n          (standards)Top::).  On by default.\n\n     \u2018obsolete\u2019\n          Warnings about obsolete features.  On by default.\n\n     \u2018override\u2019\n          Warnings about redefinitions of Autoconf internals.\n\n     \u2018portability\u2019\n          Warnings about non-portable constructs.\n\n     \u2018portability-recursive\u2019\n          Warnings about recursive Make variable expansions\n          (\u2018$(foo$(x))\u2019).\n\n     \u2018extra-portability\u2019\n          Extra warnings about non-portable constructs, covering\n          rarely-used tools.\n\n     \u2018syntax\u2019\n          Warnings about questionable syntactic constructs, incorrectly\n          ordered macro calls, typos, etc.  On by default.\n\n     \u2018unsupported\u2019\n          Warnings about unsupported features.  On by default.\n\n     *Hacking Note:* The set of categories is defined by code in\n     \u2018autom4te\u2019, not by M4sugar itself.  Additions should be coordinated\n     with Automake, so that both sets of tools accept the same options.\n\n\u001f", "config"], "m4_cleardivert": [" -- Macro: m4_cleardivert (DIVERSION...)\n     Permanently discard any text that has been diverted into DIVERSION.\n", "config"], "m4_divert_once": [" -- Macro: m4_divert_once (DIVERSION, [CONTENT])\n     Similar to \u2018m4_divert_text\u2019, except that CONTENT is only output to\n     DIVERSION if this is the first time that \u2018m4_divert_once\u2019 has been\n     called with its particular arguments.\n", "config"], "m4_divert_pop": [" -- Macro: m4_divert_pop ([DIVERSION])\n     If provided, check that the current diversion is indeed DIVERSION.\n     Then change to the diversion located earlier on the stack, giving\n     an error if an attempt is made to pop beyond the initial m4sugar\n     diversion of \u2018KILL\u2019.\n", "config"], "m4_divert_push": [" -- Macro: m4_divert_push (DIVERSION)\n     Remember the former diversion on the diversion stack, and output\n     subsequent text into DIVERSION.  M4sugar maintains a diversion\n     stack, and issues an error if there is not a matching pop for every\n     push.\n", "config"], "m4_divert_text": [" -- Macro: m4_divert_text (DIVERSION, [CONTENT])\n     Output CONTENT and a newline into DIVERSION, without affecting the\n     current diversion.  Shorthand for:\n          m4_divert_push([DIVERSION])CONTENT\n          m4_divert_pop([DIVERSION])dnl\n\n     One use of \u2018m4_divert_text\u2019 is to develop two related macros, where\n     macro \u2018MY_A\u2019 does the work, but adjusts what work is performed\n     based on whether the optional macro \u2018MY_B\u2019 has also been expanded.\n     Of course, it is possible to use \u2018AC_BEFORE\u2019 within \u2018MY_A\u2019 to\n     require that \u2018MY_B\u2019 occurs first, if it occurs at all.  But this\n     imposes an ordering restriction on the user; it would be nicer if\n     macros \u2018MY_A\u2019 and \u2018MY_B\u2019 can be invoked in either order.  The trick\n     is to let \u2018MY_B\u2019 leave a breadcrumb in an early diversion, which\n     \u2018MY_A\u2019 can then use to determine whether \u2018MY_B\u2019 has been expanded.\n\n          AC_DEFUN([MY_A],\n          [# various actions\n          if test -n \"$b_was_used\"; then\n            # extra action\n          fi])\n          AC_DEFUN([MY_B],\n          [AC_REQUIRE([MY_A])dnl\n          m4_divert_text([INIT_PREPARE], [b_was_used=true])])\n", "config"], "m4_init": [" -- Macro: m4_init\n     Initialize the M4sugar environment, setting up the default named\n     diversion to be \u2018KILL\u2019.\n\n\u001f", "config"], "m4_bmatch": [" -- Macro: m4_bmatch (STRING, REGEX-1, VALUE-1, [REGEX-2], [VALUE-2],\n          ..., [DEFAULT])\n     The string STRING is repeatedly compared against a series of REGEX\n     arguments; if a match is found, the expansion is the corresponding\n     VALUE, otherwise, the macro moves on to the next REGEX.  If no\n     REGEX match, then the result is the optional DEFAULT, or nothing.\n", "config"], "m4_bpatsubsts": [" -- Macro: m4_bpatsubsts (STRING, REGEX-1, SUBST-1, [REGEX-2],\n          [SUBST-2], ...)\n     The string STRING is altered by REGEX-1 and SUBST-1, as if by:\n          m4_bpatsubst([[STRING]], [REGEX], [SUBST])\n\n     The result of the substitution is then passed through the next set\n     of REGEX and SUBST, and so forth.  An empty SUBST implies deletion\n     of any matched portions in the current string.  Note that this\n     macro over-quotes STRING; this behavior is intentional, so that the\n     result of each step of the recursion remains as a quoted string.\n     However, it means that anchors (\u2018^\u2019 and \u2018$\u2019 in the REGEX will line\n     up with the extra quotations, and not the characters of the\n     original string.  The overquoting is removed after the final\n     substitution.\n", "config"], "m4_case": [" -- Macro: m4_case (STRING, VALUE-1, IF-VALUE-1, [VALUE-2],\n          [IF-VALUE-2], ..., [DEFAULT])\n     Test STRING against multiple VALUE possibilities, resulting in the\n     first IF-VALUE for a match, or in the optional DEFAULT.  This is\n     shorthand for:\n          m4_if([STRING], [VALUE-1], [IF-VALUE-1],\n                [STRING], [VALUE-2], [IF-VALUE-2], ...,\n                [DEFAULT])\n", "config"], "m4_cond": [" -- Macro: m4_cond (TEST-1, VALUE-1, IF-VALUE-1, [TEST-2], [VALUE-2],\n          [IF-VALUE-2], ..., [DEFAULT])\n     This macro was introduced in Autoconf 2.62.  Similar to \u2018m4_if\u2019,\n     except that each TEST is expanded only when it is encountered.\n     This is useful for short-circuiting expensive tests; while \u2018m4_if\u2019\n     requires all its strings to be expanded up front before doing\n     comparisons, \u2018m4_cond\u2019 only expands a TEST when all earlier tests\n     have failed.\n\n     For an example, these two sequences give the same result, but in\n     the case where \u2018$1\u2019 does not contain a backslash, the \u2018m4_cond\u2019\n     version only expands \u2018m4_index\u2019 once, instead of five times, for\n     faster computation if this is a common case for \u2018$1\u2019.  Notice that\n     every third argument is unquoted for \u2018m4_if\u2019, and quoted for\n     \u2018m4_cond\u2019:\n\n          m4_if(m4_index([$1], [\\]), [-1], [$2],\n                m4_eval(m4_index([$1], [\\\\]) >= 0), [1], [$2],\n                m4_eval(m4_index([$1], [\\$]) >= 0), [1], [$2],\n                m4_eval(m4_index([$1], [\\`]) >= 0), [1], [$3],\n                m4_eval(m4_index([$1], [\\\"]) >= 0), [1], [$3],\n                [$2])\n          m4_cond([m4_index([$1], [\\])], [-1], [$2],\n                  [m4_eval(m4_index([$1], [\\\\]) >= 0)], [1], [$2],\n                  [m4_eval(m4_index([$1], [\\$]) >= 0)], [1], [$2],\n                  [m4_eval(m4_index([$1], [\\`]) >= 0)], [1], [$3],\n                  [m4_eval(m4_index([$1], [\\\"]) >= 0)], [1], [$3],\n                  [$2])\n", "config"], "m4_default": [" -- Macro: m4_default (EXPR-1, EXPR-2)\n -- Macro: m4_default_quoted (EXPR-1, EXPR-2)\n -- Macro: m4_default_nblank (EXPR-1, [EXPR-2])\n -- Macro: m4_default_nblank_quoted (EXPR-1, [EXPR-2])\n     If EXPR-1 contains text, use it.  Otherwise, select EXPR-2.\n     \u2018m4_default\u2019 expands the result, while \u2018m4_default_quoted\u2019 does\n     not.  Useful for providing a fixed default if the expression that\n     results in EXPR-1 would otherwise be empty.  The difference between\n     \u2018m4_default\u2019 and \u2018m4_default_nblank\u2019 is whether an argument\n     consisting of just blanks (space, tab, newline) is significant.\n     When using the expanding versions, note that an argument may\n     contain text but still expand to an empty string.\n\n          m4_define([active], [ACTIVE])dnl\n          m4_define([empty], [])dnl\n          m4_define([demo1], [m4_default([$1], [$2])])dnl\n          m4_define([demo2], [m4_default_quoted([$1], [$2])])dnl\n          m4_define([demo3], [m4_default_nblank([$1], [$2])])dnl\n          m4_define([demo4], [m4_default_nblank_quoted([$1], [$2])])dnl\n          demo1([active], [default])\n          \u21d2ACTIVE\n          demo1([], [active])\n          \u21d2ACTIVE\n          demo1([empty], [text])\n          \u21d2\n          -demo1([ ], [active])-\n          \u21d2- -\n          demo2([active], [default])\n          \u21d2active\n          demo2([], [active])\n          \u21d2active\n          demo2([empty], [text])\n          \u21d2empty\n          -demo2([ ], [active])-\n          \u21d2- -\n          demo3([active], [default])\n          \u21d2ACTIVE\n          demo3([], [active])\n          \u21d2ACTIVE\n          demo3([empty], [text])\n          \u21d2\n          -demo3([ ], [active])-\n          \u21d2-ACTIVE-\n          demo4([active], [default])\n          \u21d2active\n          demo4([], [active])\n          \u21d2active\n          demo4([empty], [text])\n          \u21d2empty\n          -demo4([ ], [active])-\n          \u21d2-active-\n", "config"], "m4_default_quoted": [" -- Macro: m4_default (EXPR-1, EXPR-2)\n -- Macro: m4_default_quoted (EXPR-1, EXPR-2)\n -- Macro: m4_default_nblank (EXPR-1, [EXPR-2])\n -- Macro: m4_default_nblank_quoted (EXPR-1, [EXPR-2])\n     If EXPR-1 contains text, use it.  Otherwise, select EXPR-2.\n     \u2018m4_default\u2019 expands the result, while \u2018m4_default_quoted\u2019 does\n     not.  Useful for providing a fixed default if the expression that\n     results in EXPR-1 would otherwise be empty.  The difference between\n     \u2018m4_default\u2019 and \u2018m4_default_nblank\u2019 is whether an argument\n     consisting of just blanks (space, tab, newline) is significant.\n     When using the expanding versions, note that an argument may\n     contain text but still expand to an empty string.\n\n          m4_define([active], [ACTIVE])dnl\n          m4_define([empty], [])dnl\n          m4_define([demo1], [m4_default([$1], [$2])])dnl\n          m4_define([demo2], [m4_default_quoted([$1], [$2])])dnl\n          m4_define([demo3], [m4_default_nblank([$1], [$2])])dnl\n          m4_define([demo4], [m4_default_nblank_quoted([$1], [$2])])dnl\n          demo1([active], [default])\n          \u21d2ACTIVE\n          demo1([], [active])\n          \u21d2ACTIVE\n          demo1([empty], [text])\n          \u21d2\n          -demo1([ ], [active])-\n          \u21d2- -\n          demo2([active], [default])\n          \u21d2active\n          demo2([], [active])\n          \u21d2active\n          demo2([empty], [text])\n          \u21d2empty\n          -demo2([ ], [active])-\n          \u21d2- -\n          demo3([active], [default])\n          \u21d2ACTIVE\n          demo3([], [active])\n          \u21d2ACTIVE\n          demo3([empty], [text])\n          \u21d2\n          -demo3([ ], [active])-\n          \u21d2-ACTIVE-\n          demo4([active], [default])\n          \u21d2active\n          demo4([], [active])\n          \u21d2active\n          demo4([empty], [text])\n          \u21d2empty\n          -demo4([ ], [active])-\n          \u21d2-active-\n", "config"], "m4_default_nblank": [" -- Macro: m4_default (EXPR-1, EXPR-2)\n -- Macro: m4_default_quoted (EXPR-1, EXPR-2)\n -- Macro: m4_default_nblank (EXPR-1, [EXPR-2])\n -- Macro: m4_default_nblank_quoted (EXPR-1, [EXPR-2])\n     If EXPR-1 contains text, use it.  Otherwise, select EXPR-2.\n     \u2018m4_default\u2019 expands the result, while \u2018m4_default_quoted\u2019 does\n     not.  Useful for providing a fixed default if the expression that\n     results in EXPR-1 would otherwise be empty.  The difference between\n     \u2018m4_default\u2019 and \u2018m4_default_nblank\u2019 is whether an argument\n     consisting of just blanks (space, tab, newline) is significant.\n     When using the expanding versions, note that an argument may\n     contain text but still expand to an empty string.\n\n          m4_define([active], [ACTIVE])dnl\n          m4_define([empty], [])dnl\n          m4_define([demo1], [m4_default([$1], [$2])])dnl\n          m4_define([demo2], [m4_default_quoted([$1], [$2])])dnl\n          m4_define([demo3], [m4_default_nblank([$1], [$2])])dnl\n          m4_define([demo4], [m4_default_nblank_quoted([$1], [$2])])dnl\n          demo1([active], [default])\n          \u21d2ACTIVE\n          demo1([], [active])\n          \u21d2ACTIVE\n          demo1([empty], [text])\n          \u21d2\n          -demo1([ ], [active])-\n          \u21d2- -\n          demo2([active], [default])\n          \u21d2active\n          demo2([], [active])\n          \u21d2active\n          demo2([empty], [text])\n          \u21d2empty\n          -demo2([ ], [active])-\n          \u21d2- -\n          demo3([active], [default])\n          \u21d2ACTIVE\n          demo3([], [active])\n          \u21d2ACTIVE\n          demo3([empty], [text])\n          \u21d2\n          -demo3([ ], [active])-\n          \u21d2-ACTIVE-\n          demo4([active], [default])\n          \u21d2active\n          demo4([], [active])\n          \u21d2active\n          demo4([empty], [text])\n          \u21d2empty\n          -demo4([ ], [active])-\n          \u21d2-active-\n", "config"], "m4_default_nblank_quoted": [" -- Macro: m4_default (EXPR-1, EXPR-2)\n -- Macro: m4_default_quoted (EXPR-1, EXPR-2)\n -- Macro: m4_default_nblank (EXPR-1, [EXPR-2])\n -- Macro: m4_default_nblank_quoted (EXPR-1, [EXPR-2])\n     If EXPR-1 contains text, use it.  Otherwise, select EXPR-2.\n     \u2018m4_default\u2019 expands the result, while \u2018m4_default_quoted\u2019 does\n     not.  Useful for providing a fixed default if the expression that\n     results in EXPR-1 would otherwise be empty.  The difference between\n     \u2018m4_default\u2019 and \u2018m4_default_nblank\u2019 is whether an argument\n     consisting of just blanks (space, tab, newline) is significant.\n     When using the expanding versions, note that an argument may\n     contain text but still expand to an empty string.\n\n          m4_define([active], [ACTIVE])dnl\n          m4_define([empty], [])dnl\n          m4_define([demo1], [m4_default([$1], [$2])])dnl\n          m4_define([demo2], [m4_default_quoted([$1], [$2])])dnl\n          m4_define([demo3], [m4_default_nblank([$1], [$2])])dnl\n          m4_define([demo4], [m4_default_nblank_quoted([$1], [$2])])dnl\n          demo1([active], [default])\n          \u21d2ACTIVE\n          demo1([], [active])\n          \u21d2ACTIVE\n          demo1([empty], [text])\n          \u21d2\n          -demo1([ ], [active])-\n          \u21d2- -\n          demo2([active], [default])\n          \u21d2active\n          demo2([], [active])\n          \u21d2active\n          demo2([empty], [text])\n          \u21d2empty\n          -demo2([ ], [active])-\n          \u21d2- -\n          demo3([active], [default])\n          \u21d2ACTIVE\n          demo3([], [active])\n          \u21d2ACTIVE\n          demo3([empty], [text])\n          \u21d2\n          -demo3([ ], [active])-\n          \u21d2-ACTIVE-\n          demo4([active], [default])\n          \u21d2active\n          demo4([], [active])\n          \u21d2active\n          demo4([empty], [text])\n          \u21d2empty\n          -demo4([ ], [active])-\n          \u21d2-active-\n", "config"], "m4_define_default": [" -- Macro: m4_define_default (MACRO, [DEFAULT-DEFINITION])\n     If MACRO does not already have a definition, then define it to\n     DEFAULT-DEFINITION.\n", "config"], "m4_ifblank": [" -- Macro: m4_ifblank (COND, [IF-BLANK], [IF-TEXT])\n -- Macro: m4_ifnblank (COND, [IF-TEXT], [IF-BLANK])\n     If COND is empty or consists only of blanks (space, tab, newline),\n     then expand IF-BLANK; otherwise, expand IF-TEXT.  Two variants\n     exist, in order to make it easier to select the correct logical\n     sense when using only two parameters.  Note that this is more\n     efficient than the equivalent behavior of:\n          m4_ifval(m4_normalize([COND]), IF-TEXT, IF-BLANK)\n", "config"], "m4_ifnblank": [" -- Macro: m4_ifblank (COND, [IF-BLANK], [IF-TEXT])\n -- Macro: m4_ifnblank (COND, [IF-TEXT], [IF-BLANK])\n     If COND is empty or consists only of blanks (space, tab, newline),\n     then expand IF-BLANK; otherwise, expand IF-TEXT.  Two variants\n     exist, in order to make it easier to select the correct logical\n     sense when using only two parameters.  Note that this is more\n     efficient than the equivalent behavior of:\n          m4_ifval(m4_normalize([COND]), IF-TEXT, IF-BLANK)\n", "config"], "m4_ifndef": [" -- Macro: m4_ifndef (MACRO, IF-NOT-DEFINED, [IF-DEFINED])\n     This is shorthand for:\n          m4_ifdef([MACRO], [IF-DEFINED], [IF-NOT-DEFINED])\n", "config"], "m4_ifset": [" -- Macro: m4_ifset (MACRO, [IF-TRUE], [IF-FALSE])\n     If MACRO is undefined, or is defined as the empty string, expand to\n     IF-FALSE.  Otherwise, expands to IF-TRUE.  Similar to:\n          m4_ifval(m4_defn([MACRO]), [IF-TRUE], [IF-FALSE])\n     except that it is not an error if MACRO is undefined.\n", "config"], "m4_ifval": [" -- Macro: m4_ifval (COND, [IF-TRUE], [IF-FALSE])\n     Expands to IF-TRUE if COND is not empty, otherwise to IF-FALSE.\n     This is shorthand for:\n          m4_if([COND], [], [IF-FALSE], [IF-TRUE])\n", "config"], "m4_ifvaln": [" -- Macro: m4_ifvaln (COND, [IF-TRUE], [IF-FALSE])\n     Similar to \u2018m4_ifval\u2019, except guarantee that a newline is present\n     after any non-empty expansion.  Often followed by \u2018dnl\u2019.\n", "config"], "m4_n": [" -- Macro: m4_n (TEXT)\n     Expand to TEXT, and add a newline if TEXT is not empty.  Often\n     followed by \u2018dnl\u2019.\n\n\u001f", "config"], "m4_argn": [" -- Macro: m4_argn (N, [ARG]...)\n     Extracts argument N (larger than 0) from the remaining arguments.\n     If there are too few arguments, the empty string is used.  For any\n     N besides 1, this is more efficient than the similar\n     \u2018m4_car(m4_shiftn([N], [], [ARG...]))\u2019.\n", "config"], "m4_car": [" -- Macro: m4_car (ARG...)\n     Expands to the quoted first ARG.  Can be used with \u2018m4_cdr\u2019 to\n     recursively iterate through a list.  Generally, when using quoted\n     lists of quoted elements, \u2018m4_car\u2019 should be called without any\n     extra quotes.\n", "config"], "m4_cdr": [" -- Macro: m4_cdr (ARG...)\n     Expands to a quoted list of all but the first ARG, or the empty\n     string if there was only one argument.  Generally, when using\n     quoted lists of quoted elements, \u2018m4_cdr\u2019 should be called without\n     any extra quotes.\n\n     For example, this is a simple implementation of \u2018m4_map\u2019; note how\n     each iteration checks for the end of recursion, then merely applies\n     the first argument to the first element of the list, then repeats\n     with the rest of the list.  (The actual implementation in M4sugar\n     is a bit more involved, to gain some speed and share code with\n     \u2018m4_map_sep\u2019, and also to avoid expanding side effects in \u2018$2\u2019\n     twice).\n          m4_define([m4_map], [m4_ifval([$2],\n            [m4_apply([$1], m4_car($2))[]$0([$1], m4_cdr($2))])])dnl\n          m4_map([ m4_eval], [[[1]], [[1+1]], [[10],[16]]])\n          \u21d2 1 2 a\n", "config"], "m4_for": [" -- Macro: m4_for (VAR, FIRST, LAST, [STEP], EXPRESSION)\n     Loop over the numeric values between FIRST and LAST including\n     bounds by increments of STEP.  For each iteration, expand\n     EXPRESSION with the numeric value assigned to VAR.  If STEP is\n     omitted, it defaults to \u20181\u2019 or \u2018-1\u2019 depending on the order of the\n     limits.  If given, STEP has to match this order.  The number of\n     iterations is determined independently from definition of VAR;\n     iteration cannot be short-circuited or lengthened by modifying VAR\n     from within EXPRESSION.\n", "config"], "m4_foreach": [" -- Macro: m4_foreach (VAR, LIST, EXPRESSION)\n     Loop over the comma-separated M4 list LIST, assigning each value to\n     VAR, and expand EXPRESSION.  The following example outputs two\n     lines:\n\n          m4_foreach([myvar], [[foo], [bar, baz]],\n                     [echo myvar\n          ])dnl\n          \u21d2echo foo\n          \u21d2echo bar, baz\n\n     Note that for some forms of EXPRESSION, it may be faster to use\n     \u2018m4_map_args\u2019.\n", "config"], "m4_foreach_w": [" -- Macro: m4_foreach_w (VAR, LIST, EXPRESSION)\n     Loop over the white-space-separated list LIST, assigning each value\n     to VAR, and expand EXPRESSION.  If VAR is only referenced once in\n     EXPRESSION, it is more efficient to use \u2018m4_map_args_w\u2019.\n\n     The deprecated macro \u2018AC_FOREACH\u2019 is an alias of \u2018m4_foreach_w\u2019.\n", "config"], "m4_map": [" -- Macro: m4_map (MACRO, LIST)\n -- Macro: m4_mapall (MACRO, LIST)\n -- Macro: m4_map_sep (MACRO, SEPARATOR, LIST)\n -- Macro: m4_mapall_sep (MACRO, SEPARATOR, LIST)\n     Loop over the comma separated quoted list of argument descriptions\n     in LIST, and invoke MACRO with the arguments.  An argument\n     description is in turn a comma-separated quoted list of quoted\n     elements, suitable for \u2018m4_apply\u2019.  The macros \u2018m4_map\u2019 and\n     \u2018m4_map_sep\u2019 ignore empty argument descriptions, while \u2018m4_mapall\u2019\n     and \u2018m4_mapall_sep\u2019 invoke MACRO with no arguments.  The macros\n     \u2018m4_map_sep\u2019 and \u2018m4_mapall_sep\u2019 additionally expand SEPARATOR\n     between invocations of MACRO.\n\n     Note that SEPARATOR is expanded, unlike in \u2018m4_join\u2019.  When\n     separating output with commas, this means that the map result can\n     be used as a series of arguments, by using a single-quoted comma as\n     SEPARATOR, or as a single string, by using a double-quoted comma.\n\n          m4_map([m4_count], [])\n          \u21d2\n          m4_map([ m4_count], [[],\n                               [[1]],\n                               [[1], [2]]])\n          \u21d2 1 2\n          m4_mapall([ m4_count], [[],\n                                  [[1]],\n                                  [[1], [2]]])\n          \u21d2 0 1 2\n          m4_map_sep([m4_eval], [,], [[[1+2]],\n                                      [[10], [16]]])\n          \u21d23,a\n          m4_map_sep([m4_echo], [,], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [,], [[[a]], [[b]]]))\n          \u21d22\n          m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]]))\n          \u21d21\n", "config"], "m4_mapall": [" -- Macro: m4_map (MACRO, LIST)\n -- Macro: m4_mapall (MACRO, LIST)\n -- Macro: m4_map_sep (MACRO, SEPARATOR, LIST)\n -- Macro: m4_mapall_sep (MACRO, SEPARATOR, LIST)\n     Loop over the comma separated quoted list of argument descriptions\n     in LIST, and invoke MACRO with the arguments.  An argument\n     description is in turn a comma-separated quoted list of quoted\n     elements, suitable for \u2018m4_apply\u2019.  The macros \u2018m4_map\u2019 and\n     \u2018m4_map_sep\u2019 ignore empty argument descriptions, while \u2018m4_mapall\u2019\n     and \u2018m4_mapall_sep\u2019 invoke MACRO with no arguments.  The macros\n     \u2018m4_map_sep\u2019 and \u2018m4_mapall_sep\u2019 additionally expand SEPARATOR\n     between invocations of MACRO.\n\n     Note that SEPARATOR is expanded, unlike in \u2018m4_join\u2019.  When\n     separating output with commas, this means that the map result can\n     be used as a series of arguments, by using a single-quoted comma as\n     SEPARATOR, or as a single string, by using a double-quoted comma.\n\n          m4_map([m4_count], [])\n          \u21d2\n          m4_map([ m4_count], [[],\n                               [[1]],\n                               [[1], [2]]])\n          \u21d2 1 2\n          m4_mapall([ m4_count], [[],\n                                  [[1]],\n                                  [[1], [2]]])\n          \u21d2 0 1 2\n          m4_map_sep([m4_eval], [,], [[[1+2]],\n                                      [[10], [16]]])\n          \u21d23,a\n          m4_map_sep([m4_echo], [,], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [,], [[[a]], [[b]]]))\n          \u21d22\n          m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]]))\n          \u21d21\n", "config"], "m4_map_sep": [" -- Macro: m4_map (MACRO, LIST)\n -- Macro: m4_mapall (MACRO, LIST)\n -- Macro: m4_map_sep (MACRO, SEPARATOR, LIST)\n -- Macro: m4_mapall_sep (MACRO, SEPARATOR, LIST)\n     Loop over the comma separated quoted list of argument descriptions\n     in LIST, and invoke MACRO with the arguments.  An argument\n     description is in turn a comma-separated quoted list of quoted\n     elements, suitable for \u2018m4_apply\u2019.  The macros \u2018m4_map\u2019 and\n     \u2018m4_map_sep\u2019 ignore empty argument descriptions, while \u2018m4_mapall\u2019\n     and \u2018m4_mapall_sep\u2019 invoke MACRO with no arguments.  The macros\n     \u2018m4_map_sep\u2019 and \u2018m4_mapall_sep\u2019 additionally expand SEPARATOR\n     between invocations of MACRO.\n\n     Note that SEPARATOR is expanded, unlike in \u2018m4_join\u2019.  When\n     separating output with commas, this means that the map result can\n     be used as a series of arguments, by using a single-quoted comma as\n     SEPARATOR, or as a single string, by using a double-quoted comma.\n\n          m4_map([m4_count], [])\n          \u21d2\n          m4_map([ m4_count], [[],\n                               [[1]],\n                               [[1], [2]]])\n          \u21d2 1 2\n          m4_mapall([ m4_count], [[],\n                                  [[1]],\n                                  [[1], [2]]])\n          \u21d2 0 1 2\n          m4_map_sep([m4_eval], [,], [[[1+2]],\n                                      [[10], [16]]])\n          \u21d23,a\n          m4_map_sep([m4_echo], [,], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [,], [[[a]], [[b]]]))\n          \u21d22\n          m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]]))\n          \u21d21\n", "config"], "m4_mapall_sep": [" -- Macro: m4_map (MACRO, LIST)\n -- Macro: m4_mapall (MACRO, LIST)\n -- Macro: m4_map_sep (MACRO, SEPARATOR, LIST)\n -- Macro: m4_mapall_sep (MACRO, SEPARATOR, LIST)\n     Loop over the comma separated quoted list of argument descriptions\n     in LIST, and invoke MACRO with the arguments.  An argument\n     description is in turn a comma-separated quoted list of quoted\n     elements, suitable for \u2018m4_apply\u2019.  The macros \u2018m4_map\u2019 and\n     \u2018m4_map_sep\u2019 ignore empty argument descriptions, while \u2018m4_mapall\u2019\n     and \u2018m4_mapall_sep\u2019 invoke MACRO with no arguments.  The macros\n     \u2018m4_map_sep\u2019 and \u2018m4_mapall_sep\u2019 additionally expand SEPARATOR\n     between invocations of MACRO.\n\n     Note that SEPARATOR is expanded, unlike in \u2018m4_join\u2019.  When\n     separating output with commas, this means that the map result can\n     be used as a series of arguments, by using a single-quoted comma as\n     SEPARATOR, or as a single string, by using a double-quoted comma.\n\n          m4_map([m4_count], [])\n          \u21d2\n          m4_map([ m4_count], [[],\n                               [[1]],\n                               [[1], [2]]])\n          \u21d2 1 2\n          m4_mapall([ m4_count], [[],\n                                  [[1]],\n                                  [[1], [2]]])\n          \u21d2 0 1 2\n          m4_map_sep([m4_eval], [,], [[[1+2]],\n                                      [[10], [16]]])\n          \u21d23,a\n          m4_map_sep([m4_echo], [,], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [,], [[[a]], [[b]]]))\n          \u21d22\n          m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]])\n          \u21d2a,b\n          m4_count(m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]]))\n          \u21d21\n", "config"], "m4_map_args": [" -- Macro: m4_map_args (MACRO, ARG...)\n     Repeatedly invoke MACRO with each successive ARG as its only\n     argument.  In the following example, three solutions are presented\n     with the same expansion; the solution using \u2018m4_map_args\u2019 is the\n     most efficient.\n          m4_define([active], [ACTIVE])dnl\n          m4_foreach([var], [[plain], [active]], [ m4_echo(m4_defn([var]))])\n          \u21d2 plain active\n          m4_map([ m4_echo], [[[plain]], [[active]]])\n          \u21d2 plain active\n          m4_map_args([ m4_echo], [plain], [active])\n          \u21d2 plain active\n\n     In cases where it is useful to operate on additional parameters\n     besides the list elements, the macro \u2018m4_curry\u2019 can be used in\n     MACRO to supply the argument currying necessary to generate the\n     desired argument list.  In the following example, \u2018list_add_n\u2019 is\n     more efficient than \u2018list_add_x\u2019.  On the other hand, using\n     \u2018m4_map_args_sep\u2019 can be even more efficient.\n\n          m4_define([list], [[1], [2], [3]])dnl\n          m4_define([add], [m4_eval(([$1]) + ([$2]))])dnl\n          dnl list_add_n(N, ARG...)\n          dnl Output a list consisting of each ARG added to N\n          m4_define([list_add_n],\n          [m4_shift(m4_map_args([,m4_curry([add], [$1])], m4_shift($@)))])dnl\n          list_add_n([1], list)\n          \u21d22,3,4\n          list_add_n([2], list)\n          \u21d23,4,5\n          m4_define([list_add_x],\n          [m4_shift(m4_foreach([var], m4_dquote(m4_shift($@)),\n            [,add([$1],m4_defn([var]))]))])dnl\n          list_add_x([1], list)\n          \u21d22,3,4\n", "config"], "m4_map_args_pair": [" -- Macro: m4_map_args_pair (MACRO, [MACRO-END = MACRO]\n     ARG...) For every pair of arguments ARG, invoke MACRO with two\n     arguments.  If there is an odd number of arguments, invoke\n     MACRO-END, which defaults to MACRO, with the remaining argument.\n\n          m4_map_args_pair([, m4_reverse], [], [1], [2], [3])\n          \u21d2, 2, 1, 3\n          m4_map_args_pair([, m4_reverse], [, m4_dquote], [1], [2], [3])\n          \u21d2, 2, 1, [3]\n          m4_map_args_pair([, m4_reverse], [, m4_dquote], [1], [2], [3], [4])\n          \u21d2, 2, 1, 4, 3\n", "config"], "m4_map_args_sep": [" -- Macro: m4_map_args_sep ([PRE], [POST], [SEP], ARG...)\n     Expand the sequence \u2018PRE[ARG]POST\u2019 for each argument, additionally\n     expanding SEP between arguments.  One common use of this macro is\n     constructing a macro call, where the opening and closing\n     parentheses are split between PRE and POST; in particular,\n     \u2018m4_map_args([MACRO], [ARG])\u2019 is equivalent to\n     \u2018m4_map_args_sep([MACRO(], [)], [], [ARG])\u2019.  This macro provides\n     the most efficient means for iterating over an arbitrary list of\n     arguments, particularly when repeatedly constructing a macro call\n     with more arguments than ARG.\n", "config"], "m4_map_args_w": [" -- Macro: m4_map_args_w (STRING, [PRE], [POST], [SEP])\n     Expand the sequence \u2018PRE[word]POST\u2019 for each word in the\n     whitespace-separated STRING, additionally expanding SEP between\n     words.  This macro provides the most efficient means for iterating\n     over a whitespace-separated string.  In particular,\n     \u2018m4_map_args_w([STRING], [ACTION(], [)])\u2019 is more efficient than\n     \u2018m4_foreach_w([var], [STRING], [ACTION(m4_defn([var]))])\u2019.\n", "config"], "m4_shiftn": [" -- Macro: m4_shiftn (COUNT, ...)\n -- Macro: m4_shift2 (...)\n -- Macro: m4_shift3 (...)\n     \u2018m4_shiftn\u2019 performs COUNT iterations of \u2018m4_shift\u2019, along with\n     validation that enough arguments were passed in to match the shift\n     count, and that the count is positive.  \u2018m4_shift2\u2019 and \u2018m4_shift3\u2019\n     are specializations of \u2018m4_shiftn\u2019, introduced in Autoconf 2.62,\n     and are more efficient for two and three shifts, respectively.\n", "config"], "m4_shift2": [" -- Macro: m4_shiftn (COUNT, ...)\n -- Macro: m4_shift2 (...)\n -- Macro: m4_shift3 (...)\n     \u2018m4_shiftn\u2019 performs COUNT iterations of \u2018m4_shift\u2019, along with\n     validation that enough arguments were passed in to match the shift\n     count, and that the count is positive.  \u2018m4_shift2\u2019 and \u2018m4_shift3\u2019\n     are specializations of \u2018m4_shiftn\u2019, introduced in Autoconf 2.62,\n     and are more efficient for two and three shifts, respectively.\n", "config"], "m4_shift3": [" -- Macro: m4_shiftn (COUNT, ...)\n -- Macro: m4_shift2 (...)\n -- Macro: m4_shift3 (...)\n     \u2018m4_shiftn\u2019 performs COUNT iterations of \u2018m4_shift\u2019, along with\n     validation that enough arguments were passed in to match the shift\n     count, and that the count is positive.  \u2018m4_shift2\u2019 and \u2018m4_shift3\u2019\n     are specializations of \u2018m4_shiftn\u2019, introduced in Autoconf 2.62,\n     and are more efficient for two and three shifts, respectively.\n", "config"], "m4_stack_foreach": [" -- Macro: m4_stack_foreach (MACRO, ACTION)\n -- Macro: m4_stack_foreach_lifo (MACRO, ACTION)\n     For each of the \u2018m4_pushdef\u2019 definitions of MACRO, expand ACTION\n     with the single argument of a definition of MACRO.\n     \u2018m4_stack_foreach\u2019 starts with the oldest definition, while\n     \u2018m4_stack_foreach_lifo\u2019 starts with the current definition.  ACTION\n     should not push or pop definitions of MACRO, nor is there any\n     guarantee that the current definition of MACRO matches the argument\n     that was passed to ACTION.  The macro \u2018m4_curry\u2019 can be used if\n     ACTION needs more than one argument, although in that case it is\n     more efficient to use M4_STACK_FOREACH_SEP.\n\n     Due to technical limitations, there are a few low-level m4sugar\n     functions, such as \u2018m4_pushdef\u2019, that cannot be used as the MACRO\n     argument.\n\n          m4_pushdef([a], [1])m4_pushdef([a], [2])dnl\n          m4_stack_foreach([a], [ m4_incr])\n          \u21d2 2 3\n          m4_stack_foreach_lifo([a], [ m4_curry([m4_substr], [abcd])])\n          \u21d2 cd bcd\n", "config"], "m4_stack_foreach_lifo": [" -- Macro: m4_stack_foreach (MACRO, ACTION)\n -- Macro: m4_stack_foreach_lifo (MACRO, ACTION)\n     For each of the \u2018m4_pushdef\u2019 definitions of MACRO, expand ACTION\n     with the single argument of a definition of MACRO.\n     \u2018m4_stack_foreach\u2019 starts with the oldest definition, while\n     \u2018m4_stack_foreach_lifo\u2019 starts with the current definition.  ACTION\n     should not push or pop definitions of MACRO, nor is there any\n     guarantee that the current definition of MACRO matches the argument\n     that was passed to ACTION.  The macro \u2018m4_curry\u2019 can be used if\n     ACTION needs more than one argument, although in that case it is\n     more efficient to use M4_STACK_FOREACH_SEP.\n\n     Due to technical limitations, there are a few low-level m4sugar\n     functions, such as \u2018m4_pushdef\u2019, that cannot be used as the MACRO\n     argument.\n\n          m4_pushdef([a], [1])m4_pushdef([a], [2])dnl\n          m4_stack_foreach([a], [ m4_incr])\n          \u21d2 2 3\n          m4_stack_foreach_lifo([a], [ m4_curry([m4_substr], [abcd])])\n          \u21d2 cd bcd\n", "config"], "m4_stack_foreach_sep": [" -- Macro: m4_stack_foreach_sep (MACRO, [PRE], [POST], [SEP])\n -- Macro: m4_stack_foreach_sep_lifo (MACRO, [PRE], [POST], [SEP])\n     Expand the sequence \u2018PRE[definition]POST\u2019 for each \u2018m4_pushdef\u2019\n     definition of MACRO, additionally expanding SEP between\n     definitions.  \u2018m4_stack_foreach_sep\u2019 visits the oldest definition\n     first, while \u2018m4_stack_foreach_sep_lifo\u2019 visits the current\n     definition first.  This macro provides the most efficient means for\n     iterating over a pushdef stack.  In particular,\n     \u2018m4_stack_foreach([MACRO], [ACTION])\u2019 is short for\n     \u2018m4_stack_foreach_sep([MACRO], [ACTION(], [)])\u2019.\n\n\u001f", "config"], "m4_stack_foreach_sep_lifo": [" -- Macro: m4_stack_foreach_sep (MACRO, [PRE], [POST], [SEP])\n -- Macro: m4_stack_foreach_sep_lifo (MACRO, [PRE], [POST], [SEP])\n     Expand the sequence \u2018PRE[definition]POST\u2019 for each \u2018m4_pushdef\u2019\n     definition of MACRO, additionally expanding SEP between\n     definitions.  \u2018m4_stack_foreach_sep\u2019 visits the oldest definition\n     first, while \u2018m4_stack_foreach_sep_lifo\u2019 visits the current\n     definition first.  This macro provides the most efficient means for\n     iterating over a pushdef stack.  In particular,\n     \u2018m4_stack_foreach([MACRO], [ACTION])\u2019 is short for\n     \u2018m4_stack_foreach_sep([MACRO], [ACTION(], [)])\u2019.\n\n\u001f", "config"], "m4_apply": [" -- Macro: m4_apply (MACRO, LIST)\n     Apply the elements of the quoted, comma-separated LIST as the\n     arguments to MACRO.  If LIST is empty, invoke MACRO without\n     arguments.  Note the difference between \u2018m4_indir\u2019, which expects\n     its first argument to be a macro name but can use names that are\n     otherwise invalid, and \u2018m4_apply\u2019, where MACRO can contain other\n     text, but must end in a valid macro name.\n          m4_apply([m4_count], [])\n          \u21d20\n          m4_apply([m4_count], [[]])\n          \u21d21\n          m4_apply([m4_count], [[1], [2]])\n          \u21d22\n          m4_apply([m4_join], [[|], [1], [2]])\n          \u21d21|2\n", "config"], "m4_count": [" -- Macro: m4_count (ARG, ...)\n     This macro returns the decimal count of the number of arguments it\n     was passed.\n", "config"], "m4_curry": [" -- Macro: m4_curry (MACRO, ARG...)\n     This macro performs argument currying.  The expansion of this macro\n     is another macro name that expects exactly one argument; that\n     argument is then appended to the ARG list, and then MACRO is\n     expanded with the resulting argument list.\n\n          m4_curry([m4_curry], [m4_reverse], [1])([2])([3])\n          \u21d23, 2, 1\n\n     Unfortunately, due to a limitation in M4 1.4.x, it is not possible\n     to pass the definition of a builtin macro as the argument to the\n     output of \u2018m4_curry\u2019; the empty string is used instead of the\n     builtin token.  This behavior is rectified by using M4 1.6 or\n     newer.\n", "config"], "m4_do": [" -- Macro: m4_do (ARG, ...)\n     This macro loops over its arguments and expands each ARG in\n     sequence.  Its main use is for readability; it allows the use of\n     indentation and fewer \u2018dnl\u2019 to result in the same expansion.  This\n     macro guarantees that no expansion will be concatenated with\n     subsequent text; to achieve full concatenation, use\n     \u2018m4_unquote(m4_join([], ARG...))\u2019.\n\n          m4_define([ab],[1])m4_define([bc],[2])m4_define([abc],[3])dnl\n          m4_do([a],[b])c\n          \u21d2abc\n          m4_unquote(m4_join([],[a],[b]))c\n          \u21d23\n          m4_define([a],[A])m4_define([b],[B])m4_define([c],[C])dnl\n          m4_define([AB],[4])m4_define([BC],[5])m4_define([ABC],[6])dnl\n          m4_do([a],[b])c\n          \u21d2ABC\n          m4_unquote(m4_join([],[a],[b]))c\n          \u21d23\n", "config"], "m4_dquote": [" -- Macro: m4_dquote (ARG, ...)\n     Return the arguments as a quoted list of quoted arguments.\n     Conveniently, if there is just one ARG, this effectively adds a\n     level of quoting.\n", "config"], "m4_dquote_elt": [" -- Macro: m4_dquote_elt (ARG, ...)\n     Return the arguments as a series of double-quoted arguments.\n     Whereas \u2018m4_dquote\u2019 returns a single argument, \u2018m4_dquote_elt\u2019\n     returns as many arguments as it was passed.\n", "config"], "m4_echo": [" -- Macro: m4_echo (ARG, ...)\n     Return the arguments, with the same level of quoting.  Other than\n     discarding whitespace after unquoted commas, this macro is a no-op.\n", "config"], "m4_expand": [" -- Macro: m4_expand (ARG)\n     Return the expansion of ARG as a quoted string.  Whereas \u2018m4_quote\u2019\n     is designed to collect expanded text into a single argument,\n     \u2018m4_expand\u2019 is designed to perform one level of expansion on quoted\n     text.  One distinction is in the treatment of whitespace following\n     a comma in the original ARG.  Any time multiple arguments are\n     collected into one with \u2018m4_quote\u2019, the M4 argument collection\n     rules discard the whitespace.  However, with \u2018m4_expand\u2019,\n     whitespace is preserved, even after the expansion of macros\n     contained in ARG.  Additionally, \u2018m4_expand\u2019 is able to expand text\n     that would involve an unterminated comment, whereas expanding that\n     same text as the argument to \u2018m4_quote\u2019 runs into difficulty in\n     finding the end of the argument.  Since manipulating diversions\n     during argument collection is inherently unsafe, \u2018m4_expand\u2019 issues\n     an error if ARG attempts to change the current diversion (*note\n     Diversion support::).\n\n          m4_define([active], [ACT, IVE])dnl\n          m4_define([active2], [[ACT, IVE]])dnl\n          m4_quote(active, active)\n          \u21d2ACT,IVE,ACT,IVE\n          m4_expand([active, active])\n          \u21d2ACT, IVE, ACT, IVE\n          m4_quote(active2, active2)\n          \u21d2ACT, IVE,ACT, IVE\n          m4_expand([active2, active2])\n          \u21d2ACT, IVE, ACT, IVE\n          m4_expand([# m4_echo])\n          \u21d2# m4_echo\n          m4_quote(# m4_echo)\n          )\n          \u21d2# m4_echo)\n          \u21d2\n\n     Note that \u2018m4_expand\u2019 cannot handle an ARG that expands to literal\n     unbalanced quotes, but that quadrigraphs can be used when\n     unbalanced output is necessary.  Likewise, unbalanced parentheses\n     should be supplied with double quoting or a quadrigraph.\n\n          m4_define([pattern], [[!@<:@]])dnl\n          m4_define([bar], [BAR])dnl\n          m4_expand([case $foo in\n            m4_defn([pattern])@:}@ bar ;;\n            *[)] blah ;;\n          esac])\n          \u21d2case $foo in\n          \u21d2  [![]) BAR ;;\n          \u21d2  *) blah ;;\n          \u21d2esac\n", "config"], "m4_ignore": [" -- Macro: m4_ignore (...)\n     This macro was introduced in Autoconf 2.62.  Expands to nothing,\n     ignoring all of its arguments.  By itself, this isn\u2019t very useful.\n     However, it can be used to conditionally ignore an arbitrary number\n     of arguments, by deciding which macro name to apply to a list of\n     arguments.\n          dnl foo outputs a message only if [debug] is defined.\n          m4_define([foo],\n          [m4_ifdef([debug],[AC_MSG_NOTICE],[m4_ignore])([debug message])])\n\n     Note that for earlier versions of Autoconf, the macro \u2018__gnu__\u2019 can\n     serve the same purpose, although it is less readable.\n", "config"], "m4_make_list": [" -- Macro: m4_make_list (ARG, ...)\n     This macro exists to aid debugging of M4sugar algorithms.  Its net\n     effect is similar to \u2018m4_dquote\u2019\u2014it produces a quoted list of\n     quoted arguments, for each ARG.  The difference is that this\n     version uses a comma-newline separator instead of just comma, to\n     improve readability of the list; with the result that it is less\n     efficient than \u2018m4_dquote\u2019.\n          m4_define([zero],[0])m4_define([one],[1])m4_define([two],[2])dnl\n          m4_dquote(zero, [one], [[two]])\n          \u21d2[0],[one],[[two]]\n          m4_make_list(zero, [one], [[two]])\n          \u21d2[0],\n          \u21d2[one],\n          \u21d2[[two]]\n          m4_foreach([number], m4_dquote(zero, [one], [[two]]), [ number])\n          \u21d2 0 1 two\n          m4_foreach([number], m4_make_list(zero, [one], [[two]]), [ number])\n          \u21d2 0 1 two\n", "config"], "m4_quote": [" -- Macro: m4_quote (ARG, ...)\n     Return the arguments as a single entity, i.e., wrap them into a\n     pair of quotes.  This effectively collapses multiple arguments into\n     one, although it loses whitespace after unquoted commas in the\n     process.\n", "config"], "m4_reverse": [" -- Macro: m4_reverse (ARG, ...)\n     Outputs each argument with the same level of quoting, but in\n     reverse order, and with space following each comma for readability.\n\n          m4_define([active], [ACT,IVE])\n          \u21d2\n          m4_reverse(active, [active])\n          \u21d2active, IVE, ACT\n", "config"], "m4_unquote": [" -- Macro: m4_unquote (ARG, ...)\n     This macro was introduced in Autoconf 2.62.  Expand each argument,\n     separated by commas.  For a single ARG, this effectively removes a\n     layer of quoting, and \u2018m4_unquote([ARG])\u2019 is more efficient than\n     the equivalent \u2018m4_do([ARG])\u2019.  For multiple arguments, this\n     results in an unquoted list of expansions.  This is commonly used\n     with \u2018m4_split\u2019, in order to convert a single quoted list into a\n     series of quoted elements.\n", "config"], "m4_append": [" -- Macro: m4_append (MACRO-NAME, STRING, [SEPARATOR])\n -- Macro: m4_append_uniq (MACRO-NAME, STRING, [SEPARATOR] [IF-UNIQ],\n          [IF-DUPLICATE])\n     Redefine MACRO-NAME to its former contents with SEPARATOR and\n     STRING added at the end.  If MACRO-NAME was undefined before (but\n     not if it was defined but empty), then no SEPARATOR is added.  As\n     of Autoconf 2.62, neither STRING nor SEPARATOR are expanded during\n     this macro; instead, they are expanded when MACRO-NAME is invoked.\n\n     \u2018m4_append\u2019 can be used to grow strings, and \u2018m4_append_uniq\u2019 to\n     grow strings without duplicating substrings.  Additionally,\n     \u2018m4_append_uniq\u2019 takes two optional parameters as of Autoconf 2.62;\n     IF-UNIQ is expanded if STRING was appended, and IF-DUPLICATE is\n     expanded if STRING was already present.  Also, \u2018m4_append_uniq\u2019\n     warns if SEPARATOR is not empty, but occurs within STRING, since\n     that can lead to duplicates.\n\n     Note that \u2018m4_append\u2019 can scale linearly in the length of the final\n     string, depending on the quality of the underlying M4\n     implementation, while \u2018m4_append_uniq\u2019 has an inherent quadratic\n     scaling factor.  If an algorithm can tolerate duplicates in the\n     final string, use the former for speed.  If duplicates must be\n     avoided, consider using \u2018m4_set_add\u2019 instead (*note Set\n     manipulation Macros::).\n\n          m4_define([active], [ACTIVE])dnl\n          m4_append([sentence], [This is an])dnl\n          m4_append([sentence], [ active ])dnl\n          m4_append([sentence], [symbol.])dnl\n          sentence\n          \u21d2This is an ACTIVE symbol.\n          m4_undefine([active])dnl\n          \u21d2This is an active symbol.\n          m4_append_uniq([list], [one], [, ], [new], [existing])\n          \u21d2new\n          m4_append_uniq([list], [one], [, ], [new], [existing])\n          \u21d2existing\n          m4_append_uniq([list], [two], [, ], [new], [existing])\n          \u21d2new\n          m4_append_uniq([list], [three], [, ], [new], [existing])\n          \u21d2new\n          m4_append_uniq([list], [two], [, ], [new], [existing])\n          \u21d2existing\n          list\n          \u21d2one, two, three\n          m4_dquote(list)\n          \u21d2[one],[two],[three]\n          m4_append([list2], [one], [[, ]])dnl\n          m4_append_uniq([list2], [two], [[, ]])dnl\n          m4_append([list2], [three], [[, ]])dnl\n          list2\n          \u21d2one, two, three\n          m4_dquote(list2)\n          \u21d2[one, two, three]\n", "config"], "m4_append_uniq": [" -- Macro: m4_append (MACRO-NAME, STRING, [SEPARATOR])\n -- Macro: m4_append_uniq (MACRO-NAME, STRING, [SEPARATOR] [IF-UNIQ],\n          [IF-DUPLICATE])\n     Redefine MACRO-NAME to its former contents with SEPARATOR and\n     STRING added at the end.  If MACRO-NAME was undefined before (but\n     not if it was defined but empty), then no SEPARATOR is added.  As\n     of Autoconf 2.62, neither STRING nor SEPARATOR are expanded during\n     this macro; instead, they are expanded when MACRO-NAME is invoked.\n\n     \u2018m4_append\u2019 can be used to grow strings, and \u2018m4_append_uniq\u2019 to\n     grow strings without duplicating substrings.  Additionally,\n     \u2018m4_append_uniq\u2019 takes two optional parameters as of Autoconf 2.62;\n     IF-UNIQ is expanded if STRING was appended, and IF-DUPLICATE is\n     expanded if STRING was already present.  Also, \u2018m4_append_uniq\u2019\n     warns if SEPARATOR is not empty, but occurs within STRING, since\n     that can lead to duplicates.\n\n     Note that \u2018m4_append\u2019 can scale linearly in the length of the final\n     string, depending on the quality of the underlying M4\n     implementation, while \u2018m4_append_uniq\u2019 has an inherent quadratic\n     scaling factor.  If an algorithm can tolerate duplicates in the\n     final string, use the former for speed.  If duplicates must be\n     avoided, consider using \u2018m4_set_add\u2019 instead (*note Set\n     manipulation Macros::).\n\n          m4_define([active], [ACTIVE])dnl\n          m4_append([sentence], [This is an])dnl\n          m4_append([sentence], [ active ])dnl\n          m4_append([sentence], [symbol.])dnl\n          sentence\n          \u21d2This is an ACTIVE symbol.\n          m4_undefine([active])dnl\n          \u21d2This is an active symbol.\n          m4_append_uniq([list], [one], [, ], [new], [existing])\n          \u21d2new\n          m4_append_uniq([list], [one], [, ], [new], [existing])\n          \u21d2existing\n          m4_append_uniq([list], [two], [, ], [new], [existing])\n          \u21d2new\n          m4_append_uniq([list], [three], [, ], [new], [existing])\n          \u21d2new\n          m4_append_uniq([list], [two], [, ], [new], [existing])\n          \u21d2existing\n          list\n          \u21d2one, two, three\n          m4_dquote(list)\n          \u21d2[one],[two],[three]\n          m4_append([list2], [one], [[, ]])dnl\n          m4_append_uniq([list2], [two], [[, ]])dnl\n          m4_append([list2], [three], [[, ]])dnl\n          list2\n          \u21d2one, two, three\n          m4_dquote(list2)\n          \u21d2[one, two, three]\n", "config"], "m4_append_uniq_w": [" -- Macro: m4_append_uniq_w (MACRO-NAME, STRINGS)\n     This macro was introduced in Autoconf 2.62.  It is similar to\n     \u2018m4_append_uniq\u2019, but treats STRINGS as a whitespace separated list\n     of words to append, and only appends unique words.  MACRO-NAME is\n     updated with a single space between new words.\n          m4_append_uniq_w([numbers], [1 1 2])dnl\n          m4_append_uniq_w([numbers], [ 2 3 ])dnl\n          numbers\n          \u21d21 2 3\n", "config"], "m4_chomp": [" -- Macro: m4_chomp (STRING)\n -- Macro: m4_chomp_all (STRING)\n     Output STRING in quotes, but without a trailing newline.  The macro\n     \u2018m4_chomp\u2019 is slightly faster, and removes at most one newline; the\n     macro \u2018m4_chomp_all\u2019 removes all consecutive trailing newlines.\n     Unlike \u2018m4_flatten\u2019, embedded newlines are left intact, and\n     backslash does not influence the result.\n", "config"], "m4_chomp_all": [" -- Macro: m4_chomp (STRING)\n -- Macro: m4_chomp_all (STRING)\n     Output STRING in quotes, but without a trailing newline.  The macro\n     \u2018m4_chomp\u2019 is slightly faster, and removes at most one newline; the\n     macro \u2018m4_chomp_all\u2019 removes all consecutive trailing newlines.\n     Unlike \u2018m4_flatten\u2019, embedded newlines are left intact, and\n     backslash does not influence the result.\n", "config"], "m4_combine": [" -- Macro: m4_combine ([SEPARATOR], PREFIX-LIST, [INFIX], SUFFIX-1,\n          [SUFFIX-2], ...)\n     This macro produces a quoted string containing the pairwise\n     combination of every element of the quoted, comma-separated\n     PREFIX-LIST, and every element from the SUFFIX arguments.  Each\n     pairwise combination is joined with INFIX in the middle, and\n     successive pairs are joined by SEPARATOR.  No expansion occurs on\n     any of the arguments.  No output occurs if either the PREFIX or\n     SUFFIX list is empty, but the lists can contain empty elements.\n          m4_define([a], [oops])dnl\n          m4_combine([, ], [[a], [b], [c]], [-], [1], [2], [3])\n          \u21d2a-1, a-2, a-3, b-1, b-2, b-3, c-1, c-2, c-3\n          m4_combine([, ], [[a], [b]], [-])\n          \u21d2\n          m4_combine([, ], [[a], [b]], [-], [])\n          \u21d2a-, b-\n          m4_combine([, ], [], [-], [1], [2])\n          \u21d2\n          m4_combine([, ], [[]], [-], [1], [2])\n          \u21d2-1, -2\n", "config"], "m4_escape": [" -- Macro: m4_escape (STRING)\n     Convert all instances of \u2018[\u2019, \u2018]\u2019, \u2018#\u2019, and \u2018$\u2019 within STRING into\n     their respective quadrigraphs.  The result is still a quoted\n     string.\n", "config"], "m4_flatten": [" -- Macro: m4_flatten (STRING)\n     Flatten STRING into a single line.  Delete all backslash-newline\n     pairs, and replace all remaining newlines with a space.  The result\n     is still a quoted string.\n", "config"], "m4_join": [" -- Macro: m4_join ([SEPARATOR], ARGS...)\n -- Macro: m4_joinall ([SEPARATOR], ARGS...)\n     Concatenate each ARG, separated by SEPARATOR.  \u2018joinall\u2019 uses every\n     argument, while \u2018join\u2019 omits empty arguments so that there are no\n     back-to-back separators in the output.  The result is a quoted\n     string.\n          m4_define([active], [ACTIVE])dnl\n          m4_join([|], [one], [], [active], [two])\n          \u21d2one|active|two\n          m4_joinall([|], [one], [], [active], [two])\n          \u21d2one||active|two\n\n     Note that if all you intend to do is join ARGS with commas between\n     them, to form a quoted list suitable for \u2018m4_foreach\u2019, it is more\n     efficient to use \u2018m4_dquote\u2019.\n", "config"], "m4_joinall": [" -- Macro: m4_join ([SEPARATOR], ARGS...)\n -- Macro: m4_joinall ([SEPARATOR], ARGS...)\n     Concatenate each ARG, separated by SEPARATOR.  \u2018joinall\u2019 uses every\n     argument, while \u2018join\u2019 omits empty arguments so that there are no\n     back-to-back separators in the output.  The result is a quoted\n     string.\n          m4_define([active], [ACTIVE])dnl\n          m4_join([|], [one], [], [active], [two])\n          \u21d2one|active|two\n          m4_joinall([|], [one], [], [active], [two])\n          \u21d2one||active|two\n\n     Note that if all you intend to do is join ARGS with commas between\n     them, to form a quoted list suitable for \u2018m4_foreach\u2019, it is more\n     efficient to use \u2018m4_dquote\u2019.\n", "config"], "m4_newline": [" -- Macro: m4_newline ([TEXT])\n     This macro was introduced in Autoconf 2.62, and expands to a\n     newline, followed by any TEXT.  It is primarily useful for\n     maintaining macro formatting, and ensuring that M4 does not discard\n     leading whitespace during argument collection.\n", "config"], "m4_normalize": [" -- Macro: m4_normalize (STRING)\n     Remove leading and trailing spaces and tabs, sequences of\n     backslash-then-newline, and replace multiple spaces, tabs, and\n     newlines with a single space.  This is a combination of\n     \u2018m4_flatten\u2019 and \u2018m4_strip\u2019.  To determine if STRING consists only\n     of bytes that would be removed by \u2018m4_normalize\u2019, you can use\n     \u2018m4_ifblank\u2019.\n", "config"], "m4_re_escape": [" -- Macro: m4_re_escape (STRING)\n     Backslash-escape all characters in STRING that are active in\n     regexps.\n", "config"], "m4_split": [" -- Macro: m4_split (STRING, [REGEXP = \u2018[\\t ]+\u2019])\n     Split STRING into an M4 list of elements quoted by \u2018[\u2019 and \u2018]\u2019,\n     while keeping white space at the beginning and at the end.  If\n     REGEXP is given, use it instead of \u2018[\\t ]+\u2019 for splitting.  If\n     STRING is empty, the result is an empty list.\n", "config"], "m4_strip": [" -- Macro: m4_strip (STRING)\n     Strip whitespace from STRING.  Sequences of spaces and tabs are\n     reduced to a single space, then leading and trailing spaces are\n     removed.  The result is still a quoted string.  Note that this does\n     not interfere with newlines; if you want newlines stripped as well,\n     consider \u2018m4_flatten\u2019, or do it all at once with \u2018m4_normalize\u2019.\n     To quickly test if STRING has only whitespace, use \u2018m4_ifblank\u2019.\n", "config"], "m4_text_box": [" -- Macro: m4_text_box (MESSAGE, [FRAME = \u2018-\u2019])\n     Add a text box around MESSAGE, using FRAME as the border character\n     above and below the message.  The FRAME argument must be a single\n     byte, and does not support quadrigraphs.  The frame correctly\n     accounts for the subsequent expansion of MESSAGE.  For example:\n          m4_define([macro], [abc])dnl\n          m4_text_box([macro])\n          \u21d2## --- ##\n          \u21d2## abc ##\n          \u21d2## --- ##\n\n     The MESSAGE must contain balanced quotes and parentheses, although\n     quadrigraphs can be used to work around this.\n", "config"], "m4_text_wrap": [" -- Macro: m4_text_wrap (STRING, [PREFIX], [PREFIX1 = PREFIX]\n     Break STRING into a series of whitespace-separated words, then\n     output those words separated by spaces, and wrapping lines any time\n     the output would exceed WIDTH columns.  If given, PREFIX1 begins\n     the first line, and PREFIX begins all wrapped lines.  If PREFIX1 is\n     longer than PREFIX, then the first line consists of just PREFIX1.\n     If PREFIX is longer than PREFIX1, padding is inserted so that the\n     first word of STRING begins at the same indentation as all wrapped\n     lines.  Note that using literal tab characters in any of the\n     arguments will interfere with the calculation of width.  No\n     expansions occur on PREFIX, PREFIX1, or the words of STRING,\n     although quadrigraphs are recognized.\n\n     For some examples:\n          m4_text_wrap([Short string */], [   ], [/* ], [20])\n          \u21d2/* Short string */\n          m4_text_wrap([Much longer string */], [   ], [/* ], [20])\n          \u21d2/* Much longer\n          \u21d2   string */\n          m4_text_wrap([Short doc.], [          ], [  --short ], [30])\n          \u21d2  --short Short doc.\n          m4_text_wrap([Short doc.], [          ], [  --too-wide ], [30])\n          \u21d2  --too-wide\n          \u21d2          Short doc.\n          m4_text_wrap([Super long documentation.], [     ],\n                       [  --too-wide ], 30)\n          \u21d2  --too-wide\n          \u21d2     Super long\n          \u21d2     documentation.\n", "config"], "m4_tolower": [" -- Macro: m4_tolower (STRING)\n -- Macro: m4_toupper (STRING)\n     Return STRING with letters converted to upper or lower case,\n     respectively.\n\n\u001f", "config"], "m4_toupper": [" -- Macro: m4_tolower (STRING)\n -- Macro: m4_toupper (STRING)\n     Return STRING with letters converted to upper or lower case,\n     respectively.\n\n\u001f", "config"], "m4_cmp": [" -- Macro: m4_cmp (EXPR-1, EXPR-2)\n     Compare the arithmetic expressions EXPR-1 and EXPR-2, and expand to\n     \u2018-1\u2019 if EXPR-1 is smaller, \u20180\u2019 if they are equal, and \u20181\u2019 if EXPR-1\n     is larger.\n", "config"], "m4_list_cmp": [" -- Macro: m4_list_cmp (LIST-1, LIST-2)\n     Compare the two M4 lists consisting of comma-separated arithmetic\n     expressions, left to right.  Expand to \u2018-1\u2019 for the first element\n     pairing where the value from LIST-1 is smaller, \u20181\u2019 where the value\n     from LIST-2 is smaller, or \u20180\u2019 if both lists have the same values.\n     If one list is shorter than the other, the remaining elements of\n     the longer list are compared against zero.\n          m4_list_cmp([1, 0],       [1])\n          \u21d20\n          m4_list_cmp([1, [1 * 0]], [1, 0])\n          \u21d20\n          m4_list_cmp([1, 2],       [1, 0])\n          \u21d21\n          m4_list_cmp([1, [1+1], 3],[1, 2])\n          \u21d21\n          m4_list_cmp([1, 2, -3],   [1, 2])\n          \u21d2-1\n          m4_list_cmp([1, 0],       [1, 2])\n          \u21d2-1\n          m4_list_cmp([1],          [1, 2])\n          \u21d2-1\n", "config"], "m4_max": [" -- Macro: m4_max (ARG, ...)\n     This macro was introduced in Autoconf 2.62.  Expand to the decimal\n     value of the maximum arithmetic expression among all the arguments.\n", "config"], "m4_min": [" -- Macro: m4_min (ARG, ...)\n     This macro was introduced in Autoconf 2.62.  Expand to the decimal\n     value of the minimum arithmetic expression among all the arguments.\n", "config"], "m4_sign": [" -- Macro: m4_sign (EXPR)\n     Expand to \u2018-1\u2019 if the arithmetic expression EXPR is negative, \u20181\u2019\n     if it is positive, and \u20180\u2019 if it is zero.\n", "config"], "m4_version_compare": [" -- Macro: m4_version_compare (VERSION-1, VERSION-2)\n     This macro was introduced in Autoconf 2.53, but had a number of\n     usability limitations that were not lifted until Autoconf 2.62.\n     Compare the version strings VERSION-1 and VERSION-2, and expand to\n     \u2018-1\u2019 if VERSION-1 is smaller, \u20180\u2019 if they are the same, or \u20181\u2019\n     VERSION-2 is smaller.  Version strings must be a list of elements\n     separated by \u2018.\u2019, \u2018,\u2019 or \u2018-\u2019, where each element is a number along\n     with optional case-insensitive letters designating beta releases.\n     The comparison stops at the leftmost element that contains a\n     difference, although a 0 element compares equal to a missing\n     element.\n\n     It is permissible to include commit identifiers in VERSION, such as\n     an abbreviated SHA1 of the commit, provided there is still a\n     monotonically increasing prefix to allow for accurate version-based\n     comparisons.  For example, this paragraph was written when the\n     development snapshot of autoconf claimed to be at version\n     \u20182.61a-248-dc51\u2019, or 248 commits after the 2.61a release, with an\n     abbreviated commit identification of \u2018dc51\u2019.\n\n          m4_version_compare([1.1], [2.0])\n          \u21d2-1\n          m4_version_compare([2.0b], [2.0a])\n          \u21d21\n          m4_version_compare([1.1.1], [1.1.1a])\n          \u21d2-1\n          m4_version_compare([1.2], [1.1.1a])\n          \u21d21\n          m4_version_compare([1.0], [1])\n          \u21d20\n          m4_version_compare([1.1pre], [1.1PRE])\n          \u21d20\n          m4_version_compare([1.1a], [1,10])\n          \u21d2-1\n          m4_version_compare([2.61a], [2.61a-248-dc51])\n          \u21d2-1\n          m4_version_compare([2.61b], [2.61a-248-dc51])\n          \u21d21\n", "config"], "m4_version_prereq": [" -- Macro: m4_version_prereq (VERSION, [IF-NEW-ENOUGH], [IF-OLD =\n          \u2018m4_fatal\u2019])\n     Compares VERSION against the version of Autoconf currently running.\n     If the running version is at VERSION or newer, expand\n     IF-NEW-ENOUGH, but if VERSION is larger than the version currently\n     executing, expand IF-OLD, which defaults to printing an error\n     message and exiting m4sugar with status 63.  When given only one\n     argument, this behaves like \u2018AC_PREREQ\u2019 (*note Versioning::).\n     Remember that the autoconf philosophy favors feature checks over\n     version checks.\n\n\u001f", "config"], "m4_set_add": [" -- Macro: m4_set_add (SET, VALUE, [IF-UNIQ], [IF-DUP])\n     Adds the string VALUE as a member of set SET.  Expand IF-UNIQ if\n     the element was added, or IF-DUP if it was previously in the set.\n     Operates in amortized constant time, so that set creation scales\n     linearly.\n", "config"], "m4_set_add_all": [" -- Macro: m4_set_add_all (SET, VALUE...)\n     Adds each VALUE to the set SET.  This is slightly more efficient\n     than repeatedly invoking \u2018m4_set_add\u2019.\n", "config"], "m4_set_contains": [" -- Macro: m4_set_contains (SET, VALUE, [IF-PRESENT], [IF-ABSENT])\n     Expands IF-PRESENT if the string VALUE is a member of SET,\n     otherwise IF-ABSENT.\n\n          m4_set_contains([a], [1], [yes], [no])\n          \u21d2no\n          m4_set_add([a], [1], [added], [dup])\n          \u21d2added\n          m4_set_add([a], [1], [added], [dup])\n          \u21d2dup\n          m4_set_contains([a], [1], [yes], [no])\n          \u21d2yes\n          m4_set_remove([a], [1], [removed], [missing])\n          \u21d2removed\n          m4_set_contains([a], [1], [yes], [no])\n          \u21d2no\n          m4_set_remove([a], [1], [removed], [missing])\n          \u21d2missing\n", "config"], "m4_set_contents": [" -- Macro: m4_set_contents (SET, [SEP])\n -- Macro: m4_set_dump (SET, [SEP])\n     Expands to a single string consisting of all the members of the set\n     SET, each separated by SEP, which is not expanded.\n     \u2018m4_set_contents\u2019 leaves the elements in SET but reclaims any\n     memory occupied by removed elements, while \u2018m4_set_dump\u2019 is a\n     faster one-shot action that also deletes the set.  No provision is\n     made for disambiguating members that contain a non-empty SEP as a\n     substring; use \u2018m4_set_empty\u2019 to distinguish between an empty set\n     and the set containing only the empty string.  The order of the\n     output is unspecified; in the current implementation, part of the\n     speed of \u2018m4_set_dump\u2019 results from using a different output order\n     than \u2018m4_set_contents\u2019.  These macros scale linearly in the size of\n     the set before memory pruning, and \u2018m4_set_contents([SET], [SEP])\u2019\n     is faster than \u2018m4_joinall([SEP]m4_set_listc([SET]))\u2019.\n\n          m4_set_add_all([a], [1], [2], [3])\n          \u21d2\n          m4_set_contents([a], [-])\n          \u21d21-2-3\n          m4_joinall([-]m4_set_listc([a]))\n          \u21d21-2-3\n          m4_set_dump([a], [-])\n          \u21d23-2-1\n          m4_set_contents([a])\n          \u21d2\n          m4_set_add([a], [])\n          \u21d2\n          m4_set_contents([a], [-])\n          \u21d2\n", "config"], "m4_set_dump": [" -- Macro: m4_set_contents (SET, [SEP])\n -- Macro: m4_set_dump (SET, [SEP])\n     Expands to a single string consisting of all the members of the set\n     SET, each separated by SEP, which is not expanded.\n     \u2018m4_set_contents\u2019 leaves the elements in SET but reclaims any\n     memory occupied by removed elements, while \u2018m4_set_dump\u2019 is a\n     faster one-shot action that also deletes the set.  No provision is\n     made for disambiguating members that contain a non-empty SEP as a\n     substring; use \u2018m4_set_empty\u2019 to distinguish between an empty set\n     and the set containing only the empty string.  The order of the\n     output is unspecified; in the current implementation, part of the\n     speed of \u2018m4_set_dump\u2019 results from using a different output order\n     than \u2018m4_set_contents\u2019.  These macros scale linearly in the size of\n     the set before memory pruning, and \u2018m4_set_contents([SET], [SEP])\u2019\n     is faster than \u2018m4_joinall([SEP]m4_set_listc([SET]))\u2019.\n\n          m4_set_add_all([a], [1], [2], [3])\n          \u21d2\n          m4_set_contents([a], [-])\n          \u21d21-2-3\n          m4_joinall([-]m4_set_listc([a]))\n          \u21d21-2-3\n          m4_set_dump([a], [-])\n          \u21d23-2-1\n          m4_set_contents([a])\n          \u21d2\n          m4_set_add([a], [])\n          \u21d2\n          m4_set_contents([a], [-])\n          \u21d2\n", "config"], "m4_set_delete": [" -- Macro: m4_set_delete (SET)\n     Delete all elements and memory associated with SET.  This is linear\n     in the set size, and faster than removing one element at a time.\n", "config"], "m4_set_difference": [" -- Macro: m4_set_difference (SETA, SETB)\n -- Macro: m4_set_intersection (SETA, SETB)\n -- Macro: m4_set_union (SETA, SETB)\n     Compute the relation between SETA and SETB, and output the result\n     as a list of quoted arguments without duplicates and with a leading\n     comma.  Set difference selects the elements in SETA but not SETB,\n     intersection selects only elements in both sets, and union selects\n     elements in either set.  These actions are linear in the sum of the\n     set sizes.  The leading comma is necessary to distinguish between\n     no elements and the empty string as the only element.\n\n          m4_set_add_all([a], [1], [2], [3])\n          \u21d2\n          m4_set_add_all([b], [3], [], [4])\n          \u21d2\n          m4_set_difference([a], [b])\n          \u21d2,1,2\n          m4_set_difference([b], [a])\n          \u21d2,,4\n          m4_set_intersection([a], [b])\n          \u21d2,3\n          m4_set_union([a], [b])\n          \u21d2,1,2,3,,4\n", "config"], "m4_set_intersection": [" -- Macro: m4_set_difference (SETA, SETB)\n -- Macro: m4_set_intersection (SETA, SETB)\n -- Macro: m4_set_union (SETA, SETB)\n     Compute the relation between SETA and SETB, and output the result\n     as a list of quoted arguments without duplicates and with a leading\n     comma.  Set difference selects the elements in SETA but not SETB,\n     intersection selects only elements in both sets, and union selects\n     elements in either set.  These actions are linear in the sum of the\n     set sizes.  The leading comma is necessary to distinguish between\n     no elements and the empty string as the only element.\n\n          m4_set_add_all([a], [1], [2], [3])\n          \u21d2\n          m4_set_add_all([b], [3], [], [4])\n          \u21d2\n          m4_set_difference([a], [b])\n          \u21d2,1,2\n          m4_set_difference([b], [a])\n          \u21d2,,4\n          m4_set_intersection([a], [b])\n          \u21d2,3\n          m4_set_union([a], [b])\n          \u21d2,1,2,3,,4\n", "config"], "m4_set_union": [" -- Macro: m4_set_difference (SETA, SETB)\n -- Macro: m4_set_intersection (SETA, SETB)\n -- Macro: m4_set_union (SETA, SETB)\n     Compute the relation between SETA and SETB, and output the result\n     as a list of quoted arguments without duplicates and with a leading\n     comma.  Set difference selects the elements in SETA but not SETB,\n     intersection selects only elements in both sets, and union selects\n     elements in either set.  These actions are linear in the sum of the\n     set sizes.  The leading comma is necessary to distinguish between\n     no elements and the empty string as the only element.\n\n          m4_set_add_all([a], [1], [2], [3])\n          \u21d2\n          m4_set_add_all([b], [3], [], [4])\n          \u21d2\n          m4_set_difference([a], [b])\n          \u21d2,1,2\n          m4_set_difference([b], [a])\n          \u21d2,,4\n          m4_set_intersection([a], [b])\n          \u21d2,3\n          m4_set_union([a], [b])\n          \u21d2,1,2,3,,4\n", "config"], "m4_set_empty": [" -- Macro: m4_set_empty (SET, [IF-EMPTY], [IF-ELEMENTS])\n     Expand IF-EMPTY if the set SET has no elements, otherwise expand\n     IF-ELEMENTS.  This macro operates in constant time.  Using this\n     macro can help disambiguate output from \u2018m4_set_contents\u2019 or\n     \u2018m4_set_list\u2019.\n", "config"], "m4_set_foreach": [" -- Macro: m4_set_foreach (SET, VARIABLE, ACTION)\n     For each element in the set SET, expand ACTION with the macro\n     VARIABLE defined as the set element.  Behavior is unspecified if\n     ACTION recursively lists the contents of SET (although listing\n     other sets is acceptable), or if it modifies the set in any way\n     other than removing the element currently contained in VARIABLE.\n     This macro is faster than the corresponding \u2018m4_foreach([VARIABLE],\n     m4_indir([m4_dquote]m4_set_listc([SET])), [ACTION])\u2019, although\n     \u2018m4_set_map\u2019 might be faster still.\n\n          m4_set_add_all([a]m4_for([i], [1], [5], [], [,i]))\n          \u21d2\n          m4_set_contents([a])\n          \u21d212345\n          m4_set_foreach([a], [i],\n            [m4_if(m4_eval(i&1), [0], [m4_set_remove([a], i, [i])])])\n          \u21d224\n          m4_set_contents([a])\n          \u21d2135\n", "config"], "m4_set_list": [" -- Macro: m4_set_list (SET)\n -- Macro: m4_set_listc (SET)\n     Produce a list of arguments, where each argument is a quoted\n     element from the set SET.  The variant \u2018m4_set_listc\u2019 is\n     unambiguous, by adding a leading comma if there are any set\n     elements, whereas the variant \u2018m4_set_list\u2019 cannot distinguish\n     between an empty set and a set containing only the empty string.\n     These can be directly used in macros that take multiple arguments,\n     such as \u2018m4_join\u2019 or \u2018m4_set_add_all\u2019, or wrapped by \u2018m4_dquote\u2019\n     for macros that take a quoted list, such as \u2018m4_map\u2019 or\n     \u2018m4_foreach\u2019.  Any memory occupied by removed elements is reclaimed\n     during these macros.\n\n          m4_set_add_all([a], [1], [2], [3])\n          \u21d2\n          m4_set_list([a])\n          \u21d21,2,3\n          m4_set_list([b])\n          \u21d2\n          m4_set_listc([b])\n          \u21d2\n          m4_count(m4_set_list([b]))\n          \u21d21\n          m4_set_empty([b], [0], [m4_count(m4_set_list([b]))])\n          \u21d20\n          m4_set_add([b], [])\n          \u21d2\n          m4_set_list([b])\n          \u21d2\n          m4_set_listc([b])\n          \u21d2,\n          m4_count(m4_set_list([b]))\n          \u21d21\n          m4_set_empty([b], [0], [m4_count(m4_set_list([b]))])\n          \u21d21\n", "config"], "m4_set_listc": [" -- Macro: m4_set_list (SET)\n -- Macro: m4_set_listc (SET)\n     Produce a list of arguments, where each argument is a quoted\n     element from the set SET.  The variant \u2018m4_set_listc\u2019 is\n     unambiguous, by adding a leading comma if there are any set\n     elements, whereas the variant \u2018m4_set_list\u2019 cannot distinguish\n     between an empty set and a set containing only the empty string.\n     These can be directly used in macros that take multiple arguments,\n     such as \u2018m4_join\u2019 or \u2018m4_set_add_all\u2019, or wrapped by \u2018m4_dquote\u2019\n     for macros that take a quoted list, such as \u2018m4_map\u2019 or\n     \u2018m4_foreach\u2019.  Any memory occupied by removed elements is reclaimed\n     during these macros.\n\n          m4_set_add_all([a], [1], [2], [3])\n          \u21d2\n          m4_set_list([a])\n          \u21d21,2,3\n          m4_set_list([b])\n          \u21d2\n          m4_set_listc([b])\n          \u21d2\n          m4_count(m4_set_list([b]))\n          \u21d21\n          m4_set_empty([b], [0], [m4_count(m4_set_list([b]))])\n          \u21d20\n          m4_set_add([b], [])\n          \u21d2\n          m4_set_list([b])\n          \u21d2\n          m4_set_listc([b])\n          \u21d2,\n          m4_count(m4_set_list([b]))\n          \u21d21\n          m4_set_empty([b], [0], [m4_count(m4_set_list([b]))])\n          \u21d21\n", "config"], "m4_set_map": [" -- Macro: m4_set_map (SET, ACTION)\n     For each element in the set SET, expand ACTION with a single\n     argument of the set element.  Behavior is unspecified if ACTION\n     recursively lists the contents of SET (although listing other sets\n     is acceptable), or if it modifies the set in any way other than\n     removing the element passed as an argument.  This macro is faster\n     than either corresponding counterpart of\n     \u2018m4_map_args([ACTION]m4_set_listc([SET]))\u2019 or\n     \u2018m4_set_foreach([SET], [var], [ACTION(m4_defn([var]))])\u2019.  It is\n     possible to use \u2018m4_curry\u2019 if more than one argument is needed for\n     ACTION, although it is more efficient to use \u2018m4_set_map_sep\u2019 in\n     that case.\n", "config"], "m4_set_map_sep": [" -- Macro: m4_set_map_sep (SET, [PRE], [POST], [SEP])\n     For each element in the set SET, expand \u2018PRE[element]POST\u2019,\n     additionally expanding SEP between elements.  Behavior is\n     unspecified if the expansion recursively lists the contents of SET\n     (although listing other sets is acceptable), or if it modifies the\n     set in any way other than removing the element visited by the\n     expansion.  This macro provides the most efficient means for\n     non-destructively visiting the elements of a set; in particular,\n     \u2018m4_set_map([SET], [ACTION])\u2019 is equivalent to\n     \u2018m4_set_map_sep([SET], [ACTION(], [)])\u2019.\n", "config"], "m4_set_remove": [" -- Macro: m4_set_remove (SET, VALUE, [IF-PRESENT], [IF-ABSENT])\n     If VALUE is an element in the set SET, then remove it and expand\n     IF-PRESENT.  Otherwise expand IF-ABSENT.  This macro operates in\n     constant time so that multiple removals will scale linearly rather\n     than quadratically; but when used outside of \u2018m4_set_foreach\u2019 or\n     \u2018m4_set_map\u2019, it leaves memory occupied until the set is later\n     compacted by \u2018m4_set_contents\u2019 or \u2018m4_set_list\u2019.  Several other set\n     operations are then less efficient between the time of element\n     removal and subsequent memory compaction, but still maintain their\n     guaranteed scaling performance.\n", "config"], "m4_set_size": [" -- Macro: m4_set_size (SET)\n     Expand to the size of the set SET.  This implementation operates in\n     constant time, and is thus more efficient than\n     \u2018m4_eval(m4_count(m4_set_listc([set])) - 1)\u2019.\n\n\u001f", "config"], "m4_pattern_forbid": [" -- Macro: m4_pattern_forbid (PATTERN)\n     Declare that no token matching PATTERN must be found in the output.\n     The output file is (temporarily) split into one word per line as\n     part of the \u2018autom4te\u2019 post-processing, with each line (and\n     therefore word) then being checked against the Perl regular\n     expression PATTERN.  If the regular expression matches, and\n     \u2018m4_pattern_allow\u2019 does not also match, then an error is raised.\n\n     Comments are not checked; this can be a problem if, for instance,\n     you have some macro left unexpanded after an \u2018#include\u2019.  No\n     consensus is currently found in the Autoconf community, as some\n     people consider it should be valid to name macros in comments\n     (which doesn\u2019t make sense to the authors of this documentation:\n     input, such as macros, should be documented by \u2018dnl\u2019 comments;\n     reserving \u2018#\u2019-comments to document the output).\n\n     As an example, if you define your own macros that begin with \u2018M_\u2019\n     and are composed from capital letters and underscores, the\n     specification of \u2018m4_pattern_forbid([^M_[A-Z_]+])\u2019 will ensure all\n     your macros are expanded when not used in comments.\n\n     As an example of a common use of this macro, consider what happens\n     in packages that want to use the \u2018pkg-config\u2019 script via the\n     third-party \u2018PKG_CHECK_MODULES\u2019 macro.  By default, if a developer\n     checks out the development tree but has not yet installed the\n     pkg-config macros locally, they can manage to successfully run\n     \u2018autoconf\u2019 on the package, but the resulting \u2018configure\u2019 file will\n     likely result in a confusing shell message about a syntax error on\n     the line mentioning the unexpanded \u2018PKG_CHECK_MODULES\u2019 macro.  On\n     the other hand, if \u2018configure.ac\u2019 includes\n     \u2018m4_pattern_forbid([^PKG_])\u2019, the missing pkg-config macros will be\n     detected immediately without allowing \u2018autoconf\u2019 to succeed.\n", "config"], "m4_pattern_allow": [" -- Macro: m4_pattern_allow (PATTERN)\n     Any token matching PATTERN is allowed, including if it matches an\n     \u2018m4_pattern_forbid\u2019 pattern.\n\n     For example, Gnulib uses \u2018m4_pattern_forbid([^gl_])\u2019 to reserve the\n     \u2018gl_\u2019 namespace for itself, but also uses\n     \u2018m4_pattern_allow([^gl_ES$])\u2019 to avoid a false negative on the\n     valid locale name.\n\n\u001f", "config"], "AC_DEFUN": [" -- Macro: AC_DEFUN (NAME, [BODY])\n     Autoconf macros are defined using the \u2018AC_DEFUN\u2019 macro, which is\n     similar to the M4 builtin \u2018m4_define\u2019 macro; this creates a macro\n     named NAME and with BODY as its expansion.  In addition to defining\n     a macro, \u2018AC_DEFUN\u2019 adds to it some code that is used to constrain\n     the order in which macros are called, while avoiding redundant\n     output (*note Prerequisite Macros::).\n", "config"], "AC_REQUIRE": [" -- Macro: AC_REQUIRE (MACRO-NAME)\n     If the M4 macro MACRO-NAME has not already been called, call it\n     (without any arguments).  Make sure to quote MACRO-NAME with square\n     brackets.  MACRO-NAME must have been defined using \u2018AC_DEFUN\u2019 or\n     else contain a call to \u2018AC_PROVIDE\u2019 to indicate that it has been\n     called.\n\n     \u2018AC_REQUIRE\u2019 must be used inside a macro defined by \u2018AC_DEFUN\u2019; it\n     must not be called from the top level.  Also, it does not make\n     sense to require a macro that takes parameters.\n", "config"], "AC_BEFORE": [" -- Macro: AC_BEFORE (THIS-MACRO-NAME, CALLED-MACRO-NAME)\n     Make M4 print a warning message to the standard error output if\n     CALLED-MACRO-NAME has already been called.  THIS-MACRO-NAME should\n     be the name of the macro that is calling \u2018AC_BEFORE\u2019.  The macro\n     CALLED-MACRO-NAME must have been defined using \u2018AC_DEFUN\u2019 or else\n     contain a call to \u2018AC_PROVIDE\u2019 to indicate that it has been called.\n\n\u001f", "config"], "AC_DEFUN_ONCE": [" -- Macro: AC_DEFUN_ONCE (MACRO-NAME, MACRO-BODY)\n     Declare macro MACRO-NAME like \u2018AC_DEFUN\u2019 would (*note Macro\n     Definitions::), but add additional logic that guarantees that only\n     the first use of the macro (whether by direct expansion or\n     \u2018AC_REQUIRE\u2019) causes an expansion of MACRO-BODY; the expansion will\n     occur before the start of any enclosing macro defined by\n     \u2018AC_DEFUN\u2019.  Subsequent expansions are silently ignored.\n     Generally, it does not make sense for MACRO-BODY to use parameters\n     such as \u2018$1\u2019.\n", "config"], "AC_CANONICAL_BUILD": ["\u2018AC_CANONICAL_BUILD\u2019\n\u2018AC_CANONICAL_HOST\u2019\n\u2018AC_CANONICAL_TARGET\u2019\n     Automake will ensure that \u2018config.guess\u2019 and \u2018config.sub\u2019 exist.\n     Also, the \u2018Makefile\u2019 variables \u2018build_triplet\u2019, \u2018host_triplet\u2019 and\n     \u2018target_triplet\u2019 are introduced.  See *note Getting the Canonical\n     System Type: (autoconf)Canonicalizing.\n", "config"], "AC_CANONICAL_HOST": ["\u2018AC_CANONICAL_BUILD\u2019\n\u2018AC_CANONICAL_HOST\u2019\n\u2018AC_CANONICAL_TARGET\u2019\n     Automake will ensure that \u2018config.guess\u2019 and \u2018config.sub\u2019 exist.\n     Also, the \u2018Makefile\u2019 variables \u2018build_triplet\u2019, \u2018host_triplet\u2019 and\n     \u2018target_triplet\u2019 are introduced.  See *note Getting the Canonical\n     System Type: (autoconf)Canonicalizing.\n", "config"], "AC_CANONICAL_TARGET": ["\u2018AC_CANONICAL_BUILD\u2019\n\u2018AC_CANONICAL_HOST\u2019\n\u2018AC_CANONICAL_TARGET\u2019\n     Automake will ensure that \u2018config.guess\u2019 and \u2018config.sub\u2019 exist.\n     Also, the \u2018Makefile\u2019 variables \u2018build_triplet\u2019, \u2018host_triplet\u2019 and\n     \u2018target_triplet\u2019 are introduced.  See *note Getting the Canonical\n     System Type: (autoconf)Canonicalizing.\n", "config"], "AC_PRESERVE_HELP_ORDER": [" -- Macro: AC_PRESERVE_HELP_ORDER\n\n     Request an alternate \u2018--help\u2019 format, in which options of all types\n     appear together, in the order defined.  Call this macro before any\n     \u2018AC_ARG_ENABLE\u2019 or \u2018AC_ARG_WITH\u2019.\n\n          Optional Features and Packages:\n            ...\n            --enable-bar            include bar\n            --with-foo              use foo\n\n\u001f", "config"], "AC_ARG_WITH": [" -- Macro: AC_ARG_WITH (PACKAGE, HELP-STRING, [ACTION-IF-GIVEN],\n          [ACTION-IF-NOT-GIVEN])\n     If the user gave \u2018configure\u2019 the option \u2018--with-PACKAGE\u2019 or\n     \u2018--without-PACKAGE\u2019, run shell commands ACTION-IF-GIVEN.  If\n     neither option was given, run shell commands ACTION-IF-NOT-GIVEN.\n     The name PACKAGE indicates another software package that this\n     program should work with.  It should consist only of alphanumeric\n     characters, dashes, plus signs, and dots.\n\n     The option\u2019s argument is available to the shell commands\n     ACTION-IF-GIVEN in the shell variable \u2018withval\u2019, which is actually\n     just the value of the shell variable named \u2018with_PACKAGE\u2019, with any\n     non-alphanumeric characters in PACKAGE changed into \u2018_\u2019.  You may\n     use that variable instead, if you wish.\n\n     Note that ACTION-IF-NOT-GIVEN is not expanded until the point that\n     \u2018AC_ARG_WITH\u2019 was expanded.  If you need the value of\n     \u2018with_PACKAGE\u2019 set to a default value by the time argument parsing\n     is completed, use \u2018m4_divert_text\u2019 to the \u2018DEFAULTS\u2019 diversion\n     (*note m4_divert_text::) (if done as an argument to \u2018AC_ARG_WITH\u2019,\n     also provide non-diverted text to avoid a shell syntax error).\n\n     The argument HELP-STRING is a description of the option that looks\n     like this:\n            --with-readline         support fancy command line editing\n\n     HELP-STRING may be more than one line long, if more detail is\n     needed.  Just make sure the columns line up in \u2018configure --help\u2019.\n     Avoid tabs in the help string.  The easiest way to provide the\n     proper leading whitespace is to format your HELP-STRING with the\n     macro \u2018AS_HELP_STRING\u2019 (*note Pretty Help Strings::).\n\n     The following example shows how to use the \u2018AC_ARG_WITH\u2019 macro in a\n     common situation.  You want to let the user decide whether to\n     enable support for an external library (e.g., the readline\n     library); if the user specified neither \u2018--with-readline\u2019 nor\n     \u2018--without-readline\u2019, you want to enable support for readline only\n     if the library is available on the system.\n\n          AC_ARG_WITH([readline],\n            [AS_HELP_STRING([--with-readline],\n              [support fancy command line editing @<:@default=check@:>@])],\n            [],\n            [: m4_divert_text([DEFAULTS], [with_readline=check])])\n\n          LIBREADLINE=\n          AS_IF([test \"x$with_readline\" != xno],\n            [AC_CHECK_LIB([readline], [main],\n              [AC_SUBST([LIBREADLINE], [\"-lreadline -lncurses\"])\n               AC_DEFINE([HAVE_LIBREADLINE], [1],\n                         [Define if you have libreadline])\n              ],\n              [if test \"x$with_readline\" != xcheck; then\n                 AC_MSG_FAILURE(\n                   [--with-readline was given, but test for readline failed])\n               fi\n              ], -lncurses)])\n\n     The next example shows how to use \u2018AC_ARG_WITH\u2019 to give the user\n     the possibility to enable support for the readline library, in case\n     it is still experimental and not well tested, and is therefore\n     disabled by default.\n\n          AC_ARG_WITH([readline],\n            [AS_HELP_STRING([--with-readline],\n              [enable experimental support for readline])],\n            [],\n            [with_readline=no])\n\n          LIBREADLINE=\n          AS_IF([test \"x$with_readline\" != xno],\n            [AC_CHECK_LIB([readline], [main],\n              [AC_SUBST([LIBREADLINE], [\"-lreadline -lncurses\"])\n               AC_DEFINE([HAVE_LIBREADLINE], [1],\n                         [Define if you have libreadline])\n              ],\n              [AC_MSG_FAILURE(\n                 [--with-readline was given, but test for readline failed])],\n              [-lncurses])])\n\n     The last example shows how to use \u2018AC_ARG_WITH\u2019 to give the user\n     the possibility to disable support for the readline library, given\n     that it is an important feature and that it should be enabled by\n     default.\n\n          AC_ARG_WITH([readline],\n            [AS_HELP_STRING([--without-readline],\n              [disable support for readline])],\n            [],\n            [with_readline=yes])\n\n          LIBREADLINE=\n          AS_IF([test \"x$with_readline\" != xno],\n            [AC_CHECK_LIB([readline], [main],\n              [AC_SUBST([LIBREADLINE], [\"-lreadline -lncurses\"])\n               AC_DEFINE([HAVE_LIBREADLINE], [1],\n                         [Define if you have libreadline])\n              ],\n              [AC_MSG_FAILURE(\n                 [readline test failed (--without-readline to disable)])],\n              [-lncurses])])\n\n     These three examples can be easily adapted to the case where\n     \u2018AC_ARG_ENABLE\u2019 should be preferred to \u2018AC_ARG_WITH\u2019 (see *note\n     Package Options::).\n\n\u001f", "config"], "AC_ARG_ENABLE": [" -- Macro: AC_ARG_ENABLE (FEATURE, HELP-STRING, [ACTION-IF-GIVEN],\n          [ACTION-IF-NOT-GIVEN])\n     If the user gave \u2018configure\u2019 the option \u2018--enable-FEATURE\u2019 or\n     \u2018--disable-FEATURE\u2019, run shell commands ACTION-IF-GIVEN.  If\n     neither option was given, run shell commands ACTION-IF-NOT-GIVEN.\n     The name FEATURE indicates an optional user-level facility.  It\n     should consist only of alphanumeric characters, dashes, plus signs,\n     and dots.\n\n     The option\u2019s argument is available to the shell commands\n     ACTION-IF-GIVEN in the shell variable \u2018enableval\u2019, which is\n     actually just the value of the shell variable named\n     \u2018enable_FEATURE\u2019, with any non-alphanumeric characters in FEATURE\n     changed into \u2018_\u2019.  You may use that variable instead, if you wish.\n     The HELP-STRING argument is like that of \u2018AC_ARG_WITH\u2019 (*note\n     External Software::).\n\n     Note that ACTION-IF-NOT-GIVEN is not expanded until the point that\n     \u2018AC_ARG_ENABLE\u2019 was expanded.  If you need the value of\n     \u2018enable_FEATURE\u2019 set to a default value by the time argument\n     parsing is completed, use \u2018m4_divert_text\u2019 to the \u2018DEFAULTS\u2019\n     diversion (*note m4_divert_text::) (if done as an argument to\n     \u2018AC_ARG_ENABLE\u2019, also provide non-diverted text to avoid a shell\n     syntax error).\n\n     You should format your HELP-STRING with the macro \u2018AS_HELP_STRING\u2019\n     (*note Pretty Help Strings::).\n\n     See the examples suggested with the definition of \u2018AC_ARG_WITH\u2019\n     (*note External Software::) to get an idea of possible applications\n     of \u2018AC_ARG_ENABLE\u2019.\n\n\u001f", "config"], "AC_DISABLE_OPTION_CHECKING": [" -- Macro: AC_DISABLE_OPTION_CHECKING\n\n     By default, disable warnings related to any unrecognized\n     \u2018--with-PACKAGE\u2019 or \u2018--enable-FEATURE\u2019 options.  This is implied by\n     \u2018AC_CONFIG_SUBDIRS\u2019.\n\n     The installer can override this behavior by passing\n     \u2018--enable-option-checking\u2019 (enable warnings) or\n     \u2018--enable-option-checking=fatal\u2019 (enable errors) to \u2018configure\u2019.\n\n\u001f", "config"], "AC_ARG_PROGRAM": [" -- Macro: AC_ARG_PROGRAM\n     Place in output variable \u2018program_transform_name\u2019 a sequence of\n     \u2018sed\u2019 commands for changing the names of installed programs.\n\n     If any of the options described below are given to \u2018configure\u2019,\n     program names are transformed accordingly.  Otherwise, if\n     \u2018AC_CANONICAL_TARGET\u2019 has been called and a \u2018--target\u2019 value is\n     given, the target type followed by a dash is used as a prefix.\n     Otherwise, no program name transformation is done.\n", "config"], "AC_AIX": [" -- Macro: AC_AIX\n     This macro is a platform-specific subset of\n     \u2018AC_USE_SYSTEM_EXTENSIONS\u2019 (*note AC_USE_SYSTEM_EXTENSIONS::).\n", "config"], "AC_ALLOCA": [" -- Macro: AC_ALLOCA\n     Replaced by \u2018AC_FUNC_ALLOCA\u2019 (*note AC_FUNC_ALLOCA::).\n", "config"], "AC_ARG_ARRAY": [" -- Macro: AC_ARG_ARRAY\n     Removed because of limited usefulness.\n", "config"], "AC_C_CROSS": [" -- Macro: AC_C_CROSS\n     This macro is obsolete; it does nothing.\n", "config"], "AC_C_LONG_DOUBLE": [" -- Macro: AC_C_LONG_DOUBLE\n     If the C compiler supports a working \u2018long double\u2019 type with more\n     range or precision than the \u2018double\u2019 type, define\n     \u2018HAVE_LONG_DOUBLE\u2019.\n\n     You should use \u2018AC_TYPE_LONG_DOUBLE\u2019 or \u2018AC_TYPE_LONG_DOUBLE_WIDER\u2019\n     instead.  *Note Particular Types::.\n", "config"], "AC_CANONICAL_SYSTEM": [" -- Macro: AC_CANONICAL_SYSTEM\n     Determine the system type and set output variables to the names of\n     the canonical system types.  *Note Canonicalizing::, for details\n     about the variables this macro sets.\n\n     The user is encouraged to use either \u2018AC_CANONICAL_BUILD\u2019, or\n     \u2018AC_CANONICAL_HOST\u2019, or \u2018AC_CANONICAL_TARGET\u2019, depending on the\n     needs.  Using \u2018AC_CANONICAL_TARGET\u2019 is enough to run the two other\n     macros (*note Canonicalizing::).\n", "config"], "AC_CHAR_UNSIGNED": [" -- Macro: AC_CHAR_UNSIGNED\n     Replaced by \u2018AC_C_CHAR_UNSIGNED\u2019 (*note AC_C_CHAR_UNSIGNED::).\n", "config"], "AC_CHECKING": [" -- Macro: AC_CHECKING (FEATURE-DESCRIPTION)\n     Same as\n\n          AC_MSG_NOTICE([checking FEATURE-DESCRIPTION...]\n\n     *Note AC_MSG_NOTICE::.\n", "config"], "AC_COMPILE_CHECK": [" -- Macro: AC_COMPILE_CHECK (ECHO-TEXT, INCLUDES, FUNCTION-BODY,\n          ACTION-IF-TRUE, [ACTION-IF-FALSE])\n     This is an obsolete version of \u2018AC_TRY_COMPILE\u2019 itself replaced by\n     \u2018AC_COMPILE_IFELSE\u2019 (*note Running the Compiler::), with the\n     addition that it prints \u2018checking for ECHO-TEXT\u2019 to the standard\n     output first, if ECHO-TEXT is non-empty.  Use \u2018AC_MSG_CHECKING\u2019 and\n     \u2018AC_MSG_RESULT\u2019 instead to print messages (*note Printing\n     Messages::).\n", "config"], "AC_CONST": [" -- Macro: AC_CONST\n     Replaced by \u2018AC_C_CONST\u2019 (*note AC_C_CONST::).\n", "config"], "AC_CROSS_CHECK": [" -- Macro: AC_CROSS_CHECK\n     Same as \u2018AC_C_CROSS\u2019, which is obsolete too, and does nothing\n     \u2018:-)\u2019.\n", "config"], "AC_CYGWIN": [" -- Macro: AC_CYGWIN\n     Check for the Cygwin environment in which case the shell variable\n     \u2018CYGWIN\u2019 is set to \u2018yes\u2019.  Don\u2019t use this macro, the dignified\n     means to check the nature of the host is using \u2018AC_CANONICAL_HOST\u2019\n     (*note Canonicalizing::).  As a matter of fact this macro is\n     defined as:\n\n          AC_REQUIRE([AC_CANONICAL_HOST])[]dnl\n          case $host_os in\n            *cygwin* ) CYGWIN=yes;;\n                   * ) CYGWIN=no;;\n          esac\n\n     Beware that the variable \u2018CYGWIN\u2019 has a special meaning when\n     running Cygwin, and should not be changed.  That\u2019s yet another\n     reason not to use this macro.\n", "config"], "AC_DECL_SYS_SIGLIST": [" -- Macro: AC_DECL_SYS_SIGLIST\n     Same as:\n\n          AC_CHECK_DECLS([sys_siglist], [], [],\n          [#include <signal.h>\n          /* NetBSD declares sys_siglist in unistd.h.  */\n          #ifdef HAVE_UNISTD_H\n          # include <unistd.h>\n          #endif\n          ])\n\n     *Note AC_CHECK_DECLS::.\n", "config"], "AC_DECL_YYTEXT": [" -- Macro: AC_DECL_YYTEXT\n     Does nothing, now integrated in \u2018AC_PROG_LEX\u2019 (*note\n     AC_PROG_LEX::).\n", "config"], "AC_DIAGNOSE": [" -- Macro: AC_DIAGNOSE (CATEGORY, MESSAGE)\n     Replaced by \u2018m4_warn\u2019 (*note m4_warn::).\n", "config"], "AC_DIR_HEADER": [" -- Macro: AC_DIR_HEADER\n     Like calling \u2018AC_FUNC_CLOSEDIR_VOID\u2019 (*note\n     AC_FUNC_CLOSEDIR_VOID::) and \u2018AC_HEADER_DIRENT\u2019 (*note\n     AC_HEADER_DIRENT::), but defines a different set of C preprocessor\n     macros to indicate which header file is found:\n\n     Header         Old Symbol   New Symbol\n     \u2018dirent.h\u2019     \u2018DIRENT\u2019     \u2018HAVE_DIRENT_H\u2019\n     \u2018sys/ndir.h\u2019   \u2018SYSNDIR\u2019    \u2018HAVE_SYS_NDIR_H\u2019\n     \u2018sys/dir.h\u2019    \u2018SYSDIR\u2019     \u2018HAVE_SYS_DIR_H\u2019\n     \u2018ndir.h\u2019       \u2018NDIR\u2019       \u2018HAVE_NDIR_H\u2019\n", "config"], "AC_DYNIX_SEQ": [" -- Macro: AC_DYNIX_SEQ\n     If on DYNIX/ptx, add \u2018-lseq\u2019 to output variable \u2018LIBS\u2019.  This macro\n     used to be defined as\n\n          AC_CHECK_LIB([seq], [getmntent], [LIBS=\"-lseq $LIBS\"])\n\n     now it is just \u2018AC_FUNC_GETMNTENT\u2019 (*note AC_FUNC_GETMNTENT::).\n", "config"], "AC_EXEEXT": [" -- Macro: AC_EXEEXT\n     Defined the output variable \u2018EXEEXT\u2019 based on the output of the\n     compiler, which is now done automatically.  Typically set to empty\n     string if Posix and \u2018.exe\u2019 if a DOS variant.\n", "config"], "AC_EMXOS2": [" -- Macro: AC_EMXOS2\n     Similar to \u2018AC_CYGWIN\u2019 but checks for the EMX environment on OS/2\n     and sets \u2018EMXOS2\u2019.  Don\u2019t use this macro, the dignified means to\n     check the nature of the host is using \u2018AC_CANONICAL_HOST\u2019 (*note\n     Canonicalizing::).\n", "config"], "AC_ENABLE": [" -- Macro: AC_ENABLE (FEATURE, ACTION-IF-GIVEN, [ACTION-IF-NOT-GIVEN])\n     This is an obsolete version of \u2018AC_ARG_ENABLE\u2019 that does not\n     support providing a help string (*note AC_ARG_ENABLE::).\n", "config"], "AC_ERROR": [" -- Macro: AC_ERROR\n     Replaced by \u2018AC_MSG_ERROR\u2019 (*note AC_MSG_ERROR::).\n", "config"], "AC_FATAL": [" -- Macro: AC_FATAL (MESSAGE)\n     Replaced by \u2018m4_fatal\u2019 (*note m4_fatal::).\n", "config"], "AC_FIND_X": [" -- Macro: AC_FIND_X\n     Replaced by \u2018AC_PATH_X\u2019 (*note AC_PATH_X::).\n", "config"], "AC_FIND_XTRA": [" -- Macro: AC_FIND_XTRA\n     Replaced by \u2018AC_PATH_XTRA\u2019 (*note AC_PATH_XTRA::).\n", "config"], "AC_FOREACH": [" -- Macro: AC_FOREACH\n     Replaced by \u2018m4_foreach_w\u2019 (*note m4_foreach_w::).\n", "config"], "AC_FUNC_CHECK": [" -- Macro: AC_FUNC_CHECK\n     Replaced by \u2018AC_CHECK_FUNC\u2019 (*note AC_CHECK_FUNC::).\n", "config"], "AC_FUNC_SETVBUF_REVERSED": [" -- Macro: AC_FUNC_SETVBUF_REVERSED\n     Do nothing.  Formerly, this macro checked whether \u2018setvbuf\u2019 takes\n     the buffering type as its second argument and the buffer pointer as\n     the third, instead of the other way around, and defined\n     \u2018SETVBUF_REVERSED\u2019.  However, the last systems to have the problem\n     were those based on SVR2, which became obsolete in 1987, and the\n     macro is no longer needed.\n", "config"], "AC_FUNC_WAIT3": [" -- Macro: AC_FUNC_WAIT3\n     If \u2018wait3\u2019 is found and fills in the contents of its third argument\n     (a \u2018struct rusage *\u2019), which HP-UX does not do, define\n     \u2018HAVE_WAIT3\u2019.\n\n     These days portable programs should use \u2018waitpid\u2019, not \u2018wait3\u2019, as\n     \u2018wait3\u2019 has been removed from Posix.\n", "config"], "AC_GCC_TRADITIONAL": [" -- Macro: AC_GCC_TRADITIONAL\n     Replaced by \u2018AC_PROG_GCC_TRADITIONAL\u2019 (*note\n     AC_PROG_GCC_TRADITIONAL::).\n", "config"], "AC_GETGROUPS_T": [" -- Macro: AC_GETGROUPS_T\n     Replaced by \u2018AC_TYPE_GETGROUPS\u2019 (*note AC_TYPE_GETGROUPS::).\n", "config"], "AC_GETLOADAVG": [" -- Macro: AC_GETLOADAVG\n     Replaced by \u2018AC_FUNC_GETLOADAVG\u2019 (*note AC_FUNC_GETLOADAVG::).\n", "config"], "AC_GNU_SOURCE": [" -- Macro: AC_GNU_SOURCE\n     This macro is a platform-specific subset of\n     \u2018AC_USE_SYSTEM_EXTENSIONS\u2019 (*note AC_USE_SYSTEM_EXTENSIONS::).\n", "config"], "AC_HAVE_FUNCS": [" -- Macro: AC_HAVE_FUNCS\n     Replaced by \u2018AC_CHECK_FUNCS\u2019 (*note AC_CHECK_FUNCS::).\n", "config"], "AC_HAVE_HEADERS": [" -- Macro: AC_HAVE_HEADERS\n     Replaced by \u2018AC_CHECK_HEADERS\u2019 (*note AC_CHECK_HEADERS::).\n", "config"], "AC_HAVE_LIBRARY": [" -- Macro: AC_HAVE_LIBRARY (LIBRARY, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND], [OTHER-LIBRARIES])\n     This macro is equivalent to calling \u2018AC_CHECK_LIB\u2019 with a FUNCTION\n     argument of \u2018main\u2019.  In addition, LIBRARY can be written as any of\n     \u2018foo\u2019, \u2018-lfoo\u2019, or \u2018libfoo.a\u2019.  In all of those cases, the compiler\n     is passed \u2018-lfoo\u2019.  However, LIBRARY cannot be a shell variable; it\n     must be a literal name.  *Note AC_CHECK_LIB::.\n", "config"], "AC_HAVE_POUNDBANG": [" -- Macro: AC_HAVE_POUNDBANG\n     Replaced by \u2018AC_SYS_INTERPRETER\u2019 (*note AC_SYS_INTERPRETER::).\n", "config"], "AC_HEADER_CHECK": [" -- Macro: AC_HEADER_CHECK\n     Replaced by \u2018AC_CHECK_HEADER\u2019 (*note AC_CHECK_HEADER::).\n", "config"], "AC_HEADER_EGREP": [" -- Macro: AC_HEADER_EGREP\n     Replaced by \u2018AC_EGREP_HEADER\u2019 (*note AC_EGREP_HEADER::).\n", "config"], "AC_HEADER_TIME": [" -- Macro: AC_HEADER_TIME\n     This macro used to check whether it was possible to include\n     \u2018time.h\u2019 and \u2018sys/time.h\u2019 in the same source file, defining\n     \u2018TIME_WITH_SYS_TIME\u2019 if so.\n\n     Nowadays, it is equivalent to \u2018AC_CHECK_HEADERS([sys/time.h])\u2019,\n     although it does still define \u2018TIME_WITH_SYS_TIME\u2019 for\n     compatibility\u2019s sake.  \u2018time.h\u2019 is universally present, and the\n     systems on which \u2018sys/time.h\u2019 conflicted with \u2018time.h\u2019 are\n     obsolete.\n", "config"], "AC_HELP_STRING": [" -- Macro: AC_HELP_STRING\n     Replaced by \u2018AS_HELP_STRING\u2019 (*note AS_HELP_STRING::).\n", "config"], "AC_INLINE": [" -- Macro: AC_INLINE\n     Replaced by \u2018AC_C_INLINE\u2019 (*note AC_C_INLINE::).\n", "config"], "AC_INT_16_BITS": [" -- Macro: AC_INT_16_BITS\n     If the C type \u2018int\u2019 is 16 bits wide, define \u2018INT_16_BITS\u2019.  Use\n     \u2018AC_CHECK_SIZEOF(int)\u2019 instead (*note AC_CHECK_SIZEOF::).\n", "config"], "AC_IRIX_SUN": [" -- Macro: AC_IRIX_SUN\n     If on IRIX (Silicon Graphics Unix), add \u2018-lsun\u2019 to output \u2018LIBS\u2019.\n     If you were using it to get \u2018getmntent\u2019, use \u2018AC_FUNC_GETMNTENT\u2019\n     instead.  If you used it for the NIS versions of the password and\n     group functions, use \u2018AC_CHECK_LIB(sun, getpwnam)\u2019.  Up to Autoconf\n     2.13, it used to be\n\n          AC_CHECK_LIB([sun], [getmntent], [LIBS=\"-lsun $LIBS\"])\n\n     now it is defined as\n\n          AC_FUNC_GETMNTENT\n          AC_CHECK_LIB([sun], [getpwnam])\n\n     See *note AC_FUNC_GETMNTENT:: and *note AC_CHECK_LIB::.\n", "config"], "AC_ISC_POSIX": [" -- Macro: AC_ISC_POSIX\n     This macro adds \u2018-lcposix\u2019 to output variable \u2018LIBS\u2019 if necessary\n     for Posix facilities.  Sun dropped support for the obsolete\n     INTERACTIVE Systems Corporation Unix on 2006-07-23.  New programs\n     need not use this macro.  It is implemented as\n     \u2018AC_SEARCH_LIBS([strerror], [cposix])\u2019 (*note AC_SEARCH_LIBS::).\n", "config"], "AC_LANG_C": [" -- Macro: AC_LANG_C\n     Same as \u2018AC_LANG([C])\u2019 (*note AC_LANG::).\n", "config"], "AC_LANG_CPLUSPLUS": [" -- Macro: AC_LANG_CPLUSPLUS\n     Same as \u2018AC_LANG([C++])\u2019 (*note AC_LANG::).\n", "config"], "AC_LANG_FORTRAN77": [" -- Macro: AC_LANG_FORTRAN77\n     Same as \u2018AC_LANG([Fortran 77])\u2019 (*note AC_LANG::).\n", "config"], "AC_LANG_RESTORE": [" -- Macro: AC_LANG_RESTORE\n     Select the LANGUAGE that is saved on the top of the stack, as set\n     by \u2018AC_LANG_SAVE\u2019, remove it from the stack, and call\n     \u2018AC_LANG(LANGUAGE)\u2019.  *Note Language Choice::, for the preferred\n     way to change languages.\n", "config"], "AC_LANG_SAVE": [" -- Macro: AC_LANG_SAVE\n     Remember the current language (as set by \u2018AC_LANG\u2019) on a stack.\n     The current language does not change.  \u2018AC_LANG_PUSH\u2019 is preferred\n     (*note AC_LANG_PUSH::).\n", "config"], "AC_LINK_FILES": [" -- Macro: AC_LINK_FILES (SOURCE..., DEST...)\n     This is an obsolete version of \u2018AC_CONFIG_LINKS\u2019 (*note\n     AC_CONFIG_LINKS::.  An updated version of:\n\n          AC_LINK_FILES(config/$machine.h config/$obj_format.h,\n                        host.h            object.h)\n\n     is:\n\n          AC_CONFIG_LINKS([host.h:config/$machine.h\n                          object.h:config/$obj_format.h])\n", "config"], "AC_LN_S": [" -- Macro: AC_LN_S\n     Replaced by \u2018AC_PROG_LN_S\u2019 (*note AC_PROG_LN_S::).\n", "config"], "AC_LONG_64_BITS": [" -- Macro: AC_LONG_64_BITS\n     Define \u2018LONG_64_BITS\u2019 if the C type \u2018long int\u2019 is 64 bits wide.\n     Use the generic macro \u2018AC_CHECK_SIZEOF([long int])\u2019 instead (*note\n     AC_CHECK_SIZEOF::).\n", "config"], "AC_LONG_DOUBLE": [" -- Macro: AC_LONG_DOUBLE\n     If the C compiler supports a working \u2018long double\u2019 type with more\n     range or precision than the \u2018double\u2019 type, define\n     \u2018HAVE_LONG_DOUBLE\u2019.\n\n     You should use \u2018AC_TYPE_LONG_DOUBLE\u2019 or \u2018AC_TYPE_LONG_DOUBLE_WIDER\u2019\n     instead.  *Note Particular Types::.\n", "config"], "AC_LONG_FILE_NAMES": [" -- Macro: AC_LONG_FILE_NAMES\n     Replaced by\n          AC_SYS_LONG_FILE_NAMES\n     *Note AC_SYS_LONG_FILE_NAMES::.\n", "config"], "AC_MAJOR_HEADER": [" -- Macro: AC_MAJOR_HEADER\n     Replaced by \u2018AC_HEADER_MAJOR\u2019 (*note AC_HEADER_MAJOR::).\n", "config"], "AC_MEMORY_H": [" -- Macro: AC_MEMORY_H\n     Used to define \u2018NEED_MEMORY_H\u2019 if the \u2018mem\u2019 functions were defined\n     in \u2018memory.h\u2019.  Today it is equivalent to\n     \u2018AC_CHECK_HEADERS([memory.h])\u2019 (*note AC_CHECK_HEADERS::).  Adjust\n     your code to get the \u2018mem\u2019 functions from \u2018string.h\u2019 instead.\n", "config"], "AC_MINGW32": [" -- Macro: AC_MINGW32\n     Similar to \u2018AC_CYGWIN\u2019 but checks for the MinGW compiler\n     environment and sets \u2018MINGW32\u2019.  Don\u2019t use this macro, the\n     dignified means to check the nature of the host is using\n     \u2018AC_CANONICAL_HOST\u2019 (*note Canonicalizing::).\n", "config"], "AC_MINIX": [" -- Macro: AC_MINIX\n     This macro is a platform-specific subset of\n     \u2018AC_USE_SYSTEM_EXTENSIONS\u2019 (*note AC_USE_SYSTEM_EXTENSIONS::).\n", "config"], "AC_MINUS_C_MINUS_O": [" -- Macro: AC_MINUS_C_MINUS_O\n     Replaced by \u2018AC_PROG_CC_C_O\u2019 (*note AC_PROG_CC_C_O::).\n", "config"], "AC_MMAP": [" -- Macro: AC_MMAP\n     Replaced by \u2018AC_FUNC_MMAP\u2019 (*note AC_FUNC_MMAP::).\n", "config"], "AC_MODE_T": [" -- Macro: AC_MODE_T\n     Replaced by \u2018AC_TYPE_MODE_T\u2019 (*note AC_TYPE_MODE_T::).\n", "config"], "AC_OBJEXT": [" -- Macro: AC_OBJEXT\n     Defined the output variable \u2018OBJEXT\u2019 based on the output of the\n     compiler, after .c files have been excluded.  Typically set to \u2018o\u2019\n     if Posix, \u2018obj\u2019 if a DOS variant.  Now the compiler checking macros\n     handle this automatically.\n", "config"], "AC_OBSOLETE": [" -- Macro: AC_OBSOLETE (THIS-MACRO-NAME, [SUGGESTION])\n     Make M4 print a message to the standard error output warning that\n     THIS-MACRO-NAME is obsolete, and giving the file and line number\n     where it was called.  THIS-MACRO-NAME should be the name of the\n     macro that is calling \u2018AC_OBSOLETE\u2019.  If SUGGESTION is given, it is\n     printed at the end of the warning message; for example, it can be a\n     suggestion for what to use instead of THIS-MACRO-NAME.\n\n     For instance\n\n          AC_OBSOLETE([$0], [; use AC_CHECK_HEADERS(unistd.h) instead])dnl\n\n     You are encouraged to use \u2018AU_DEFUN\u2019 instead, since it gives better\n     services to the user (*note AU_DEFUN::).\n", "config"], "AC_OFF_T": [" -- Macro: AC_OFF_T\n     Replaced by \u2018AC_TYPE_OFF_T\u2019 (*note AC_TYPE_OFF_T::).\n", "config"], "AC_OUTPUT_COMMANDS": [" -- Macro: AC_OUTPUT_COMMANDS (EXTRA-CMDS, [INIT-CMDS])\n     Specify additional shell commands to run at the end of\n     \u2018config.status\u2019, and shell commands to initialize any variables\n     from \u2018configure\u2019.  This macro may be called multiple times.  It is\n     obsolete, replaced by \u2018AC_CONFIG_COMMANDS\u2019 (*note\n     AC_CONFIG_COMMANDS::).\n\n     Here is an unrealistic example:\n\n          fubar=27\n          AC_OUTPUT_COMMANDS([echo this is extra $fubar, and so on.],\n                             [fubar=$fubar])\n          AC_OUTPUT_COMMANDS([echo this is another, extra, bit],\n                             [echo init bit])\n\n     Aside from the fact that \u2018AC_CONFIG_COMMANDS\u2019 requires an\n     additional key, an important difference is that\n     \u2018AC_OUTPUT_COMMANDS\u2019 is quoting its arguments twice, unlike\n     \u2018AC_CONFIG_COMMANDS\u2019.  This means that \u2018AC_CONFIG_COMMANDS\u2019 can\n     safely be given macro calls as arguments:\n\n          AC_CONFIG_COMMANDS(foo, [my_FOO()])\n\n     Conversely, where one level of quoting was enough for literal\n     strings with \u2018AC_OUTPUT_COMMANDS\u2019, you need two with\n     \u2018AC_CONFIG_COMMANDS\u2019.  The following lines are equivalent:\n\n          AC_OUTPUT_COMMANDS([echo \"Square brackets: []\"])\n          AC_CONFIG_COMMANDS([default], [[echo \"Square brackets: []\"]])\n", "config"], "AC_PID_T": [" -- Macro: AC_PID_T\n     Replaced by \u2018AC_TYPE_PID_T\u2019 (*note AC_TYPE_PID_T::).\n", "config"], "AC_PREFIX": [" -- Macro: AC_PREFIX\n     Replaced by \u2018AC_PREFIX_PROGRAM\u2019 (*note AC_PREFIX_PROGRAM::).\n", "config"], "AC_PROG_CC_C89": [" -- Macro: AC_PROG_CC_C89\n     Now done by \u2018AC_PROG_CC\u2019 (*note AC_PROG_CC::).\n", "config"], "AC_PROG_CC_C99": [" -- Macro: AC_PROG_CC_C99\n     Now done by \u2018AC_PROG_CC\u2019 (*note AC_PROG_CC::).\n", "config"], "AC_PROG_CC_STDC": [" -- Macro: AC_PROG_CC_STDC\n     Now done by \u2018AC_PROG_CC\u2019 (*note AC_PROG_CC::).\n", "config"], "AC_PROGRAMS_CHECK": [" -- Macro: AC_PROGRAMS_CHECK\n     Replaced by \u2018AC_CHECK_PROGS\u2019 (*note AC_CHECK_PROGS::).\n", "config"], "AC_PROGRAMS_PATH": [" -- Macro: AC_PROGRAMS_PATH\n     Replaced by \u2018AC_PATH_PROGS\u2019 (*note AC_PATH_PROGS::).\n", "config"], "AC_PROGRAM_CHECK": [" -- Macro: AC_PROGRAM_CHECK\n     Replaced by \u2018AC_CHECK_PROG\u2019 (*note AC_CHECK_PROG::).\n", "config"], "AC_PROGRAM_EGREP": [" -- Macro: AC_PROGRAM_EGREP\n     Replaced by \u2018AC_EGREP_CPP\u2019 (*note AC_EGREP_CPP::).\n", "config"], "AC_PROGRAM_PATH": [" -- Macro: AC_PROGRAM_PATH\n     Replaced by \u2018AC_PATH_PROG\u2019 (*note AC_PATH_PROG::).\n", "config"], "AC_REMOTE_TAPE": [" -- Macro: AC_REMOTE_TAPE\n     Removed because of limited usefulness.\n", "config"], "AC_RESTARTABLE_SYSCALLS": [" -- Macro: AC_RESTARTABLE_SYSCALLS\n     This macro was renamed \u2018AC_SYS_RESTARTABLE_SYSCALLS\u2019.  However,\n     these days portable programs should use \u2018sigaction\u2019 with\n     \u2018SA_RESTART\u2019 if they want restartable system calls.  They should\n     not rely on \u2018HAVE_RESTARTABLE_SYSCALLS\u2019, since nowadays whether a\n     system call is restartable is a dynamic issue, not a\n     configuration-time issue.\n", "config"], "AC_RETSIGTYPE": [" -- Macro: AC_RETSIGTYPE\n     Replaced by \u2018AC_TYPE_SIGNAL\u2019 (*note AC_TYPE_SIGNAL::), which itself\n     is obsolete when assuming C89 or better.\n", "config"], "AC_RSH": [" -- Macro: AC_RSH\n     Removed because of limited usefulness.\n", "config"], "AC_SCO_INTL": [" -- Macro: AC_SCO_INTL\n     If on SCO Unix, add \u2018-lintl\u2019 to output variable \u2018LIBS\u2019.  This macro\n     used to do this:\n\n          AC_CHECK_LIB([intl], [strftime], [LIBS=\"-lintl $LIBS\"])\n\n     Now it just calls \u2018AC_FUNC_STRFTIME\u2019 instead (*note\n     AC_FUNC_STRFTIME::).\n", "config"], "AC_SETVBUF_REVERSED": [" -- Macro: AC_SETVBUF_REVERSED\n     Replaced by\n          AC_FUNC_SETVBUF_REVERSED\n     *Note AC_FUNC_SETVBUF_REVERSED::.\n", "config"], "AC_SET_MAKE": [" -- Macro: AC_SET_MAKE\n     Replaced by \u2018AC_PROG_MAKE_SET\u2019 (*note AC_PROG_MAKE_SET::).\n", "config"], "AC_SIZEOF_TYPE": [" -- Macro: AC_SIZEOF_TYPE\n     Replaced by \u2018AC_CHECK_SIZEOF\u2019 (*note AC_CHECK_SIZEOF::).\n", "config"], "AC_SIZE_T": [" -- Macro: AC_SIZE_T\n     Replaced by \u2018AC_TYPE_SIZE_T\u2019 (*note AC_TYPE_SIZE_T::).\n", "config"], "AC_STAT_MACROS_BROKEN": [" -- Macro: AC_STAT_MACROS_BROKEN\n     Replaced by \u2018AC_HEADER_STAT\u2019 (*note AC_HEADER_STAT::).\n", "config"], "AC_STDC_HEADERS": [" -- Macro: AC_STDC_HEADERS\n     Replaced by \u2018AC_HEADER_STDC\u2019 (*note AC_HEADER_STDC::), which is\n     itself obsolete.  Nowadays it is safe to assume the facilities of\n     C90 exist.\n", "config"], "AC_STRCOLL": [" -- Macro: AC_STRCOLL\n     Replaced by \u2018AC_FUNC_STRCOLL\u2019 (*note AC_FUNC_STRCOLL::).\n", "config"], "AC_STRUCT_ST_BLKSIZE": [" -- Macro: AC_STRUCT_ST_BLKSIZE\n     If \u2018struct stat\u2019 contains an \u2018st_blksize\u2019 member, define\n     \u2018HAVE_STRUCT_STAT_ST_BLKSIZE\u2019.  The former name, \u2018HAVE_ST_BLKSIZE\u2019\n     is to be avoided, as its support will cease in the future.  This\n     macro is obsoleted, and should be replaced by\n\n          AC_CHECK_MEMBERS([struct stat.st_blksize])\n     *Note AC_CHECK_MEMBERS::.\n", "config"], "AC_STRUCT_ST_RDEV": [" -- Macro: AC_STRUCT_ST_RDEV\n     If \u2018struct stat\u2019 contains an \u2018st_rdev\u2019 member, define\n     \u2018HAVE_STRUCT_STAT_ST_RDEV\u2019.  The former name for this macro,\n     \u2018HAVE_ST_RDEV\u2019, is to be avoided as it will cease to be supported\n     in the future.  Actually, even the new macro is obsolete and should\n     be replaced by:\n          AC_CHECK_MEMBERS([struct stat.st_rdev])\n     *Note AC_CHECK_MEMBERS::.\n", "config"], "AC_ST_BLKSIZE": [" -- Macro: AC_ST_BLKSIZE\n     Replaced by \u2018AC_CHECK_MEMBERS\u2019 (*note AC_CHECK_MEMBERS::).\n", "config"], "AC_ST_BLOCKS": [" -- Macro: AC_ST_BLOCKS\n     Replaced by \u2018AC_STRUCT_ST_BLOCKS\u2019 (*note AC_STRUCT_ST_BLOCKS::).\n", "config"], "AC_ST_RDEV": [" -- Macro: AC_ST_RDEV\n     Replaced by \u2018AC_CHECK_MEMBERS\u2019 (*note AC_CHECK_MEMBERS::).\n", "config"], "AC_SYS_RESTARTABLE_SYSCALLS": [" -- Macro: AC_SYS_RESTARTABLE_SYSCALLS\n     If the system automatically restarts a system call that is\n     interrupted by a signal, define \u2018HAVE_RESTARTABLE_SYSCALLS\u2019.  This\n     macro does not check whether system calls are restarted in\n     general\u2014it checks whether a signal handler installed with \u2018signal\u2019\n     (but not \u2018sigaction\u2019) causes system calls to be restarted.  It does\n     not check whether system calls can be restarted when interrupted by\n     signals that have no handler.\n\n     These days portable programs should use \u2018sigaction\u2019 with\n     \u2018SA_RESTART\u2019 if they want restartable system calls.  They should\n     not rely on \u2018HAVE_RESTARTABLE_SYSCALLS\u2019, since nowadays whether a\n     system call is restartable is a dynamic issue, not a\n     configuration-time issue.\n", "config"], "AC_SYS_SIGLIST_DECLARED": [" -- Macro: AC_SYS_SIGLIST_DECLARED\n     This macro was renamed \u2018AC_DECL_SYS_SIGLIST\u2019.  However, even that\n     name is obsolete, as the same functionality is now achieved via\n     \u2018AC_CHECK_DECLS\u2019 (*note AC_CHECK_DECLS::).\n", "config"], "AC_TEST_CPP": [" -- Macro: AC_TEST_CPP\n     This macro was renamed \u2018AC_TRY_CPP\u2019, which in turn was replaced by\n     \u2018AC_PREPROC_IFELSE\u2019 (*note AC_PREPROC_IFELSE::).\n", "config"], "AC_TEST_PROGRAM": [" -- Macro: AC_TEST_PROGRAM\n     This macro was renamed \u2018AC_TRY_RUN\u2019, which in turn was replaced by\n     \u2018AC_RUN_IFELSE\u2019 (*note AC_RUN_IFELSE::).\n", "config"], "AC_TIMEZONE": [" -- Macro: AC_TIMEZONE\n     Replaced by \u2018AC_STRUCT_TIMEZONE\u2019 (*note AC_STRUCT_TIMEZONE::).\n", "config"], "AC_TIME_WITH_SYS_TIME": [" -- Macro: AC_TIME_WITH_SYS_TIME\n     Replaced by \u2018AC_HEADER_TIME\u2019 (*note AC_HEADER_TIME::), which is\n     itself obsolete; nowadays one need only do\n     \u2018AC_CHECK_HEADERS([sys/time.h])\u2019.\n", "config"], "AC_TRY_COMPILE": [" -- Macro: AC_TRY_COMPILE (INCLUDES, FUNCTION-BODY, [ACTION-IF-TRUE],\n          [ACTION-IF-FALSE])\n     Same as:\n\n          AC_COMPILE_IFELSE(\n            [AC_LANG_PROGRAM([[INCLUDES]],\n               [[FUNCTION-BODY]])],\n            [ACTION-IF-TRUE],\n            [ACTION-IF-FALSE])\n\n     *Note Running the Compiler::.\n\n     This macro double quotes both INCLUDES and FUNCTION-BODY.\n\n     For C and C++, INCLUDES is any \u2018#include\u2019 statements needed by the\n     code in FUNCTION-BODY (INCLUDES is ignored if the currently\n     selected language is Fortran or Fortran 77).  The compiler and\n     compilation flags are determined by the current language (*note\n     Language Choice::).\n", "config"], "AC_TRY_CPP": [" -- Macro: AC_TRY_CPP (INPUT, [ACTION-IF-TRUE], [ACTION-IF-FALSE])\n     Same as:\n\n          AC_PREPROC_IFELSE(\n            [AC_LANG_SOURCE([[INPUT]])],\n            [ACTION-IF-TRUE],\n            [ACTION-IF-FALSE])\n\n     *Note Running the Preprocessor::.\n\n     This macro double quotes the INPUT.\n", "config"], "AC_TRY_LINK": [" -- Macro: AC_TRY_LINK (INCLUDES, FUNCTION-BODY, [ACTION-IF-TRUE],\n          [ACTION-IF-FALSE])\n     Same as:\n\n          AC_LINK_IFELSE(\n            [AC_LANG_PROGRAM([[INCLUDES]],\n               [[FUNCTION-BODY]])],\n            [ACTION-IF-TRUE],\n            [ACTION-IF-FALSE])\n\n     *Note Running the Linker::.\n\n     This macro double quotes both INCLUDES and FUNCTION-BODY.\n\n     Depending on the current language (*note Language Choice::), create\n     a test program to see whether a function whose body consists of\n     FUNCTION-BODY can be compiled and linked.  If the file compiles and\n     links successfully, run shell commands ACTION-IF-FOUND, otherwise\n     run ACTION-IF-NOT-FOUND.\n\n     This macro double quotes both INCLUDES and FUNCTION-BODY.\n\n     For C and C++, INCLUDES is any \u2018#include\u2019 statements needed by the\n     code in FUNCTION-BODY (INCLUDES is ignored if the currently\n     selected language is Fortran or Fortran 77).  The compiler and\n     compilation flags are determined by the current language (*note\n     Language Choice::), and in addition \u2018LDFLAGS\u2019 and \u2018LIBS\u2019 are used\n     for linking.\n", "config"], "AC_TRY_LINK_FUNC": [" -- Macro: AC_TRY_LINK_FUNC (FUNCTION, [ACTION-IF-FOUND],\n          [ACTION-IF-NOT-FOUND])\n     This macro is equivalent to\n          AC_LINK_IFELSE([AC_LANG_CALL([], [FUNCTION])],\n            [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n     *Note Running the Linker::.\n", "config"], "AC_TRY_RUN": [" -- Macro: AC_TRY_RUN (PROGRAM, [ACTION-IF-TRUE], [ACTION-IF-FALSE],\n          [ACTION-IF-CROSS-COMPILING = \u2018AC_MSG_FAILURE\u2019])\n     Same as:\n\n          AC_RUN_IFELSE(\n            [AC_LANG_SOURCE([[PROGRAM]])],\n            [ACTION-IF-TRUE],\n            [ACTION-IF-FALSE],\n            [ACTION-IF-CROSS-COMPILING])\n\n     *Note Runtime::.\n", "config"], "AC_TYPE_SIGNAL": [" -- Macro: AC_TYPE_SIGNAL\n     If \u2018signal.h\u2019 declares \u2018signal\u2019 as returning a pointer to a\n     function returning \u2018void\u2019, define \u2018RETSIGTYPE\u2019 to be \u2018void\u2019;\n     otherwise, define it to be \u2018int\u2019.  These days, it is portable to\n     assume C89, and that signal handlers return \u2018void\u2019, without needing\n     to use this macro or \u2018RETSIGTYPE\u2019.\n\n     When targeting older K&R C, it is possible to define signal\n     handlers as returning type \u2018RETSIGTYPE\u2019, and omit a return\n     statement:\n\n          RETSIGTYPE\n          hup_handler ()\n          {\n          ...\n          }\n", "config"], "AC_UID_T": [" -- Macro: AC_UID_T\n     Replaced by \u2018AC_TYPE_UID_T\u2019 (*note AC_TYPE_UID_T::).\n", "config"], "AC_UNISTD_H": [" -- Macro: AC_UNISTD_H\n     Same as \u2018AC_CHECK_HEADERS([unistd.h])\u2019 (*note AC_CHECK_HEADERS::),\n     which is one of the tests done as a side effect by\n     \u2018AC_INCLUDES_DEFAULT\u2019 (*note Default Includes::), so usually\n     unnecessary to write explicitly.\n", "config"], "AC_USG": [" -- Macro: AC_USG\n     Define \u2018USG\u2019 if the BSD string functions (\u2018bcopy\u2019, \u2018bzero\u2019,\n     \u2018index\u2019, \u2018rindex\u2019, etc) are _not_ defined in \u2018strings.h\u2019.  Modern\n     code should assume \u2018string.h\u2019 exists and should use the ISO C\n     string functions (\u2018memmove\u2019, \u2018memset\u2019, \u2018strchr\u2019, \u2018strrchr\u2019, etc)\n     unconditionally.\n\n     \u2018strings.h\u2019 may be the only header that declares \u2018strcasecmp\u2019,\n     \u2018strncasecmp\u2019, and \u2018ffs\u2019.  \u2018AC_INCLUDES_DEFAULT\u2019 checks for it\n     (*note Default Includes::); test \u2018HAVE_STRINGS_H\u2019.\n", "config"], "AC_UTIME_NULL": [" -- Macro: AC_UTIME_NULL\n     Replaced by \u2018AC_FUNC_UTIME_NULL\u2019 (*note AC_FUNC_UTIME_NULL::).\n", "config"], "AC_VALIDATE_CACHED_SYSTEM_TUPLE": [" -- Macro: AC_VALIDATE_CACHED_SYSTEM_TUPLE ([CMD])\n     If the cache file is inconsistent with the current host, target and\n     build system types, it used to execute CMD or print a default error\n     message.  This is now handled by default.\n", "config"], "AC_VERBOSE": [" -- Macro: AC_VERBOSE (RESULT-DESCRIPTION)\n     Replaced by \u2018AC_MSG_RESULT\u2019 (*note AC_MSG_RESULT::).\n", "config"], "AC_VFORK": [" -- Macro: AC_VFORK\n     Replaced by \u2018AC_FUNC_FORK\u2019 (*note AC_FUNC_FORK::).\n", "config"], "AC_VPRINTF": [" -- Macro: AC_VPRINTF\n     Replaced by \u2018AC_FUNC_VPRINTF\u2019 (*note AC_FUNC_VPRINTF::).\n", "config"], "AC_WAIT3": [" -- Macro: AC_WAIT3\n     This macro was renamed \u2018AC_FUNC_WAIT3\u2019.  However, these days\n     portable programs should use \u2018waitpid\u2019, not \u2018wait3\u2019, as \u2018wait3\u2019 has\n     been removed from Posix.\n", "config"], "AC_WARN": [" -- Macro: AC_WARN\n     Replaced by \u2018AC_MSG_WARN\u2019 (*note AC_MSG_WARN::).\n", "config"], "AC_WARNING": [" -- Macro: AC_WARNING (MESSAGE)\n     Replaced by \u2018m4_warn\u2019 (*note m4_warn::).\n", "config"], "AC_WITH": [" -- Macro: AC_WITH (PACKAGE, ACTION-IF-GIVEN, [ACTION-IF-NOT-GIVEN])\n     This is an obsolete version of \u2018AC_ARG_WITH\u2019 that does not support\n     providing a help string (*note AC_ARG_WITH::).\n", "config"], "AC_WORDS_BIGENDIAN": [" -- Macro: AC_WORDS_BIGENDIAN\n     Replaced by \u2018AC_C_BIGENDIAN\u2019 (*note AC_C_BIGENDIAN::).\n", "config"], "AC_XENIX_DIR": [" -- Macro: AC_XENIX_DIR\n     This macro used to add \u2018-lx\u2019 to output variable \u2018LIBS\u2019 if on Xenix.\n     Also, if \u2018dirent.h\u2019 is being checked for, added \u2018-ldir\u2019 to \u2018LIBS\u2019.\n     Now it is merely an alias of \u2018AC_HEADER_DIRENT\u2019 instead, plus some\n     code to detect whether running XENIX on which you should not\n     depend:\n\n          AC_MSG_CHECKING([for Xenix])\n          AC_EGREP_CPP([yes],\n          [#if defined M_XENIX && !defined M_UNIX\n            yes\n          #endif],\n                       [AC_MSG_RESULT([yes]); XENIX=yes],\n                       [AC_MSG_RESULT([no]); XENIX=])\n     Don\u2019t use this macro, the dignified means to check the nature of\n     the host is using \u2018AC_CANONICAL_HOST\u2019 (*note Canonicalizing::).\n", "config"], "AC_YYTEXT_POINTER": [" -- Macro: AC_YYTEXT_POINTER\n     This macro was renamed \u2018AC_DECL_YYTEXT\u2019, which in turn was\n     integrated into \u2018AC_PROG_LEX\u2019 (*note AC_PROG_LEX::).\n\n\u001f", "config"], "AC_PROG_LIBTOOL": ["\u2018AC_PROG_LIBTOOL\u2019\n     Automake will turn on processing for \u2018libtool\u2019 (*note Introduction:\n     (libtool)Top.).\n", "config"], "AM_CONDITIONAL": ["\u2018AM_CONDITIONAL\u2019\n     This introduces an Automake conditional (*note Conditionals::).\n", "config"], "AM_COND_IF": ["\u2018AM_COND_IF\u2019\n     This macro allows \u2018automake\u2019 to detect subsequent access within\n     \u2018configure.ac\u2019 to a conditional previously introduced with\n     \u2018AM_CONDITIONAL\u2019, thus enabling conditional \u2018AC_CONFIG_FILES\u2019\n     (*note Usage of Conditionals::).\n", "config"], "AM_GNU_GETTEXT": ["\u2018AM_GNU_GETTEXT\u2019\n     This macro is required for packages that use GNU gettext (*note\n     gettext::).  It is distributed with gettext.  If Automake sees this\n     macro it ensures that the package meets some of gettext\u2019s\n     requirements.\n", "config"], "AM_GNU_GETTEXT_INTL_SUBDIR": ["\u2018AM_GNU_GETTEXT_INTL_SUBDIR\u2019\n     This macro specifies that the \u2018intl/\u2019 subdirectory is to be built,\n     even if the \u2018AM_GNU_GETTEXT\u2019 macro was invoked with a first\n     argument of \u2018external\u2019.\n", "config"], "AM_MAINTAINER_MODE": ["\u2018AM_MAINTAINER_MODE([DEFAULT-MODE])\u2019\n     This macro adds an \u2018--enable-maintainer-mode\u2019 option to\n     \u2018configure\u2019.  If this is used, \u2018automake\u2019 will cause\n     \u201cmaintainer-only\u201d rules to be turned off by default in the\n     generated \u2018Makefile.in\u2019s, unless DEFAULT-MODE is \u2018enable\u2019.  This\n     macro defines the \u2018MAINTAINER_MODE\u2019 conditional, which you can use\n     in your own \u2018Makefile.am\u2019.  *Note maintainer-mode::.\n", "config"], "AM_SUBST_NOTMAKE": ["\u2018AM_SUBST_NOTMAKE(VAR)\u2019\n     Prevent Automake from defining a variable VAR, even if it is\n     substituted by \u2018config.status\u2019.  Normally, Automake defines a\n     \u2018make\u2019 variable for each \u2018configure\u2019 substitution, i.e., for each\n     \u2018AC_SUBST([VAR])\u2019.  This macro prevents that definition from\n     Automake.  If \u2018AC_SUBST\u2019 has not been called for this variable,\n     then \u2018AM_SUBST_NOTMAKE\u2019 has no effects.  Preventing variable\n     definitions may be useful for substitution of multi-line values,\n     where \u2018VAR = @VALUE@\u2019 might yield unintended results.\n", "config"], "AM_INIT_AUTOMAKE": ["\u2018AM_INIT_AUTOMAKE([OPTIONS])\u2019\n     Runs many macros required for proper operation of the generated\n     Makefiles.\n\n     Today, \u2018AM_INIT_AUTOMAKE\u2019 is called with a single argument: a\n     space-separated list of Automake options that should be applied to\n     every \u2018Makefile.am\u2019 in the tree.  The effect is as if each option\n     were listed in \u2018AUTOMAKE_OPTIONS\u2019 (*note Options::).\n\n     This macro can also be called in another, _deprecated_ form:\n     \u2018AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\u2019.  In this form,\n     there are two required arguments: the package and the version\n     number.  This usage is mostly obsolete because the PACKAGE and\n     VERSION can be obtained from Autoconf\u2019s \u2018AC_INIT\u2019 macro.  However,\n     differently from what happens for \u2018AC_INIT\u2019 invocations, this\n     \u2018AM_INIT_AUTOMAKE\u2019 invocation supports shell variables\u2019 expansions\n     in the \u2018PACKAGE\u2019 and \u2018VERSION\u2019 arguments (which otherwise defaults,\n     respectively, to the \u2018PACKAGE_TARNAME\u2019 and \u2018PACKAGE_VERSION\u2019\n     defined via the \u2018AC_INIT\u2019 invocation; *note The \u2018AC_INIT\u2019 macro:\n     (autoconf)AC_INIT.); and this can still be useful in some selected\n     situations.  Our hope is that future Autoconf versions will improve\n     their support for package versions defined dynamically at configure\n     runtime; when (and if) this happens, support for the two-args\n     \u2018AM_INIT_AUTOMAKE\u2019 invocation will likely be removed from Automake.\n\n     If your \u2018configure.ac\u2019 has:\n\n          AC_INIT([src/foo.c])\n          AM_INIT_AUTOMAKE([mumble], [1.5])\n\n     you should modernize it as follows:\n\n          AC_INIT([mumble], [1.5])\n          AC_CONFIG_SRCDIR([src/foo.c])\n          AM_INIT_AUTOMAKE\n\n     Note that if you\u2019re upgrading your \u2018configure.ac\u2019 from an earlier\n     version of Automake, it is not always correct to simply move the\n     package and version arguments from \u2018AM_INIT_AUTOMAKE\u2019 directly to\n     \u2018AC_INIT\u2019, as in the example above.  The first argument to\n     \u2018AC_INIT\u2019 should be the name of your package (e.g., \u2018GNU\n     Automake\u2019), not the tarball name (e.g., \u2018automake\u2019) that you used\n     to pass to \u2018AM_INIT_AUTOMAKE\u2019.  Autoconf tries to derive a tarball\n     name from the package name, which should work for most but not all\n     package names.  (If it doesn\u2019t work for yours, you can use the\n     four-argument form of \u2018AC_INIT\u2019 to provide the tarball name\n     explicitly).\n\n     By default this macro \u2018AC_DEFINE\u2019\u2019s \u2018PACKAGE\u2019 and \u2018VERSION\u2019.  This\n     can be avoided by passing the \u2018no-define\u2019 option (*note List of\n     Automake options::):\n          AM_INIT_AUTOMAKE([no-define ...])\n", "config"], "AM_PATH_LISPDIR": ["\u2018AM_PATH_LISPDIR\u2019\n     Searches for the program \u2018emacs\u2019, and, if found, sets the output\n     variable \u2018lispdir\u2019 to the full path to Emacs\u2019 site-lisp directory.\n\n     Note that this test assumes the \u2018emacs\u2019 found to be a version that\n     supports Emacs Lisp (such as GNU Emacs or XEmacs).  Other emacsen\n     can cause this test to hang (some, like old versions of MicroEmacs,\n     start up in interactive mode, requiring \u2018C-x C-c\u2019 to exit, which is\n     hardly obvious for a non-emacs user).  In most cases, however, you\n     should be able to use \u2018C-c\u2019 to kill the test.  In order to avoid\n     problems, you can set \u2018EMACS\u2019 to \u201cno\u201d in the environment, or use\n     the \u2018--with-lispdir\u2019 option to \u2018configure\u2019 to explicitly set the\n     correct path (if you\u2019re sure you have an \u2018emacs\u2019 that supports\n     Emacs Lisp).\n", "config"], "AM_PROG_AR": ["\u2018AM_PROG_AR([ACT-IF-FAIL])\u2019\n     You must use this macro when you use the archiver in your project,\n     if you want support for unusual archivers such as Microsoft \u2018lib\u2019.\n     The content of the optional argument is executed if the archiver\n     interface is not recognized; the default action is to abort\n     configure with an error message.\n", "config"], "AM_PROG_AS": ["\u2018AM_PROG_AS\u2019\n     Use this macro when you have assembly code in your project.  This\n     will choose the assembler for you (by default the C compiler) and\n     set \u2018CCAS\u2019, and will also set \u2018CCASFLAGS\u2019 if required.\n", "config"], "AM_PROG_CC_C_O": ["\u2018AM_PROG_CC_C_O\u2019\n     This is an obsolescent macro that checks that the C compiler\n     supports the \u2018-c\u2019 and \u2018-o\u2019 options together.  Note that, since\n     Automake 1.14, the \u2018AC_PROG_CC\u2019 is rewritten to implement such\n     checks itself, and thus the explicit use of \u2018AM_PROG_CC_C_O\u2019 should\n     no longer be required.\n", "config"], "AM_PROG_LEX": ["\u2018AM_PROG_LEX\u2019\n     Like \u2018AC_PROG_LEX\u2019 (*note Particular Program Checks:\n     (autoconf)Particular Programs.), but uses the \u2018missing\u2019 script on\n     systems that do not have \u2018lex\u2019.  HP-UX 10 is one such system.\n", "config"], "AM_PROG_GCJ": ["\u2018AM_PROG_GCJ\u2019\n     This macro finds the \u2018gcj\u2019 program or causes an error.  It sets\n     \u2018GCJ\u2019 and \u2018GCJFLAGS\u2019.  \u2018gcj\u2019 is the Java front-end to the GNU\n     Compiler Collection.\n", "config"], "AM_PROG_UPC": ["\u2018AM_PROG_UPC([COMPILER-SEARCH-LIST])\u2019\n     Find a compiler for Unified Parallel C and define the \u2018UPC\u2019\n     variable.  The default COMPILER-SEARCH-LIST is \u2018upcc upc\u2019.  This\n     macro will abort \u2018configure\u2019 if no Unified Parallel C compiler is\n     found.\n", "config"], "AM_MISSING_PROG": ["\u2018AM_MISSING_PROG(NAME, PROGRAM)\u2019\n     Find a maintainer tool PROGRAM and define the NAME environment\n     variable with its location.  If PROGRAM is not detected, then NAME\n     will instead invoke the \u2018missing\u2019 script, in order to give useful\n     advice to the user about the missing maintainer tool.  *Note\n     maintainer-mode::, for more information on when the \u2018missing\u2019\n     script is appropriate.\n", "config"], "AM_SILENT_RULES": ["\u2018AM_SILENT_RULES\u2019\n     Control the machinery for less verbose build output (*note Automake\n     Silent Rules::).\n", "config"], "AM_WITH_DMALLOC": ["\u2018AM_WITH_DMALLOC\u2019\n     Add support for the Dmalloc package (https://dmalloc.com/).  If the\n     user runs \u2018configure\u2019 with \u2018--with-dmalloc\u2019, then define\n     \u2018WITH_DMALLOC\u2019 and add \u2018-ldmalloc\u2019 to \u2018LIBS\u2019.\n", "config"], "AM_PROG_MKDIR_P": ["\u2018AM_PROG_MKDIR_P\u2019\n\n     From Automake 1.8 to 1.9.6 this macro used to define the output\n     variable \u2018mkdir_p\u2019 to one of \u2018mkdir -p\u2019, \u2018install-sh -d\u2019, or\n     \u2018mkinstalldirs\u2019.\n\n     Nowadays Autoconf provides a similar functionality with\n     \u2018AC_PROG_MKDIR_P\u2019 (*note Particular Program Checks:\n     (autoconf)Particular Programs.), however this defines the output\n     variable \u2018MKDIR_P\u2019 instead.  In case you are still using the\n     \u2018AM_PROG_MKDIR_P\u2019 macro in your \u2018configure.ac\u2019, or its provided\n     variable \u2018$(mkdir_p)\u2019 in your \u2018Makefile.am\u2019, you are advised to\n     switch ASAP to the more modern Autoconf-provided interface instead;\n     both the macro and the variable might be removed in a future major\n     Automake release.\n", "config"], "AM_SET_DEPDIR": ["\u2018AM_SET_DEPDIR\u2019\n\u2018AM_DEP_TRACK\u2019\n\u2018AM_OUTPUT_DEPENDENCY_COMMANDS\u2019\n     These macros are used to implement Automake\u2019s automatic dependency\n     tracking scheme.  They are called automatically by Automake when\n     required, and there should be no need to invoke them manually.\n", "config"], "AM_DEP_TRACK": ["\u2018AM_SET_DEPDIR\u2019\n\u2018AM_DEP_TRACK\u2019\n\u2018AM_OUTPUT_DEPENDENCY_COMMANDS\u2019\n     These macros are used to implement Automake\u2019s automatic dependency\n     tracking scheme.  They are called automatically by Automake when\n     required, and there should be no need to invoke them manually.\n", "config"], "AM_OUTPUT_DEPENDENCY_COMMANDS": ["\u2018AM_SET_DEPDIR\u2019\n\u2018AM_DEP_TRACK\u2019\n\u2018AM_OUTPUT_DEPENDENCY_COMMANDS\u2019\n     These macros are used to implement Automake\u2019s automatic dependency\n     tracking scheme.  They are called automatically by Automake when\n     required, and there should be no need to invoke them manually.\n", "config"], "AM_MAKE_INCLUDE": ["\u2018AM_MAKE_INCLUDE\u2019\n     This macro is used to discover how the user\u2019s \u2018make\u2019 handles\n     \u2018include\u2019 statements.  This macro is automatically invoked when\n     needed; there should be no need to invoke it manually.\n", "config"], "AM_PROG_INSTALL_STRIP": ["\u2018AM_PROG_INSTALL_STRIP\u2019\n     This is used to find a version of \u2018install\u2019 that can be used to\n     strip a program at installation time.  This macro is automatically\n     included when required.\n", "config"], "AM_SANITY_CHECK": ["\u2018AM_SANITY_CHECK\u2019\n     This checks to make sure that a file created in the build directory\n     is newer than a file in the source directory.  This can fail on\n     systems where the clock is set incorrectly.  This macro is\n     automatically run from \u2018AM_INIT_AUTOMAKE\u2019.\n", "config"], "AM_CPPFLAGS": ["\u2018AM_CPPFLAGS\u2019\n     The contents of this variable are passed to every compilation that\n     invokes the C preprocessor; it is a list of arguments to the\n     preprocessor.  For instance, \u2018-I\u2019 and \u2018-D\u2019 options should be listed\n     here.\n\n     Automake already provides some \u2018-I\u2019 options automatically, in a\n     separate variable that is also passed to every compilation that\n     invokes the C preprocessor.  In particular it generates \u2018-I.\u2019,\n     \u2018-I$(srcdir)\u2019, and a \u2018-I\u2019 pointing to the directory holding\n     \u2018config.h\u2019 (if you\u2019ve used \u2018AC_CONFIG_HEADERS\u2019).  You can disable\n     the default \u2018-I\u2019 options using the \u2018nostdinc\u2019 option.\n\n     When a file to be included is generated during the build and not\n     part of a distribution tarball, its location is under\n     \u2018$(builddir)\u2019, not under \u2018$(srcdir)\u2019.  This matters especially for\n     packages that use header files placed in sub-directories and want\n     to allow builds outside the source tree (*note VPATH Builds::).  In\n     that case we recommend using a pair of \u2018-I\u2019 options, such as, e.g.,\n     \u2018-Isome/subdir -I$(srcdir)/some/subdir\u2019 or\n     \u2018-I$(top_builddir)/some/subdir -I$(top_srcdir)/some/subdir\u2019.  Note\n     that the reference to the build tree should come before the\n     reference to the source tree, so that accidentally leftover\n     generated files in the source directory are ignored.\n\n     \u2018AM_CPPFLAGS\u2019 is ignored in preference to a per-executable (or\n     per-library) \u2018_CPPFLAGS\u2019 variable if it is defined.\n", "config"], "AM_CFLAGS": ["\u2018AM_CFLAGS\u2019\n     This is the variable the \u2018Makefile.am\u2019 author can use to pass in\n     additional C compiler flags.  In some situations, this is not used,\n     in preference to the per-executable (or per-library) \u2018_CFLAGS\u2019.\n", "config"], "AM_LDFLAGS": ["\u2018AM_LDFLAGS\u2019\n     This is the variable the \u2018Makefile.am\u2019 author can use to pass in\n     additional linker flags.  In some situations, this is not used, in\n     preference to the per-executable (or per-library) \u2018_LDFLAGS\u2019.\n", "config"], "AM_CXXFLAGS": ["\u2018AM_CXXFLAGS\u2019\n     The maintainer\u2019s variant of \u2018CXXFLAGS\u2019.\n", "config"], "AM_OBJCFLAGS": ["\u2018AM_OBJCFLAGS\u2019\n     The maintainer\u2019s variant of \u2018OBJCFLAGS\u2019.\n", "config"], "AM_OBJCXXFLAGS": ["\u2018AM_OBJCXXFLAGS\u2019\n     The maintainer\u2019s variant of \u2018OBJCXXFLAGS\u2019.\n", "config"], "AM_UPCFLAGS": ["\u2018AM_UPCFLAGS\u2019\n     The maintainer\u2019s variant of \u2018UPCFLAGS\u2019.\n", "config"], "AM_FFLAGS": ["\u2018AM_FFLAGS\u2019\n     The maintainer\u2019s variant of \u2018FFLAGS\u2019.\n", "config"], "AM_RFLAGS": ["\u2018AM_RFLAGS\u2019\n     The maintainer\u2019s variant of \u2018RFLAGS\u2019.\n", "config"], "AM_FCFLAGS": ["\u2018AM_FCFLAGS\u2019\n     The maintainer\u2019s variant of \u2018FCFLAGS\u2019.\n", "config"], "AM_VALAFLAGS": ["\u2018AM_VALAFLAGS\u2019\n     The maintainer\u2019s variant of \u2018VALAFLAGS\u2019.\n\n          lib_LTLIBRARIES = libfoo.la\n          libfoo_la_SOURCES = foo.vala\n\n   Note that currently, you cannot use per-target \u2018*_VALAFLAGS\u2019 (*note", "config"], "AM_JAVACFLAGS": ["\u2018AM_JAVACFLAGS\u2019\n     More flags to pass to the Java compiler.  This, and not\n     \u2018JAVACFLAGS\u2019, should be used when it is necessary to put Java\n     compiler flags into \u2018Makefile.am\u2019.\n", "config"], "AM_MAKEINFOFLAGS": ["\u2018AM_MAKEINFOFLAGS\u2019\n\u2018AM_MAKEINFOHTMLFLAGS\u2019\n     Maintainer flags passed to each \u2018makeinfo\u2019 invocation.  Unlike\n     \u2018MAKEINFOFLAGS\u2019, these variables are meant to be defined by\n     maintainers in \u2018Makefile.am\u2019.  \u2018$(AM_MAKEINFOFLAGS)\u2019 is passed to\n     \u2018makeinfo\u2019 when building \u2018.info\u2019 files; and\n     \u2018$(AM_MAKEINFOHTMLFLAGS)\u2019 is used when building \u2018.html\u2019 files.\n\n     For instance, the following setting can be used to obtain one\n     single \u2018.html\u2019 file per manual, without node separators.\n          AM_MAKEINFOHTMLFLAGS = --no-headers --no-split\n\n     \u2018AM_MAKEINFOHTMLFLAGS\u2019 defaults to \u2018$(AM_MAKEINFOFLAGS)\u2019.  This\n     means that defining \u2018AM_MAKEINFOFLAGS\u2019 without defining\n     \u2018AM_MAKEINFOHTMLFLAGS\u2019 will impact builds of both \u2018.info\u2019 and\n     \u2018.html\u2019 files.\n", "config"], "AM_MAKEINFOHTMLFLAGS": ["\u2018AM_MAKEINFOFLAGS\u2019\n\u2018AM_MAKEINFOHTMLFLAGS\u2019\n     Maintainer flags passed to each \u2018makeinfo\u2019 invocation.  Unlike\n     \u2018MAKEINFOFLAGS\u2019, these variables are meant to be defined by\n     maintainers in \u2018Makefile.am\u2019.  \u2018$(AM_MAKEINFOFLAGS)\u2019 is passed to\n     \u2018makeinfo\u2019 when building \u2018.info\u2019 files; and\n     \u2018$(AM_MAKEINFOHTMLFLAGS)\u2019 is used when building \u2018.html\u2019 files.\n\n     For instance, the following setting can be used to obtain one\n     single \u2018.html\u2019 file per manual, without node separators.\n          AM_MAKEINFOHTMLFLAGS = --no-headers --no-split\n\n     \u2018AM_MAKEINFOHTMLFLAGS\u2019 defaults to \u2018$(AM_MAKEINFOFLAGS)\u2019.  This\n     means that defining \u2018AM_MAKEINFOFLAGS\u2019 without defining\n     \u2018AM_MAKEINFOHTMLFLAGS\u2019 will impact builds of both \u2018.info\u2019 and\n     \u2018.html\u2019 files.\n", "config"], "all": ["'all'\n     Compile the entire program.  This should be the default target.\n     This target need not rebuild any documentation files; Info files\n     should normally be included in the distribution, and DVI (and other\n     documentation format) files should be made only when explicitly\n     asked for.\n     By default, the Make rules should compile and link with '-g', so\n     that executable programs have debugging symbols.  Otherwise, you\n     are essentially helpless in the face of a crash, and it is often\n     far from easy to reproduce with a fresh build.", "make"], "clean": ["'clean'\n     Delete all files in the current directory that are normally created\n     by building the program.  Also delete files in other directories if\n     they are created by this makefile.  However, don't delete the files\n     that record the configuration.  Also preserve files that could be\n     made by building, but normally aren't because the distribution\n     comes with them.  There is no need to delete parent directories\n     that were created with 'mkdir -p', since they could have existed\n     anyway.\n     Delete '.dvi' files here if they are not part of the distribution.", "make"], "mostlyclean": ["'mostlyclean'\n     Like 'clean', but may refrain from deleting a few files that people\n     normally don't want to recompile.  For example, the 'mostlyclean'\n     target for GCC does not delete 'libgcc.a', because recompiling it\n     is rarely necessary and takes a lot of time.", "make"], "distclean": ["'distclean'\n     Delete all files in the current directory (or created by this\n     makefile) that are created by configuring or building the program.\n     If you have unpacked the source and built the program without\n     creating any other files, 'make distclean' should leave only the\n     files that were in the distribution.  However, there is no need to\n     delete parent directories that were created with 'mkdir -p', since\n     they could have existed anyway.", "make"], "realclean": ["'distclean'\n'realclean'\n'clobber'\n     Any of these targets might be defined to delete _more_ files than\n     'clean' does.  For example, this would delete configuration files\n     or links that you would normally create as preparation for\n     compilation, even if the makefile itself cannot create these files.", "make"], "clobber": ["'distclean'\n'realclean'\n'clobber'\n     Any of these targets might be defined to delete _more_ files than\n     'clean' does.  For example, this would delete configuration files\n     or links that you would normally create as preparation for\n     compilation, even if the makefile itself cannot create these files.", "make"], "install": ["'install'\n     Compile the program and copy the executables, libraries, and so on\n     to the file names where they should reside for actual use.  If\n     there is a simple test to verify that a program is properly\n     installed, this target should run that test.\n     Do not strip executables when installing them.  This helps eventual\n     debugging that may be needed later, and nowadays disk space is\n     cheap and dynamic loaders typically ensure debug sections are not\n     loaded during normal execution.  Users that need stripped binaries\n     may invoke the 'install-strip' target to do that.\n     If possible, write the 'install' target rule so that it does not\n     modify anything in the directory where the program was built,\n     provided 'make all' has just been done.  This is convenient for\n     building the program under one user name and installing it under\n     another.\n     The commands should create all the directories in which files are\n     to be installed, if they don't already exist.  This includes the\n     directories specified as the values of the variables 'prefix' and\n     'exec_prefix', as well as all subdirectories that are needed.  One\n     way to do this is by means of an 'installdirs' target as described\n     below.\n     Use '-' before any command for installing a man page, so that\n     'make' will ignore any errors.  This is in case there are systems\n     that don't have the Unix man page documentation system installed.\n     The way to install Info files is to copy them into '$(infodir)'\n     with '$(INSTALL_DATA)' (*note Command Variables::), and then run\n     the 'install-info' program if it is present.  'install-info' is a\n     program that edits the Info 'dir' file to add or update the menu\n     entry for the given Info file; it is part of the Texinfo package.\n     Here is a sample rule to install an Info file that also tries to\n     handle some additional situations, such as 'install-info' not being\n     present.\n          do-install-info: foo.info installdirs\n                  $(NORMAL_INSTALL)\n          # Prefer an info file in . to one in srcdir.\n                  if test -f foo.info; then d=.; \\\n                   else d=\"$(srcdir)\"; fi; \\\n                  $(INSTALL_DATA) $$d/foo.info \\\n                    \"$(DESTDIR)$(infodir)/foo.info\"\n          # Run install-info only if it exists.\n          # Use 'if' instead of just prepending '-' to the\n          # line so we notice real errors from install-info.\n          # Use '$(SHELL) -c' because some shells do not\n          # fail gracefully when there is an unknown command.\n                  $(POST_INSTALL)\n                  if $(SHELL) -c 'install-info --version' \\\n                     >/dev/null 2>&1; then \\\n                    install-info --dir-file=\"$(DESTDIR)$(infodir)/dir\" \\\n                                 \"$(DESTDIR)$(infodir)/foo.info\"; \\\n                  else true; fi\n     When writing the 'install' target, you must classify all the\n     commands into three categories: normal ones, \"pre-installation\"\n     commands and \"post-installation\" commands.  *Note Install Command\n     Categories::.", "make"], "print": ["'print'\n     Print listings of the source files that have changed.", "make"], "tar": ["'tar'\n     Create a tar file of the source files.", "make"], "shar": ["'shar'\n     Create a shell archive (shar file) of the source files.", "make"], "dist": ["'dist'\n     Create a distribution tar file for this program.  The tar file\n     should be set up so that the file names in the tar file start with\n     a subdirectory name which is the name of the package it is a\n     distribution for.  This name can include the version number.\n     For example, the distribution tar file of GCC version 1.40 unpacks\n     into a subdirectory named 'gcc-1.40'.\n     The easiest way to do this is to create a subdirectory\n     appropriately named, use 'ln' or 'cp' to install the proper files\n     in it, and then 'tar' that subdirectory.\n     Compress the tar file with 'gzip'.  For example, the actual\n     distribution file for GCC version 1.40 is called 'gcc-1.40.tar.gz'.\n     It is ok to support other free compression formats as well.\n     The 'dist' target should explicitly depend on all non-source files\n     that are in the distribution, to make sure they are up to date in\n     the distribution.  *Note Making Releases: (standards)Releases.", "make"], "TAGS": ["'TAGS'\n     Update a tags table for this program.", "make"], "check": ["'check'\n     Perform self-tests (if any).  The user must build the program\n     before running the tests, but need not install the program; you\n     should write the self-tests so that they work when the program is\n     built but not installed.", "make"], "test": ["'check'\n'test'\n     Perform self tests on the program this makefile builds.", "make"], "AR": ["'AR'\n     Archive-maintaining program; default 'ar'.", "make"], "AS": ["'AS'\n     Program for compiling assembly files; default 'as'.", "make"], "CC": ["'CC'\n     Program for compiling C programs; default 'cc'.", "make"], "CXX": ["'CXX'\n     Program for compiling C++ programs; default 'g++'.", "make"], "CPP": ["'CPP'\n     Program for running the C preprocessor, with results to standard\n     output; default '$(CC) -E'.", "make"], "FC": ["'FC'\n     Program for compiling or preprocessing Fortran and Ratfor programs;\n     default 'f77'.", "make"], "M2C": ["'M2C'\n     Program to use to compile Modula-2 source code; default 'm2c'.", "make"], "PC": ["'PC'\n     Program for compiling Pascal programs; default 'pc'.", "make"], "CO": ["'CO'\n     Program for extracting a file from RCS; default 'co'.", "make"], "GET": ["'GET'\n     Program for extracting a file from SCCS; default 'get'.", "make"], "LEX": ["'LEX'\n     Program to use to turn Lex grammars into source code; default\n     'lex'.", "make"], "YACC": ["'YACC'\n     Program to use to turn Yacc grammars into source code; default\n     'yacc'.", "make"], "LINT": ["'LINT'\n     Program to use to run lint on source code; default 'lint'.", "make"], "MAKEINFO": ["'MAKEINFO'\n     Program to convert a Texinfo source file into an Info file; default\n     'makeinfo'.", "make"], "TEX": ["'TEX'\n     Program to make TeX DVI files from TeX source; default 'tex'.", "make"], "TEXI2DVI": ["'TEXI2DVI'\n     Program to make TeX DVI files from Texinfo source; default\n     'texi2dvi'.", "make"], "WEAVE": ["'WEAVE'\n     Program to translate Web into TeX; default 'weave'.", "make"], "CWEAVE": ["'CWEAVE'\n     Program to translate C Web into TeX; default 'cweave'.", "make"], "TANGLE": ["'TANGLE'\n     Program to translate Web into Pascal; default 'tangle'.", "make"], "CTANGLE": ["'CTANGLE'\n     Program to translate C Web into C; default 'ctangle'.", "make"], "RM": ["'RM'\n     Command to remove a file; default 'rm -f'.", "make"], "ARFLAGS": ["'ARFLAGS'\n     Flags to give the archive-maintaining program; default 'rv'.", "make"], "ASFLAGS": ["'ASFLAGS'\n     Extra flags to give to the assembler (when explicitly invoked on a\n     '.s' or '.S' file).", "make"], "CFLAGS": ["'CFLAGS'\n     Extra flags to give to the C compiler.", "make"], "CXXFLAGS": ["'CXXFLAGS'\n     Extra flags to give to the C++ compiler.", "make"], "COFLAGS": ["'COFLAGS'\n     Extra flags to give to the RCS 'co' program.", "make"], "CPPFLAGS": ["'CPPFLAGS'\n     Extra flags to give to the C preprocessor and programs that use it\n     (the C and Fortran compilers).", "make"], "FFLAGS": ["'FFLAGS'\n     Extra flags to give to the Fortran compiler.", "make"], "GFLAGS": ["'GFLAGS'\n     Extra flags to give to the SCCS 'get' program.", "make"], "LDFLAGS": ["'LDFLAGS'\n     Extra flags to give to compilers when they are supposed to invoke\n     the linker, 'ld', such as '-L'.  Libraries ('-lfoo') should be\n     added to the 'LDLIBS' variable instead.", "make"], "LDLIBS": ["'LDLIBS'\n     Library flags or names given to compilers when they are supposed to\n     invoke the linker, 'ld'.  'LOADLIBES' is a deprecated (but still\n     supported) alternative to 'LDLIBS'.  Non-library linker flags, such\n     as '-L', should go in the 'LDFLAGS' variable.", "make"], "LFLAGS": ["'LFLAGS'\n     Extra flags to give to Lex.", "make"], "YFLAGS": ["'YFLAGS'\n     Extra flags to give to Yacc.", "make"], "PFLAGS": ["'PFLAGS'\n     Extra flags to give to the Pascal compiler.", "make"], "RFLAGS": ["'RFLAGS'\n     Extra flags to give to the Fortran compiler for Ratfor programs.", "make"], "LINTFLAGS": ["'LINTFLAGS'\n     Extra flags to give to lint.", "make"], "parse.tab.h',": ["'parse.tab.h', when 'parse.y' is changed, the recipe 'bison -d parse.y'", "make"], "@": ["'$@'\n     The file name of the target.", "make"], "%": ["'$%'\n     The target member name, when the target is an archive member.", "make"], "<": ["'$<'\n     The name of the first prerequisite.", "make"], "?": ["'$?'\n     The names of all the prerequisites that are newer than the target,\n     with spaces between them.  For prerequisites which are archive\n     members, only the named member is used (*note Archives::).", "make"], "^": ["'$^'\n'$+'\n     The names of all the prerequisites, with spaces between them.  For\n     prerequisites which are archive members, only the named member is\n     used (*note Archives::).  The value of '$^' omits duplicate\n     prerequisites, while '$+' retains them and preserves their order.", "make"], "+": ["'$^'\n'$+'\n     The names of all the prerequisites, with spaces between them.  For\n     prerequisites which are archive members, only the named member is\n     used (*note Archives::).  The value of '$^' omits duplicate\n     prerequisites, while '$+' retains them and preserves their order.", "make"], "|": ["'$|'\n     The names of all the order-only prerequisites, with spaces between\n     them.", "make"], "*": ["'$*'\n     The stem with which an implicit rule matches (*note How Patterns\n     Match: Pattern Match.).", "make"], "@D": ["'$(@D)'\n'$(@F)'\n     The directory part and the file-within-directory part of '$@'.", "make"], "@F": ["'$(@D)'\n'$(@F)'\n     The directory part and the file-within-directory part of '$@'.", "make"], "*D": ["'$(*D)'\n'$(*F)'\n     The directory part and the file-within-directory part of '$*'.", "make"], "*F": ["'$(*D)'\n'$(*F)'\n     The directory part and the file-within-directory part of '$*'.", "make"], "%D": ["'$(%D)'\n'$(%F)'\n     The directory part and the file-within-directory part of '$%'.", "make"], "%F": ["'$(%D)'\n'$(%F)'\n     The directory part and the file-within-directory part of '$%'.", "make"], "<D": ["'$(<D)'\n'$(<F)'\n     The directory part and the file-within-directory part of '$<'.", "make"], "<F": ["'$(<D)'\n'$(<F)'\n     The directory part and the file-within-directory part of '$<'.", "make"], "^D": ["'$(^D)'\n'$(^F)'\n     The directory part and the file-within-directory part of '$^'.", "make"], "^F": ["'$(^D)'\n'$(^F)'\n     The directory part and the file-within-directory part of '$^'.", "make"], "+D": ["'$(+D)'\n'$(+F)'\n     The directory part and the file-within-directory part of '$+'.", "make"], "+F": ["'$(+D)'\n'$(+F)'\n     The directory part and the file-within-directory part of '$+'.", "make"], "?D": ["'$(?D)'\n'$(?F)'\n     The directory part and the file-within-directory part of '$?'.", "make"], "?F": ["'$(?D)'\n'$(?F)'\n     The directory part and the file-within-directory part of '$?'.", "make"], "bar.f'": ["'bar.f' exist, 'make' will choose the first rule and compile 'bar.c'", "make"], "#f": ["'#f'\n     False is converted into the empty string: in 'make' conditionals\n     the empty string is considered false.", "make"], "#t": ["'#t'\n     True is converted to the string '#t': in 'make' conditionals any\n     non-empty string is considered true.", "make"], "symbol": ["'symbol'\n'number'\n     A symbol or number is converted into the string representation of\n     that symbol or number.", "make"], "number": ["'symbol'\n'number'\n     A symbol or number is converted into the string representation of\n     that symbol or number.", "make"], "character": ["'character'\n     A printable character is converted to the same character.", "make"], "string": ["'string'\n     A string containing only printable characters is converted to the\n     same string.", "make"], "list": ["'list'\n     A list is converted recursively according to the above rules.  This\n     implies that any structured list will be flattened (that is, a\n     result of ''(a b (c d) e)' will be converted to the 'make' string\n     'a b c d e').", "make"], "other": ["'other'\n     Any other Guile type results in an error.  In future versions of\n     'make', other Guile types may be converted.", "make"], "gmk-expand": ["'gmk-expand'\n     This procedure takes a single argument which is converted into a\n     string.  The string is expanded by 'make' using normal 'make'\n     expansion rules.  The result of the expansion is converted into a\n     Guile string and provided as the result of the procedure.", "make"], "gmk-eval": ["'gmk-eval'\n     This procedure takes a single argument which is converted into a\n     string.  The string is evaluated by 'make' as if it were a\n     makefile.  This is the same capability available via the 'eval'\n     function (*note Eval Function::).  The result of the 'gmk-eval'\n     procedure is always the empty string.\n     Note that 'gmk-eval' is not quite the same as using 'gmk-expand'\n     with the 'eval' function: in the latter case the evaluated string\n     will be expanded _twice_; first by 'gmk-expand', then again by the\n     'eval' function.", "make"], "gmk_floc": ["'gmk_floc'\n     This structure represents a filename/location pair.  It is provided\n     when defining items, so GNU 'make' can inform the user later where\n     the definition occurred if necessary.", "make"], "name": ["'name'\n     The function name.  This is what the makefile should use to invoke\n     the function.  The name must be between 1 and 255 characters long\n     and it may only contain alphanumeric, period ('.'), dash ('-'), and\n     underscore ('_') characters.  It may not begin with a period.", "make"], "func_ptr": ["'func_ptr'\n     A pointer to a function that 'make' will invoke when it expands the\n     function in a makefile.  This function must be defined by the\n     loaded object.", "make"], "min_args": ["'min_args'\n     The minimum number of arguments the function will accept.  Must be\n     between 0 and 255.  GNU 'make' will check this and fail before\n     invoking 'func_ptr' if the function was invoked with too few\n     arguments.", "make"], "max_args": ["'max_args'\n     The maximum number of arguments the function will accept.  Must be\n     between 0 and 255.  GNU 'make' will check this and fail before\n     invoking 'func_ptr' if the function was invoked with too many\n     arguments.  If the value is 0, then any number of arguments is\n     accepted.  If the value is greater than 0, then it must be greater\n     than or equal to 'min_args'.", "make"], "flags": ["'flags'\n     Flags that specify how this function will operate; the desired\n     flags should be OR'd together.  If the 'GMK_FUNC_NOEXPAND' flag is\n     given then the function arguments will not be expanded before the\n     function is called; otherwise they will be expanded first.", "make"], "gmk_expand": ["'gmk_expand'\n     This function takes a string and expands it using 'make' expansion\n     rules.  The result of the expansion is returned in a nil-terminated\n     string buffer.  The caller is responsible for calling 'gmk_free'\n     with a pointer to the returned buffer when done.", "make"], "gmk_eval": ["'gmk_eval'\n     This function takes a buffer and evaluates it as a segment of\n     makefile syntax.  This function can be used to define new\n     variables, new rules, etc.  It is equivalent to using the 'eval'\n     'make' function.", "make"], "gmk_alloc": ["'gmk_alloc'\n     Return a pointer to a newly-allocated buffer.  This function will\n     always return a valid pointer; if not enough memory is available\n     'make' will exit.  'gmk_alloc' does not initialize allocated\n     memory.", "make"], "gmk_free": ["'gmk_free'\n     Free a buffer returned to you by 'make'.  Once the 'gmk_free'\n     function returns the string will no longer be valid.  If NULL is\n     passed to 'gmk_free', no operation is performed.", "make"], "DESTDIR'": ["'DESTDIR' should be supported only in the 'install*' and 'uninstall*'", "make"], "prefix": ["'prefix'\n     A prefix used in constructing the default values of the variables\n     listed below.  The default value of 'prefix' should be\n     '/usr/local'.  When building the complete GNU system, the prefix\n     will be empty and '/usr' will be a symbolic link to '/'.  (If you\n     are using Autoconf, write it as '@prefix@'.)\n     Running 'make install' with a different value of 'prefix' from the\n     one used to build the program should _not_ recompile the program.", "make"], "exec_prefix": ["'exec_prefix'\n     A prefix used in constructing the default values of some of the\n     variables listed below.  The default value of 'exec_prefix' should\n     be '$(prefix)'.  (If you are using Autoconf, write it as\n     '@exec_prefix@'.)\n     Generally, '$(exec_prefix)' is used for directories that contain\n     machine-specific files (such as executables and subroutine\n     libraries), while '$(prefix)' is used directly for other\n     directories.\n     Running 'make install' with a different value of 'exec_prefix' from\n     the one used to build the program should _not_ recompile the\n     program.", "make"], "bindir": ["'bindir'\n     The directory for installing executable programs that users can\n     run.  This should normally be '/usr/local/bin', but write it as\n     '$(exec_prefix)/bin'.  (If you are using Autoconf, write it as\n     '@bindir@'.)", "make"], "sbindir": ["'sbindir'\n     The directory for installing executable programs that can be run\n     from the shell, but are only generally useful to system\n     administrators.  This should normally be '/usr/local/sbin', but\n     write it as '$(exec_prefix)/sbin'.  (If you are using Autoconf,\n     write it as '@sbindir@'.)", "make"], "libexecdir": ["'libexecdir'\n     The directory for installing executable programs to be run by other\n     programs rather than by users.  This directory should normally be\n     '/usr/local/libexec', but write it as '$(exec_prefix)/libexec'.\n     (If you are using Autoconf, write it as '@libexecdir@'.)\n     The definition of 'libexecdir' is the same for all packages, so you\n     should install your data in a subdirectory thereof.  Most packages\n     install their data under '$(libexecdir)/PACKAGE-NAME/', possibly\n     within additional subdirectories thereof, such as\n     '$(libexecdir)/PACKAGE-NAME/MACHINE/VERSION'.", "make"], "datarootdir": ["'datarootdir'\n     The root of the directory tree for read-only\n     architecture-independent data files.  This should normally be\n     '/usr/local/share', but write it as '$(prefix)/share'.  (If you are\n     using Autoconf, write it as '@datarootdir@'.)  'datadir''s default\n     value is based on this variable; so are 'infodir', 'mandir', and\n     others.", "make"], "datadir": ["'datadir'\n     The directory for installing idiosyncratic read-only\n     architecture-independent data files for this program.  This is\n     usually the same place as 'datarootdir', but we use the two\n     separate variables so that you can move these program-specific\n     files without altering the location for Info files, man pages, etc.\n     This should normally be '/usr/local/share', but write it as\n     '$(datarootdir)'.  (If you are using Autoconf, write it as\n     '@datadir@'.)\n     The definition of 'datadir' is the same for all packages, so you\n     should install your data in a subdirectory thereof.  Most packages\n     install their data under '$(datadir)/PACKAGE-NAME/'.", "make"], "sysconfdir": ["'sysconfdir'\n     The directory for installing read-only data files that pertain to a\n     single machine-that is to say, files for configuring a host.\n     Mailer and network configuration files, '/etc/passwd', and so forth\n     belong here.  All the files in this directory should be ordinary\n     ASCII text files.  This directory should normally be\n     '/usr/local/etc', but write it as '$(prefix)/etc'.  (If you are\n     using Autoconf, write it as '@sysconfdir@'.)\n     Do not install executables here in this directory (they probably\n     belong in '$(libexecdir)' or '$(sbindir)').  Also do not install\n     files that are modified in the normal course of their use (programs\n     whose purpose is to change the configuration of the system\n     excluded).  Those probably belong in '$(localstatedir)'.", "make"], "sharedstatedir": ["'sharedstatedir'\n     The directory for installing architecture-independent data files\n     which the programs modify while they run.  This should normally be\n     '/usr/local/com', but write it as '$(prefix)/com'.  (If you are\n     using Autoconf, write it as '@sharedstatedir@'.)", "make"], "localstatedir": ["'localstatedir'\n     The directory for installing data files which the programs modify\n     while they run, and that pertain to one specific machine.  Users\n     should never need to modify files in this directory to configure\n     the package's operation; put such configuration information in\n     separate files that go in '$(datadir)' or '$(sysconfdir)'.\n     '$(localstatedir)' should normally be '/usr/local/var', but write\n     it as '$(prefix)/var'.  (If you are using Autoconf, write it as\n     '@localstatedir@'.)", "make"], "runstatedir": ["'runstatedir'\n     The directory for installing data files which the programs modify\n     while they run, that pertain to one specific machine, and which\n     need not persist longer than the execution of the program--which is\n     generally long-lived, for example, until the next reboot.  PID\n     files for system daemons are a typical use.  In addition, this\n     directory should not be cleaned except perhaps at reboot, while the\n     general '/tmp' ('TMPDIR') may be cleaned arbitrarily.  This should\n     normally be '/var/run', but write it as '$(localstatedir)/run'.\n     Having it as a separate variable allows the use of '/run' if\n     desired, for example.  (If you are using Autoconf 2.70 or later,\n     write it as '@runstatedir@'.)", "make"], "includedir": ["'includedir'\n     The directory for installing header files to be included by user\n     programs with the C '#include' preprocessor directive.  This should\n     normally be '/usr/local/include', but write it as\n     '$(prefix)/include'.  (If you are using Autoconf, write it as\n     '@includedir@'.)\n     Most compilers other than GCC do not look for header files in\n     directory '/usr/local/include'.  So installing the header files\n     this way is only useful with GCC.  Sometimes this is not a problem\n     because some libraries are only really intended to work with GCC.\n     But some libraries are intended to work with other compilers.  They\n     should install their header files in two places, one specified by\n     'includedir' and one specified by 'oldincludedir'.", "make"], "oldincludedir": ["'oldincludedir'\n     The directory for installing '#include' header files for use with\n     compilers other than GCC.  This should normally be '/usr/include'.\n     (If you are using Autoconf, you can write it as '@oldincludedir@'.)\n     The Makefile commands should check whether the value of\n     'oldincludedir' is empty.  If it is, they should not try to use it;\n     they should cancel the second installation of the header files.\n     A package should not replace an existing header in this directory\n     unless the header came from the same package.  Thus, if your Foo\n     package provides a header file 'foo.h', then it should install the\n     header file in the 'oldincludedir' directory if either (1) there is\n     no 'foo.h' there or (2) the 'foo.h' that exists came from the Foo\n     package.\n     To tell whether 'foo.h' came from the Foo package, put a magic\n     string in the file--part of a comment--and 'grep' for that string.", "make"], "docdir": ["'docdir'\n     The directory for installing documentation files (other than Info)\n     for this package.  By default, it should be\n     '/usr/local/share/doc/YOURPKG', but it should be written as\n     '$(datarootdir)/doc/YOURPKG'.  (If you are using Autoconf, write it\n     as '@docdir@'.)  The YOURPKG subdirectory, which may include a\n     version number, prevents collisions among files with common names,\n     such as 'README'.", "make"], "infodir": ["'infodir'\n     The directory for installing the Info files for this package.  By\n     default, it should be '/usr/local/share/info', but it should be\n     written as '$(datarootdir)/info'.  (If you are using Autoconf,\n     write it as '@infodir@'.)  'infodir' is separate from 'docdir' for\n     compatibility with existing practice.", "make"], "htmldir": ["'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "make"], "dvidir": ["'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "make"], "pdfdir": ["'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "make"], "psdir": ["'htmldir'\n'dvidir'\n'pdfdir'\n'psdir'\n     Directories for installing documentation files in the particular\n     format.  They should all be set to '$(docdir)' by default.  (If you\n     are using Autoconf, write them as '@htmldir@', '@dvidir@', etc.)\n     Packages which supply several translations of their documentation\n     should install them in '$(htmldir)/'LL, '$(pdfdir)/'LL, etc.  where\n     LL is a locale abbreviation such as 'en' or 'pt_BR'.", "make"], "libdir": ["'libdir'\n     The directory for object files and libraries of object code.  Do\n     not install executables here, they probably ought to go in\n     '$(libexecdir)' instead.  The value of 'libdir' should normally be\n     '/usr/local/lib', but write it as '$(exec_prefix)/lib'.  (If you\n     are using Autoconf, write it as '@libdir@'.)", "make"], "lispdir": ["'lispdir'\n     The directory for installing any Emacs Lisp files in this package.\n     By default, it should be '/usr/local/share/emacs/site-lisp', but it\n     should be written as '$(datarootdir)/emacs/site-lisp'.\n     If you are using Autoconf, write the default as '@lispdir@'.  In\n     order to make '@lispdir@' work, you need the following lines in\n     your 'configure.ac' file:\n          lispdir='${datarootdir}/emacs/site-lisp'\n          AC_SUBST(lispdir)", "make"], "localedir": ["'localedir'\n     The directory for installing locale-specific message catalogs for\n     this package.  By default, it should be '/usr/local/share/locale',\n     but it should be written as '$(datarootdir)/locale'.  (If you are\n     using Autoconf, write it as '@localedir@'.)  This directory usually\n     has a subdirectory per locale.", "make"], "mandir": ["'mandir'\n     The top-level directory for installing the man pages (if any) for\n     this package.  It will normally be '/usr/local/share/man', but you\n     should write it as '$(datarootdir)/man'.  (If you are using\n     Autoconf, write it as '@mandir@'.)", "make"], "man1dir": ["'man1dir'\n     The directory for installing section 1 man pages.  Write it as\n     '$(mandir)/man1'.", "make"], "man2dir": ["'man2dir'\n     The directory for installing section 2 man pages.  Write it as\n     '$(mandir)/man2'", "make"], "...": ["'...'\n     Use these names instead of 'manext' if the package needs to install\n     man pages in more than one section of the manual.", "make"], "manext": ["'manext'\n     The file name extension for the installed man page.  This should\n     contain a period followed by the appropriate digit; it should\n     normally be '.1'.", "make"], "man1ext": ["'man1ext'\n     The file name extension for installed section 1 man pages.", "make"], "man2ext": ["'man2ext'\n     The file name extension for installed section 2 man pages.", "make"], "srcdir": ["'srcdir'\n     The directory for the sources being compiled.  The value of this\n     variable is normally inserted by the 'configure' shell script.  (If\n     you are using Autoconf, use 'srcdir = @srcdir@'.)", "make"], "install-html": ["'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "make"], "install-dvi": ["'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "make"], "install-pdf": ["'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "make"], "install-ps": ["'install-html'\n'install-dvi'\n'install-pdf'\n'install-ps'\n     These targets install documentation in formats other than Info;\n     they're intended to be called explicitly by the person installing\n     the package, if that format is desired.  GNU prefers Info files, so\n     these must be installed by the 'install' target.\n     When you have many documentation files to install, we recommend\n     that you avoid collisions and clutter by arranging for these\n     targets to install in subdirectories of the appropriate\n     installation directory, such as 'htmldir'.  As one example, if your\n     package has multiple manuals, and you wish to install HTML\n     documentation with many files (such as the \"split\" mode output by\n     'makeinfo --html'), you'll certainly want to use subdirectories, or\n     two nodes with the same name in different manuals will overwrite\n     each other.\n     Please make these 'install-FORMAT' targets invoke the commands for\n     the FORMAT target, for example, by making FORMAT a dependency.", "make"], "uninstall": ["'uninstall'\n     Delete all the installed files--the copies that the 'install' and\n     'install-*' targets create.\n     This rule should not modify the directories where compilation is\n     done, only the directories where files are installed.\n     The uninstallation commands are divided into three categories, just\n     like the installation commands.  *Note Install Command\n     Categories::.", "make"], "install-strip": ["'install-strip'\n     Like 'install', but strip the executable files while installing\n     them.  In simple cases, this target can use the 'install' target in\n     a simple way:\n          install-strip:\n                  $(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' \\\n                          install\n     But if the package installs scripts as well as real executables,\n     the 'install-strip' target can't just refer to the 'install'\n     target; it has to strip the executables but not the scripts.\n     'install-strip' should not strip the executables in the build\n     directory which are being copied for installation.  It should only\n     strip the copies that are installed.\n     Normally we do not recommend stripping an executable unless you are\n     sure the program has no bugs.  However, it can be reasonable to\n     install a stripped executable for actual execution while saving the\n     unstripped executable elsewhere in case there is a bug.", "make"], "maintainer-clean": ["'maintainer-clean'\n     Delete almost everything that can be reconstructed with this\n     Makefile.  This typically includes everything deleted by\n     'distclean', plus more: C source files produced by Bison, tags\n     tables, Info files, and so on.\n     The reason we say \"almost everything\" is that running the command\n     'make maintainer-clean' should not delete 'configure' even if\n     'configure' can be remade using a rule in the Makefile.  More\n     generally, 'make maintainer-clean' should not delete anything that\n     needs to exist in order to run 'configure' and then begin to build\n     the program.  Also, there is no need to delete parent directories\n     that were created with 'mkdir -p', since they could have existed\n     anyway.  These are the only exceptions; 'maintainer-clean' should\n     delete everything else that can be rebuilt.\n     The 'maintainer-clean' target is intended to be used by a\n     maintainer of the package, not by ordinary users.  You may need\n     special tools to reconstruct some of the files that 'make\n     maintainer-clean' deletes.  Since these files are normally included\n     in the distribution, we don't take care to make them easy to\n     reconstruct.  If you find you need to unpack the full distribution\n     again, don't blame us.\n     To help make users aware of this, the commands for the special\n     'maintainer-clean' target should start with these two:\n          @echo 'This command is intended for maintainers to use; it'\n          @echo 'deletes files that may need special tools to rebuild.'", "make"], "info": ["'info'\n     Generate any Info files needed.  The best way to write the rules is\n     as follows:\n          info: foo.info\n          foo.info: foo.texi chap1.texi chap2.texi\n                  $(MAKEINFO) $(srcdir)/foo.texi\n     You must define the variable 'MAKEINFO' in the Makefile.  It should\n     run the 'makeinfo' program, which is part of the Texinfo\n     distribution.\n     Normally a GNU distribution comes with Info files, and that means\n     the Info files are present in the source directory.  Therefore, the\n     Make rule for an info file should update it in the source\n     directory.  When users build the package, ordinarily Make will not\n     update the Info files because they will already be up to date.", "make"], "dvi": ["'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "make"], "html": ["'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "make"], "pdf": ["'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "make"], "ps": ["'dvi'\n'html'\n'pdf'\n'ps'\n     Generate documentation files in the given format.  These targets\n     should always exist, but any or all can be a no-op if the given\n     output format cannot be generated.  These targets should not be\n     dependencies of the 'all' target; the user must manually invoke\n     them.\n     Here's an example rule for generating DVI files from Texinfo:\n          dvi: foo.dvi\n          foo.dvi: foo.texi chap1.texi chap2.texi\n                  $(TEXI2DVI) $(srcdir)/foo.texi\n     You must define the variable 'TEXI2DVI' in the Makefile.  It should\n     run the program 'texi2dvi', which is part of the Texinfo\n     distribution.  ('texi2dvi' uses TeX to do the real work of\n     formatting.  TeX is not distributed with Texinfo.)  Alternatively,\n     write only the dependencies, and allow GNU 'make' to provide the\n     command.\n     Here's another example, this one for generating HTML from Texinfo:\n          html: foo.html\n          foo.html: foo.texi chap1.texi chap2.texi\n                  $(TEXI2HTML) $(srcdir)/foo.texi\n     Again, you would define the variable 'TEXI2HTML' in the Makefile;\n     for example, it might run 'makeinfo --no-split --html' ('makeinfo'\n     is part of the Texinfo distribution).", "make"], "installcheck": ["'installcheck'\n     Perform installation tests (if any).  The user must build and\n     install the program before running the tests.  You should not\n     assume that '$(bindir)' is in the search path.", "make"], "installdirs": ["'installdirs'\n     It's useful to add a target named 'installdirs' to create the\n     directories where files are installed, and their parent\n     directories.  There is a script called 'mkinstalldirs' which is\n     convenient for this; you can find it in the Gnulib package.  You\n     can use a rule like this:\n          # Make sure all installation directories (e.g. $(bindir))\n          # actually exist by making them if necessary.\n          installdirs: mkinstalldirs\n                  $(srcdir)/mkinstalldirs $(bindir) $(datadir) \\\n                                          $(libdir) $(infodir) \\\n                                          $(mandir)\n     or, if you wish to support 'DESTDIR' (strongly encouraged),\n          # Make sure all installation directories (e.g. $(bindir))\n          # actually exist by making them if necessary.\n          installdirs: mkinstalldirs\n                  $(srcdir)/mkinstalldirs \\\n                      $(DESTDIR)$(bindir) $(DESTDIR)$(datadir) \\\n                      $(DESTDIR)$(libdir) $(DESTDIR)$(infodir) \\\n                      $(DESTDIR)$(mandir)\n     This rule should not modify the directories where compilation is\n     done.  It should do nothing but create installation directories.", "make"], "define": ["'define VARIABLE'\n'define VARIABLE ='\n'define VARIABLE :='\n'define VARIABLE ::='\n'define VARIABLE :::='\n'define VARIABLE +='\n'define VARIABLE ?='\n'endef'\n     Define multi-line variables.\n     *Note Multi-Line::.", "make"], "endef": ["'define VARIABLE'\n'define VARIABLE ='\n'define VARIABLE :='\n'define VARIABLE ::='\n'define VARIABLE :::='\n'define VARIABLE +='\n'define VARIABLE ?='\n'endef'\n     Define multi-line variables.\n     *Note Multi-Line::.", "make"], "undefine": ["'undefine VARIABLE'\n     Undefining variables.\n     *Note Undefine Directive::.", "make"], "ifdef": ["'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "make"], "ifndef": ["'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "make"], "ifeq": ["'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "make"], "ifneq": ["'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "make"], "else": ["'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "make"], "endif": ["'ifdef VARIABLE'\n'ifndef VARIABLE'\n'ifeq (A,B)'\n'ifeq \"A\" \"B\"'\n'ifeq 'A' 'B''\n'ifneq (A,B)'\n'ifneq \"A\" \"B\"'\n'ifneq 'A' 'B''\n'else'\n'endif'\n     Conditionally evaluate part of the makefile.\n     *Note Conditionals::.", "make"], "include": ["'include FILE'", "make"], "sinclude": ["'sinclude FILE'\n     Include another makefile.\n     *Note Including Other Makefiles: Include.", "make"], "override": ["'override VARIABLE-ASSIGNMENT'\n     Define a variable, overriding any previous definition, even one\n     from the command line.\n     *Note The 'override' Directive: Override Directive.", "make"], "export": ["'export VARIABLE'\n'export VARIABLE-ASSIGNMENT'\n'unexport VARIABLE'\n     Tell 'make' whether or not to export a particular variable to child\n     processes.\n     *Note Communicating Variables to a Sub-'make': Variables/Recursion.", "make"], "unexport": ["'export VARIABLE'\n'export VARIABLE-ASSIGNMENT'\n'unexport VARIABLE'\n     Tell 'make' whether or not to export a particular variable to child\n     processes.\n     *Note Communicating Variables to a Sub-'make': Variables/Recursion.", "make"], "private": ["'private VARIABLE-ASSIGNMENT'\n     Do not allow this variable assignment to be inherited by\n     prerequisites.\n     *Note Suppressing Inheritance::.", "make"], "vpath": ["'vpath'\n     Remove all search paths previously specified in any 'vpath'\n     directive.", "make"], "subst": ["'$(subst FROM,TO,TEXT)'\n     Replace FROM with TO in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "patsubst": ["'$(patsubst PATTERN,REPLACEMENT,TEXT)'\n     Replace words matching PATTERN with REPLACEMENT in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "strip": ["'$(strip STRING)'\n     Remove excess whitespace characters from STRING.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "findstring": ["'$(findstring FIND,TEXT)'\n     Locate FIND in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "filter": ["'$(filter PATTERN...,TEXT)'\n     Select words in TEXT that match one of the PATTERN words.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "filter-out": ["'$(filter-out PATTERN...,TEXT)'\n     Select words in TEXT that _do not_ match any of the PATTERN words.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "sort": ["'$(sort LIST)'\n     Sort the words in LIST lexicographically, removing duplicates.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "word": ["'$(word N,TEXT)'\n     Extract the Nth word (one-origin) of TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "words": ["'$(words TEXT)'\n     Count the number of words in TEXT.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "wordlist": ["'$(wordlist S,E,TEXT)'\n     Returns the list of words in TEXT from S to E.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "firstword": ["'$(firstword NAMES...)'\n     Extract the first word of NAMES.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "lastword": ["'$(lastword NAMES...)'\n     Extract the last word of NAMES.\n     *Note Functions for String Substitution and Analysis: Text\n     Functions.", "make"], "dir": ["'$(dir NAMES...)'\n     Extract the directory part of each file name.\n     *Note Functions for File Names: File Name Functions.", "make"], "notdir": ["'$(notdir NAMES...)'\n     Extract the non-directory part of each file name.\n     *Note Functions for File Names: File Name Functions.", "make"], "suffix": ["'$(suffix NAMES...)'\n     Extract the suffix (the last '.' and following characters) of each\n     file name.\n     *Note Functions for File Names: File Name Functions.", "make"], "basename": ["'$(basename NAMES...)'\n     Extract the base name (name without suffix) of each file name.\n     *Note Functions for File Names: File Name Functions.", "make"], "addsuffix": ["'$(addsuffix SUFFIX,NAMES...)'\n     Append SUFFIX to each word in NAMES.\n     *Note Functions for File Names: File Name Functions.", "make"], "addprefix": ["'$(addprefix PREFIX,NAMES...)'\n     Prepend PREFIX to each word in NAMES.\n     *Note Functions for File Names: File Name Functions.", "make"], "join": ["'$(join LIST1,LIST2)'\n     Join two parallel lists of words.\n     *Note Functions for File Names: File Name Functions.", "make"], "wildcard": ["'$(wildcard PATTERN...)'\n     Find file names matching a shell file name pattern (_not_ a '%'\n     pattern).\n     *Note The Function 'wildcard': Wildcard Function.", "make"], "realpath": ["'$(realpath NAMES...)'\n     For each file name in NAMES, expand to an absolute name that does\n     not contain any '.', '..', nor symlinks.\n     *Note Functions for File Names: File Name Functions.", "make"], "abspath": ["'$(abspath NAMES...)'\n     For each file name in NAMES, expand to an absolute name that does\n     not contain any '.' or '..' components, but preserves symlinks.\n     *Note Functions for File Names: File Name Functions.", "make"], "error": ["'$(error TEXT...)'\n     When this function is evaluated, 'make' generates a fatal error\n     with the message TEXT.\n     *Note Functions That Control Make: Make Control Functions.", "make"], "warning": ["'$(warning TEXT...)'\n     When this function is evaluated, 'make' generates a warning with\n     the message TEXT.\n     *Note Functions That Control Make: Make Control Functions.", "make"], "shell": ["'$(shell COMMAND)'\n     Execute a shell command and return its output.\n     *Note The 'shell' Function: Shell Function.", "make"], "origin": ["'$(origin VARIABLE)'\n     Return a string describing how the 'make' variable VARIABLE was\n     defined.\n     *Note The 'origin' Function: Origin Function.", "make"], "flavor": ["'$(flavor VARIABLE)'\n     Return a string describing the flavor of the 'make' variable\n     VARIABLE.\n     *Note The 'flavor' Function: Flavor Function.", "make"], "let": ["'$(let VAR [VAR ...],WORDS,TEXT)'\n     Evaluate TEXT with the VARs bound to the words in WORDS.\n     *Note The 'let' Function: Let Function.", "make"], "foreach": ["'$(foreach VAR,WORDS,TEXT)'\n     Evaluate TEXT with VAR bound to each word in WORDS, and concatenate\n     the results.\n     *Note The 'foreach' Function: Foreach Function.", "make"], "if": ["'$(if CONDITION,THEN-PART[,ELSE-PART])'\n     Evaluate the condition CONDITION; if it's non-empty substitute the\n     expansion of the THEN-PART otherwise substitute the expansion of\n     the ELSE-PART.\n     *Note Functions for Conditionals: Conditional Functions.", "make"], "or": ["'$(or CONDITION1[,CONDITION2[,CONDITION3...]])'\n     Evaluate each condition CONDITIONN one at a time; substitute the\n     first non-empty expansion.  If all expansions are empty, substitute\n     the empty string.\n     *Note Functions for Conditionals: Conditional Functions.", "make"], "and": ["'$(and CONDITION1[,CONDITION2[,CONDITION3...]])'\n     Evaluate each condition CONDITIONN one at a time; if any expansion\n     results in the empty string substitute the empty string.  If all\n     expansions result in a non-empty string, substitute the expansion\n     of the last CONDITION.\n     *Note Functions for Conditionals: Conditional Functions.", "make"], "intcmp": ["'$(intcmp LHS,RHS[,LT-PART[,EQ-PART[,GT-PART]]])'\n     Compare LHS and RHS numerically; substitute the expansion of\n     LT-PART, EQ-PART, or GT-PART depending on whether the left-hand\n     side is less-than, equal-to, or greater-than the right-hand side,\n     respectively.\n     *Note Functions for Conditionals: Conditional Functions.", "make"], "call": ["'$(call VAR,PARAM,...)'\n     Evaluate the variable VAR replacing any references to '$(1)',\n     '$(2)' with the first, second, etc. PARAM values.\n     *Note The 'call' Function: Call Function.", "make"], "eval": ["'$(eval TEXT)'\n     Evaluate TEXT then read the results as makefile commands.  Expands\n     to the empty string.\n     *Note The 'eval' Function: Eval Function.", "make"], "file": ["'$(file OP FILENAME,TEXT)'\n     Expand the arguments, then open the file FILENAME using mode OP and\n     write TEXT to that file.\n     *Note The 'file' Function: File Function.", "make"], "value": ["'$(value VAR)'\n     Evaluates to the contents of the variable VAR, with no expansion\n     performed on it.\n     *Note The 'value' Function: Value Function.", "make"], "MAKEFILES": ["'MAKEFILES'\n     Makefiles to be read on every invocation of 'make'.\n     *Note The Variable 'MAKEFILES': MAKEFILES Variable.", "make"], "VPATH": ["'VPATH'\n     Directory search path for files not found in the current directory.\n     *Note 'VPATH' Search Path for All Prerequisites: General Search.", "make"], "SHELL": ["'SHELL'\n     The name of the system default command interpreter, usually\n     '/bin/sh'.  You can set 'SHELL' in the makefile to change the shell\n     used to run recipes.  *Note Recipe Execution: Execution.  The\n     'SHELL' variable is handled specially when importing from and\n     exporting to the environment.  *Note Choosing the Shell::.", "make"], "MAKESHELL": ["'MAKESHELL'\n     On MS-DOS only, the name of the command interpreter that is to be\n     used by 'make'.  This value takes precedence over the value of\n     'SHELL'.  *Note MAKESHELL variable: Execution.", "make"], "MAKE": ["'MAKE'\n     The name with which 'make' was invoked.  Using this variable in\n     recipes has special meaning.  *Note How the 'MAKE' Variable Works:\n     MAKE Variable.", "make"], "MAKE_VERSION": ["'MAKE_VERSION'\n     The built-in variable 'MAKE_VERSION' expands to the version number\n     of the GNU 'make' program.", "make"], "MAKE_HOST": ["'MAKE_HOST'\n     The built-in variable 'MAKE_HOST' expands to a string representing\n     the host that GNU 'make' was built to run on.", "make"], "MAKELEVEL": ["'MAKELEVEL'\n     The number of levels of recursion (sub-'make's).\n     *Note Variables/Recursion::.", "make"], "MAKEFLAGS": ["'MAKEFLAGS'\n     The flags given to 'make'.  You can set this in the environment or\n     a makefile to set flags.\n     *Note Communicating Options to a Sub-'make': Options/Recursion.\n     It is _never_ appropriate to use 'MAKEFLAGS' directly in a recipe\n     line: its contents may not be quoted correctly for use in the\n     shell.  Always allow recursive 'make''s to obtain these values\n     through the environment from its parent.", "make"], "GNUMAKEFLAGS": ["'GNUMAKEFLAGS'\n     Other flags parsed by 'make'.  You can set this in the environment\n     or a makefile to set 'make' command-line flags.  GNU 'make' never\n     sets this variable itself.  This variable is only needed if you'd\n     like to set GNU 'make'-specific flags in a POSIX-compliant\n     makefile.  This variable will be seen by GNU 'make' and ignored by\n     other 'make' implementations.  It's not needed if you only use GNU\n     'make'; just use 'MAKEFLAGS' directly.  *Note Communicating Options\n     to a Sub-'make': Options/Recursion.", "make"], "MAKECMDGOALS": ["'MAKECMDGOALS'\n     The targets given to 'make' on the command line.  Setting this\n     variable has no effect on the operation of 'make'.\n     *Note Arguments to Specify the Goals: Goals.", "make"], "CURDIR": ["'CURDIR'\n     Set to the absolute pathname of the current working directory\n     (after all '-C' options are processed, if any).  Setting this\n     variable has no effect on the operation of 'make'.\n     *Note Recursive Use of 'make': Recursion.", "make"], "SUFFIXES": ["'SUFFIXES'\n     The default list of suffixes before 'make' reads any makefiles.", "make"], ".LIBPATTERNS": ["'.LIBPATTERNS'\n     Defines the naming of the libraries 'make' searches for, and their\n     order.\n     *Note Directory Search for Link Libraries: Libraries/Search.", "make"], "[FOO]": ["'[FOO] Error NN'\n'[FOO] SIGNAL DESCRIPTION'\n     These errors are not really 'make' errors at all.  They mean that a\n     program that 'make' invoked as part of a recipe returned a non-0\n     error code ('Error NN'), which 'make' interprets as failure, or it\n     exited in some other abnormal fashion (with a signal of some type).\n     *Note Errors in Recipes: Errors.\n     If no '***' is attached to the message, then the sub-process failed\n     but the rule in the makefile was prefixed with the '-' special\n     character, so 'make' ignored the error.", "make"], "missing": ["'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons.", "make"], "recipe": ["'recipe commences before first target. Stop.'\n'missing rule before recipe. Stop.'\n     This means the first thing in the makefile seems to be part of a\n     recipe: it begins with a recipe prefix character and doesn't appear\n     to be a legal 'make' directive (such as a variable assignment).\n     Recipes must always be associated with a target.\n     The second form is generated if the line has a semicolon as the\n     first non-whitespace character; 'make' interprets this to mean you\n     left out the \"target: prerequisite\" section of a rule.  *Note Rule\n     Syntax::.", "make"], "No": ["'No targets specified and no makefile found. Stop.'\n'No targets. Stop.'\n     The former means that you didn't provide any targets to be built on\n     the command line, and 'make' couldn't find any makefiles to read\n     in.  The latter means that some makefile was found, but it didn't\n     contain any default goal and none was given on the command line.\n     GNU 'make' has nothing to do in these situations.  *Note Arguments\n     to Specify the Makefile: Makefile Arguments.", "make"], "Makefile": ["'Makefile `XXX' was not found.'\n'Included makefile `XXX' was not found.'\n     A makefile specified on the command line (first form) or included\n     (second form) was not found.", "make"], "Included": ["'Makefile `XXX' was not found.'\n'Included makefile `XXX' was not found.'\n     A makefile specified on the command line (first form) or included\n     (second form) was not found.", "make"], "warning:": ["'warning: ignoring prerequisites on suffix rule definition'\n     According to POSIX, a suffix rule cannot contain prerequisites.  If\n     a rule that could be a suffix rule has prerequisites it is\n     interpreted as a simple explicit rule, with an odd target name.\n     This requirement is obeyed when POSIX-conforming mode is enabled\n     (the '.POSIX' target is defined).  In versions of GNU 'make' prior\n     to 4.3, no warning was emitted and a suffix rule was created,\n     however all prerequisites were ignored and were not part of the\n     suffix rule.  Starting with GNU 'make' 4.3 the behavior is the\n     same, and in addition this warning is generated.  In a future\n     version the POSIX-conforming behavior will be the only behavior: no\n     rule with a prerequisite can be suffix rule and this warning will\n     be removed.", "make"], "Circular": ["'Circular XXX <- YYY dependency dropped.'\n     This means that 'make' detected a loop in the dependency graph:\n     after tracing the prerequisite YYY of target XXX, and its\n     prerequisites, etc., one of them depended on XXX again.", "make"], "Recursive": ["'Recursive variable `XXX' references itself (eventually). Stop.'\n     This means you've defined a normal (recursive) 'make' variable XXX\n     that, when it's expanded, will refer to itself (XXX).  This is not\n     allowed; either use simply-expanded variables (':=' or '::=') or\n     use the append operator ('+=').  *Note How to Use Variables: Using\n     Variables.", "make"], "Unterminated": ["'Unterminated variable reference. Stop.'\n     This means you forgot to provide the proper closing parenthesis or\n     brace in your variable or function reference.", "make"], "insufficient": ["'insufficient arguments to function `XXX'. Stop.'\n     This means you haven't provided the requisite number of arguments\n     for this function.  See the documentation of the function for a\n     description of its arguments.  *Note Functions for Transforming\n     Text: Functions.", "make"], "multiple": ["'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons.", "make"], "target": ["'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons.", "make"], "mixed": ["'missing target pattern. Stop.'\n'multiple target patterns. Stop.'\n'target pattern contains no `%'. Stop.'\n'mixed implicit and static pattern rules. Stop.'\n     These errors are generated for malformed static pattern rules\n     (*note Syntax of Static Pattern Rules: Static Usage.).  The first\n     means the target-pattern part of the rule is empty; the second\n     means there are multiple pattern characters ('%') in the\n     target-pattern part; the third means there are no pattern\n     characters in the target-pattern part; and the fourth means that\n     all three parts of the static pattern rule contain pattern\n     characters ('%')-the first part should not contain pattern\n     characters.\n     If you see these errors and you aren't trying to create a static\n     pattern rule, check the value of any variables in your target and\n     prerequisite lists to be sure they do not contain colons.", "make"]}